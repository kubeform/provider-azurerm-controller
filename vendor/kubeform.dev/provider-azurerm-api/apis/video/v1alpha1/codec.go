/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyzerSpecIdentity{}).Type1()):       AnalyzerSpecIdentityCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyzerSpecStorageAccount{}).Type1()): AnalyzerSpecStorageAccountCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyzerSpecIdentity{}).Type1()):       AnalyzerSpecIdentityCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyzerSpecStorageAccount{}).Type1()): AnalyzerSpecStorageAccountCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type AnalyzerSpecIdentityCodec struct {
}

func (AnalyzerSpecIdentityCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnalyzerSpecIdentity)(ptr) == nil
}

func (AnalyzerSpecIdentityCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnalyzerSpecIdentity)(ptr)
	var objs []AnalyzerSpecIdentity
	if obj != nil {
		objs = []AnalyzerSpecIdentity{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyzerSpecIdentity{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnalyzerSpecIdentityCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnalyzerSpecIdentity)(ptr) = AnalyzerSpecIdentity{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnalyzerSpecIdentity

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyzerSpecIdentity{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnalyzerSpecIdentity)(ptr) = objs[0]
			} else {
				*(*AnalyzerSpecIdentity)(ptr) = AnalyzerSpecIdentity{}
			}
		} else {
			*(*AnalyzerSpecIdentity)(ptr) = AnalyzerSpecIdentity{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnalyzerSpecIdentity

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyzerSpecIdentity{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnalyzerSpecIdentity)(ptr) = obj
		} else {
			*(*AnalyzerSpecIdentity)(ptr) = AnalyzerSpecIdentity{}
		}
	default:
		iter.ReportError("decode AnalyzerSpecIdentity", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnalyzerSpecStorageAccountCodec struct {
}

func (AnalyzerSpecStorageAccountCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnalyzerSpecStorageAccount)(ptr) == nil
}

func (AnalyzerSpecStorageAccountCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnalyzerSpecStorageAccount)(ptr)
	var objs []AnalyzerSpecStorageAccount
	if obj != nil {
		objs = []AnalyzerSpecStorageAccount{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyzerSpecStorageAccount{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnalyzerSpecStorageAccountCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnalyzerSpecStorageAccount)(ptr) = AnalyzerSpecStorageAccount{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnalyzerSpecStorageAccount

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyzerSpecStorageAccount{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnalyzerSpecStorageAccount)(ptr) = objs[0]
			} else {
				*(*AnalyzerSpecStorageAccount)(ptr) = AnalyzerSpecStorageAccount{}
			}
		} else {
			*(*AnalyzerSpecStorageAccount)(ptr) = AnalyzerSpecStorageAccount{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AnalyzerSpecStorageAccount

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyzerSpecStorageAccount{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AnalyzerSpecStorageAccount)(ptr) = obj
		} else {
			*(*AnalyzerSpecStorageAccount)(ptr) = AnalyzerSpecStorageAccount{}
		}
	default:
		iter.ReportError("decode AnalyzerSpecStorageAccount", "unexpected JSON type")
	}
}
