/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilter{}).Type1()):             BudgetManagementGroupSpecFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNot{}).Type1()):          BudgetManagementGroupSpecFilterNotCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNotDimension{}).Type1()): BudgetManagementGroupSpecFilterNotDimensionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNotTag{}).Type1()):       BudgetManagementGroupSpecFilterNotTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecTimePeriod{}).Type1()):         BudgetManagementGroupSpecTimePeriodCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilter{}).Type1()):               BudgetResourceGroupSpecFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNot{}).Type1()):            BudgetResourceGroupSpecFilterNotCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotDimension{}).Type1()):   BudgetResourceGroupSpecFilterNotDimensionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotTag{}).Type1()):         BudgetResourceGroupSpecFilterNotTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecTimePeriod{}).Type1()):           BudgetResourceGroupSpecTimePeriodCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilter{}).Type1()):                BudgetSubscriptionSpecFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNot{}).Type1()):             BudgetSubscriptionSpecFilterNotCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotDimension{}).Type1()):    BudgetSubscriptionSpecFilterNotDimensionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotTag{}).Type1()):          BudgetSubscriptionSpecFilterNotTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecTimePeriod{}).Type1()):            BudgetSubscriptionSpecTimePeriodCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilter{}).Type1()):             BudgetManagementGroupSpecFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNot{}).Type1()):          BudgetManagementGroupSpecFilterNotCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNotDimension{}).Type1()): BudgetManagementGroupSpecFilterNotDimensionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNotTag{}).Type1()):       BudgetManagementGroupSpecFilterNotTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecTimePeriod{}).Type1()):         BudgetManagementGroupSpecTimePeriodCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilter{}).Type1()):               BudgetResourceGroupSpecFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNot{}).Type1()):            BudgetResourceGroupSpecFilterNotCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotDimension{}).Type1()):   BudgetResourceGroupSpecFilterNotDimensionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotTag{}).Type1()):         BudgetResourceGroupSpecFilterNotTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecTimePeriod{}).Type1()):           BudgetResourceGroupSpecTimePeriodCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilter{}).Type1()):                BudgetSubscriptionSpecFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNot{}).Type1()):             BudgetSubscriptionSpecFilterNotCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotDimension{}).Type1()):    BudgetSubscriptionSpecFilterNotDimensionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotTag{}).Type1()):          BudgetSubscriptionSpecFilterNotTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecTimePeriod{}).Type1()):            BudgetSubscriptionSpecTimePeriodCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type BudgetManagementGroupSpecFilterCodec struct {
}

func (BudgetManagementGroupSpecFilterCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetManagementGroupSpecFilter)(ptr) == nil
}

func (BudgetManagementGroupSpecFilterCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetManagementGroupSpecFilter)(ptr)
	var objs []BudgetManagementGroupSpecFilter
	if obj != nil {
		objs = []BudgetManagementGroupSpecFilter{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilter{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetManagementGroupSpecFilterCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetManagementGroupSpecFilter)(ptr) = BudgetManagementGroupSpecFilter{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetManagementGroupSpecFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetManagementGroupSpecFilter)(ptr) = objs[0]
			} else {
				*(*BudgetManagementGroupSpecFilter)(ptr) = BudgetManagementGroupSpecFilter{}
			}
		} else {
			*(*BudgetManagementGroupSpecFilter)(ptr) = BudgetManagementGroupSpecFilter{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetManagementGroupSpecFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetManagementGroupSpecFilter)(ptr) = obj
		} else {
			*(*BudgetManagementGroupSpecFilter)(ptr) = BudgetManagementGroupSpecFilter{}
		}
	default:
		iter.ReportError("decode BudgetManagementGroupSpecFilter", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetManagementGroupSpecFilterNotCodec struct {
}

func (BudgetManagementGroupSpecFilterNotCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetManagementGroupSpecFilterNot)(ptr) == nil
}

func (BudgetManagementGroupSpecFilterNotCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetManagementGroupSpecFilterNot)(ptr)
	var objs []BudgetManagementGroupSpecFilterNot
	if obj != nil {
		objs = []BudgetManagementGroupSpecFilterNot{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNot{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetManagementGroupSpecFilterNotCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetManagementGroupSpecFilterNot)(ptr) = BudgetManagementGroupSpecFilterNot{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetManagementGroupSpecFilterNot

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNot{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetManagementGroupSpecFilterNot)(ptr) = objs[0]
			} else {
				*(*BudgetManagementGroupSpecFilterNot)(ptr) = BudgetManagementGroupSpecFilterNot{}
			}
		} else {
			*(*BudgetManagementGroupSpecFilterNot)(ptr) = BudgetManagementGroupSpecFilterNot{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetManagementGroupSpecFilterNot

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNot{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetManagementGroupSpecFilterNot)(ptr) = obj
		} else {
			*(*BudgetManagementGroupSpecFilterNot)(ptr) = BudgetManagementGroupSpecFilterNot{}
		}
	default:
		iter.ReportError("decode BudgetManagementGroupSpecFilterNot", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetManagementGroupSpecFilterNotDimensionCodec struct {
}

func (BudgetManagementGroupSpecFilterNotDimensionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetManagementGroupSpecFilterNotDimension)(ptr) == nil
}

func (BudgetManagementGroupSpecFilterNotDimensionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetManagementGroupSpecFilterNotDimension)(ptr)
	var objs []BudgetManagementGroupSpecFilterNotDimension
	if obj != nil {
		objs = []BudgetManagementGroupSpecFilterNotDimension{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNotDimension{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetManagementGroupSpecFilterNotDimensionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetManagementGroupSpecFilterNotDimension)(ptr) = BudgetManagementGroupSpecFilterNotDimension{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetManagementGroupSpecFilterNotDimension

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNotDimension{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetManagementGroupSpecFilterNotDimension)(ptr) = objs[0]
			} else {
				*(*BudgetManagementGroupSpecFilterNotDimension)(ptr) = BudgetManagementGroupSpecFilterNotDimension{}
			}
		} else {
			*(*BudgetManagementGroupSpecFilterNotDimension)(ptr) = BudgetManagementGroupSpecFilterNotDimension{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetManagementGroupSpecFilterNotDimension

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNotDimension{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetManagementGroupSpecFilterNotDimension)(ptr) = obj
		} else {
			*(*BudgetManagementGroupSpecFilterNotDimension)(ptr) = BudgetManagementGroupSpecFilterNotDimension{}
		}
	default:
		iter.ReportError("decode BudgetManagementGroupSpecFilterNotDimension", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetManagementGroupSpecFilterNotTagCodec struct {
}

func (BudgetManagementGroupSpecFilterNotTagCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetManagementGroupSpecFilterNotTag)(ptr) == nil
}

func (BudgetManagementGroupSpecFilterNotTagCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetManagementGroupSpecFilterNotTag)(ptr)
	var objs []BudgetManagementGroupSpecFilterNotTag
	if obj != nil {
		objs = []BudgetManagementGroupSpecFilterNotTag{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNotTag{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetManagementGroupSpecFilterNotTagCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetManagementGroupSpecFilterNotTag)(ptr) = BudgetManagementGroupSpecFilterNotTag{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetManagementGroupSpecFilterNotTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNotTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetManagementGroupSpecFilterNotTag)(ptr) = objs[0]
			} else {
				*(*BudgetManagementGroupSpecFilterNotTag)(ptr) = BudgetManagementGroupSpecFilterNotTag{}
			}
		} else {
			*(*BudgetManagementGroupSpecFilterNotTag)(ptr) = BudgetManagementGroupSpecFilterNotTag{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetManagementGroupSpecFilterNotTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecFilterNotTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetManagementGroupSpecFilterNotTag)(ptr) = obj
		} else {
			*(*BudgetManagementGroupSpecFilterNotTag)(ptr) = BudgetManagementGroupSpecFilterNotTag{}
		}
	default:
		iter.ReportError("decode BudgetManagementGroupSpecFilterNotTag", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetManagementGroupSpecTimePeriodCodec struct {
}

func (BudgetManagementGroupSpecTimePeriodCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetManagementGroupSpecTimePeriod)(ptr) == nil
}

func (BudgetManagementGroupSpecTimePeriodCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetManagementGroupSpecTimePeriod)(ptr)
	var objs []BudgetManagementGroupSpecTimePeriod
	if obj != nil {
		objs = []BudgetManagementGroupSpecTimePeriod{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecTimePeriod{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetManagementGroupSpecTimePeriodCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetManagementGroupSpecTimePeriod)(ptr) = BudgetManagementGroupSpecTimePeriod{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetManagementGroupSpecTimePeriod

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecTimePeriod{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetManagementGroupSpecTimePeriod)(ptr) = objs[0]
			} else {
				*(*BudgetManagementGroupSpecTimePeriod)(ptr) = BudgetManagementGroupSpecTimePeriod{}
			}
		} else {
			*(*BudgetManagementGroupSpecTimePeriod)(ptr) = BudgetManagementGroupSpecTimePeriod{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetManagementGroupSpecTimePeriod

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetManagementGroupSpecTimePeriod{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetManagementGroupSpecTimePeriod)(ptr) = obj
		} else {
			*(*BudgetManagementGroupSpecTimePeriod)(ptr) = BudgetManagementGroupSpecTimePeriod{}
		}
	default:
		iter.ReportError("decode BudgetManagementGroupSpecTimePeriod", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetResourceGroupSpecFilterCodec struct {
}

func (BudgetResourceGroupSpecFilterCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetResourceGroupSpecFilter)(ptr) == nil
}

func (BudgetResourceGroupSpecFilterCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetResourceGroupSpecFilter)(ptr)
	var objs []BudgetResourceGroupSpecFilter
	if obj != nil {
		objs = []BudgetResourceGroupSpecFilter{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilter{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetResourceGroupSpecFilterCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetResourceGroupSpecFilter)(ptr) = BudgetResourceGroupSpecFilter{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetResourceGroupSpecFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetResourceGroupSpecFilter)(ptr) = objs[0]
			} else {
				*(*BudgetResourceGroupSpecFilter)(ptr) = BudgetResourceGroupSpecFilter{}
			}
		} else {
			*(*BudgetResourceGroupSpecFilter)(ptr) = BudgetResourceGroupSpecFilter{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetResourceGroupSpecFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetResourceGroupSpecFilter)(ptr) = obj
		} else {
			*(*BudgetResourceGroupSpecFilter)(ptr) = BudgetResourceGroupSpecFilter{}
		}
	default:
		iter.ReportError("decode BudgetResourceGroupSpecFilter", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetResourceGroupSpecFilterNotCodec struct {
}

func (BudgetResourceGroupSpecFilterNotCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetResourceGroupSpecFilterNot)(ptr) == nil
}

func (BudgetResourceGroupSpecFilterNotCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetResourceGroupSpecFilterNot)(ptr)
	var objs []BudgetResourceGroupSpecFilterNot
	if obj != nil {
		objs = []BudgetResourceGroupSpecFilterNot{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNot{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetResourceGroupSpecFilterNotCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetResourceGroupSpecFilterNot)(ptr) = BudgetResourceGroupSpecFilterNot{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetResourceGroupSpecFilterNot

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNot{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetResourceGroupSpecFilterNot)(ptr) = objs[0]
			} else {
				*(*BudgetResourceGroupSpecFilterNot)(ptr) = BudgetResourceGroupSpecFilterNot{}
			}
		} else {
			*(*BudgetResourceGroupSpecFilterNot)(ptr) = BudgetResourceGroupSpecFilterNot{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetResourceGroupSpecFilterNot

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNot{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetResourceGroupSpecFilterNot)(ptr) = obj
		} else {
			*(*BudgetResourceGroupSpecFilterNot)(ptr) = BudgetResourceGroupSpecFilterNot{}
		}
	default:
		iter.ReportError("decode BudgetResourceGroupSpecFilterNot", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetResourceGroupSpecFilterNotDimensionCodec struct {
}

func (BudgetResourceGroupSpecFilterNotDimensionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetResourceGroupSpecFilterNotDimension)(ptr) == nil
}

func (BudgetResourceGroupSpecFilterNotDimensionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetResourceGroupSpecFilterNotDimension)(ptr)
	var objs []BudgetResourceGroupSpecFilterNotDimension
	if obj != nil {
		objs = []BudgetResourceGroupSpecFilterNotDimension{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotDimension{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetResourceGroupSpecFilterNotDimensionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetResourceGroupSpecFilterNotDimension)(ptr) = BudgetResourceGroupSpecFilterNotDimension{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetResourceGroupSpecFilterNotDimension

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotDimension{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetResourceGroupSpecFilterNotDimension)(ptr) = objs[0]
			} else {
				*(*BudgetResourceGroupSpecFilterNotDimension)(ptr) = BudgetResourceGroupSpecFilterNotDimension{}
			}
		} else {
			*(*BudgetResourceGroupSpecFilterNotDimension)(ptr) = BudgetResourceGroupSpecFilterNotDimension{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetResourceGroupSpecFilterNotDimension

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotDimension{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetResourceGroupSpecFilterNotDimension)(ptr) = obj
		} else {
			*(*BudgetResourceGroupSpecFilterNotDimension)(ptr) = BudgetResourceGroupSpecFilterNotDimension{}
		}
	default:
		iter.ReportError("decode BudgetResourceGroupSpecFilterNotDimension", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetResourceGroupSpecFilterNotTagCodec struct {
}

func (BudgetResourceGroupSpecFilterNotTagCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetResourceGroupSpecFilterNotTag)(ptr) == nil
}

func (BudgetResourceGroupSpecFilterNotTagCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetResourceGroupSpecFilterNotTag)(ptr)
	var objs []BudgetResourceGroupSpecFilterNotTag
	if obj != nil {
		objs = []BudgetResourceGroupSpecFilterNotTag{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotTag{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetResourceGroupSpecFilterNotTagCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetResourceGroupSpecFilterNotTag)(ptr) = BudgetResourceGroupSpecFilterNotTag{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetResourceGroupSpecFilterNotTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetResourceGroupSpecFilterNotTag)(ptr) = objs[0]
			} else {
				*(*BudgetResourceGroupSpecFilterNotTag)(ptr) = BudgetResourceGroupSpecFilterNotTag{}
			}
		} else {
			*(*BudgetResourceGroupSpecFilterNotTag)(ptr) = BudgetResourceGroupSpecFilterNotTag{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetResourceGroupSpecFilterNotTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetResourceGroupSpecFilterNotTag)(ptr) = obj
		} else {
			*(*BudgetResourceGroupSpecFilterNotTag)(ptr) = BudgetResourceGroupSpecFilterNotTag{}
		}
	default:
		iter.ReportError("decode BudgetResourceGroupSpecFilterNotTag", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetResourceGroupSpecTimePeriodCodec struct {
}

func (BudgetResourceGroupSpecTimePeriodCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetResourceGroupSpecTimePeriod)(ptr) == nil
}

func (BudgetResourceGroupSpecTimePeriodCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetResourceGroupSpecTimePeriod)(ptr)
	var objs []BudgetResourceGroupSpecTimePeriod
	if obj != nil {
		objs = []BudgetResourceGroupSpecTimePeriod{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecTimePeriod{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetResourceGroupSpecTimePeriodCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetResourceGroupSpecTimePeriod)(ptr) = BudgetResourceGroupSpecTimePeriod{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetResourceGroupSpecTimePeriod

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecTimePeriod{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetResourceGroupSpecTimePeriod)(ptr) = objs[0]
			} else {
				*(*BudgetResourceGroupSpecTimePeriod)(ptr) = BudgetResourceGroupSpecTimePeriod{}
			}
		} else {
			*(*BudgetResourceGroupSpecTimePeriod)(ptr) = BudgetResourceGroupSpecTimePeriod{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetResourceGroupSpecTimePeriod

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecTimePeriod{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetResourceGroupSpecTimePeriod)(ptr) = obj
		} else {
			*(*BudgetResourceGroupSpecTimePeriod)(ptr) = BudgetResourceGroupSpecTimePeriod{}
		}
	default:
		iter.ReportError("decode BudgetResourceGroupSpecTimePeriod", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetSubscriptionSpecFilterCodec struct {
}

func (BudgetSubscriptionSpecFilterCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetSubscriptionSpecFilter)(ptr) == nil
}

func (BudgetSubscriptionSpecFilterCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetSubscriptionSpecFilter)(ptr)
	var objs []BudgetSubscriptionSpecFilter
	if obj != nil {
		objs = []BudgetSubscriptionSpecFilter{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilter{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetSubscriptionSpecFilterCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetSubscriptionSpecFilter)(ptr) = BudgetSubscriptionSpecFilter{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetSubscriptionSpecFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetSubscriptionSpecFilter)(ptr) = objs[0]
			} else {
				*(*BudgetSubscriptionSpecFilter)(ptr) = BudgetSubscriptionSpecFilter{}
			}
		} else {
			*(*BudgetSubscriptionSpecFilter)(ptr) = BudgetSubscriptionSpecFilter{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetSubscriptionSpecFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetSubscriptionSpecFilter)(ptr) = obj
		} else {
			*(*BudgetSubscriptionSpecFilter)(ptr) = BudgetSubscriptionSpecFilter{}
		}
	default:
		iter.ReportError("decode BudgetSubscriptionSpecFilter", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetSubscriptionSpecFilterNotCodec struct {
}

func (BudgetSubscriptionSpecFilterNotCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetSubscriptionSpecFilterNot)(ptr) == nil
}

func (BudgetSubscriptionSpecFilterNotCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetSubscriptionSpecFilterNot)(ptr)
	var objs []BudgetSubscriptionSpecFilterNot
	if obj != nil {
		objs = []BudgetSubscriptionSpecFilterNot{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNot{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetSubscriptionSpecFilterNotCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetSubscriptionSpecFilterNot)(ptr) = BudgetSubscriptionSpecFilterNot{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetSubscriptionSpecFilterNot

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNot{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetSubscriptionSpecFilterNot)(ptr) = objs[0]
			} else {
				*(*BudgetSubscriptionSpecFilterNot)(ptr) = BudgetSubscriptionSpecFilterNot{}
			}
		} else {
			*(*BudgetSubscriptionSpecFilterNot)(ptr) = BudgetSubscriptionSpecFilterNot{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetSubscriptionSpecFilterNot

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNot{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetSubscriptionSpecFilterNot)(ptr) = obj
		} else {
			*(*BudgetSubscriptionSpecFilterNot)(ptr) = BudgetSubscriptionSpecFilterNot{}
		}
	default:
		iter.ReportError("decode BudgetSubscriptionSpecFilterNot", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetSubscriptionSpecFilterNotDimensionCodec struct {
}

func (BudgetSubscriptionSpecFilterNotDimensionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetSubscriptionSpecFilterNotDimension)(ptr) == nil
}

func (BudgetSubscriptionSpecFilterNotDimensionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetSubscriptionSpecFilterNotDimension)(ptr)
	var objs []BudgetSubscriptionSpecFilterNotDimension
	if obj != nil {
		objs = []BudgetSubscriptionSpecFilterNotDimension{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotDimension{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetSubscriptionSpecFilterNotDimensionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetSubscriptionSpecFilterNotDimension)(ptr) = BudgetSubscriptionSpecFilterNotDimension{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetSubscriptionSpecFilterNotDimension

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotDimension{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetSubscriptionSpecFilterNotDimension)(ptr) = objs[0]
			} else {
				*(*BudgetSubscriptionSpecFilterNotDimension)(ptr) = BudgetSubscriptionSpecFilterNotDimension{}
			}
		} else {
			*(*BudgetSubscriptionSpecFilterNotDimension)(ptr) = BudgetSubscriptionSpecFilterNotDimension{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetSubscriptionSpecFilterNotDimension

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotDimension{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetSubscriptionSpecFilterNotDimension)(ptr) = obj
		} else {
			*(*BudgetSubscriptionSpecFilterNotDimension)(ptr) = BudgetSubscriptionSpecFilterNotDimension{}
		}
	default:
		iter.ReportError("decode BudgetSubscriptionSpecFilterNotDimension", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetSubscriptionSpecFilterNotTagCodec struct {
}

func (BudgetSubscriptionSpecFilterNotTagCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetSubscriptionSpecFilterNotTag)(ptr) == nil
}

func (BudgetSubscriptionSpecFilterNotTagCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetSubscriptionSpecFilterNotTag)(ptr)
	var objs []BudgetSubscriptionSpecFilterNotTag
	if obj != nil {
		objs = []BudgetSubscriptionSpecFilterNotTag{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotTag{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetSubscriptionSpecFilterNotTagCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetSubscriptionSpecFilterNotTag)(ptr) = BudgetSubscriptionSpecFilterNotTag{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetSubscriptionSpecFilterNotTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetSubscriptionSpecFilterNotTag)(ptr) = objs[0]
			} else {
				*(*BudgetSubscriptionSpecFilterNotTag)(ptr) = BudgetSubscriptionSpecFilterNotTag{}
			}
		} else {
			*(*BudgetSubscriptionSpecFilterNotTag)(ptr) = BudgetSubscriptionSpecFilterNotTag{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetSubscriptionSpecFilterNotTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetSubscriptionSpecFilterNotTag)(ptr) = obj
		} else {
			*(*BudgetSubscriptionSpecFilterNotTag)(ptr) = BudgetSubscriptionSpecFilterNotTag{}
		}
	default:
		iter.ReportError("decode BudgetSubscriptionSpecFilterNotTag", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetSubscriptionSpecTimePeriodCodec struct {
}

func (BudgetSubscriptionSpecTimePeriodCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetSubscriptionSpecTimePeriod)(ptr) == nil
}

func (BudgetSubscriptionSpecTimePeriodCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetSubscriptionSpecTimePeriod)(ptr)
	var objs []BudgetSubscriptionSpecTimePeriod
	if obj != nil {
		objs = []BudgetSubscriptionSpecTimePeriod{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecTimePeriod{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetSubscriptionSpecTimePeriodCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetSubscriptionSpecTimePeriod)(ptr) = BudgetSubscriptionSpecTimePeriod{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetSubscriptionSpecTimePeriod

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecTimePeriod{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetSubscriptionSpecTimePeriod)(ptr) = objs[0]
			} else {
				*(*BudgetSubscriptionSpecTimePeriod)(ptr) = BudgetSubscriptionSpecTimePeriod{}
			}
		} else {
			*(*BudgetSubscriptionSpecTimePeriod)(ptr) = BudgetSubscriptionSpecTimePeriod{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj BudgetSubscriptionSpecTimePeriod

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecTimePeriod{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*BudgetSubscriptionSpecTimePeriod)(ptr) = obj
		} else {
			*(*BudgetSubscriptionSpecTimePeriod)(ptr) = BudgetSubscriptionSpecTimePeriod{}
		}
	default:
		iter.ReportError("decode BudgetSubscriptionSpecTimePeriod", "unexpected JSON type")
	}
}
