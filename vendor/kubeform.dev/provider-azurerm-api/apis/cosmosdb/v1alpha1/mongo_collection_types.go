/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type MongoCollection struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MongoCollectionSpec   `json:"spec,omitempty"`
	Status            MongoCollectionStatus `json:"status,omitempty"`
}

type MongoCollectionSpecAutoscaleSettings struct {
	// +optional
	MaxThroughput *int64 `json:"maxThroughput,omitempty" tf:"max_throughput"`
}

type MongoCollectionSpecIndex struct {
	Keys []string `json:"keys" tf:"keys"`
	// +optional
	Unique *bool `json:"unique,omitempty" tf:"unique"`
}

type MongoCollectionSpecSystemIndexes struct {
	// +optional
	Keys []string `json:"keys,omitempty" tf:"keys"`
	// +optional
	Unique *bool `json:"unique,omitempty" tf:"unique"`
}

type MongoCollectionSpec struct {
	State *MongoCollectionSpecResource `json:"state,omitempty" tf:"-"`

	Resource MongoCollectionSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type MongoCollectionSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	AccountName *string `json:"accountName" tf:"account_name"`
	// +optional
	AnalyticalStorageTtl *int64 `json:"analyticalStorageTtl,omitempty" tf:"analytical_storage_ttl"`
	// +optional
	AutoscaleSettings *MongoCollectionSpecAutoscaleSettings `json:"autoscaleSettings,omitempty" tf:"autoscale_settings"`
	DatabaseName      *string                               `json:"databaseName" tf:"database_name"`
	// +optional
	DefaultTtlSeconds *int64 `json:"defaultTtlSeconds,omitempty" tf:"default_ttl_seconds"`
	// +optional
	Index             []MongoCollectionSpecIndex `json:"index,omitempty" tf:"index"`
	Name              *string                    `json:"name" tf:"name"`
	ResourceGroupName *string                    `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	ShardKey *string `json:"shardKey,omitempty" tf:"shard_key"`
	// +optional
	SystemIndexes []MongoCollectionSpecSystemIndexes `json:"systemIndexes,omitempty" tf:"system_indexes"`
	// +optional
	Throughput *int64 `json:"throughput,omitempty" tf:"throughput"`
}

type MongoCollectionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// MongoCollectionList is a list of MongoCollections
type MongoCollectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of MongoCollection CRD objects
	Items []MongoCollection `json:"items,omitempty"`
}
