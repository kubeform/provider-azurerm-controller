/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Standard struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StandardSpec   `json:"spec,omitempty"`
	Status            StandardStatus `json:"status,omitempty"`
}

type StandardSpecConnectionString struct {
	Name  *string `json:"name" tf:"name"`
	Type  *string `json:"type" tf:"type"`
	Value *string `json:"-" sensitive:"true" tf:"value"`
}

type StandardSpecIdentity struct {
	// +optional
	PrincipalID *string `json:"principalID,omitempty" tf:"principal_id"`
	// +optional
	TenantID *string `json:"tenantID,omitempty" tf:"tenant_id"`
	Type     *string `json:"type" tf:"type"`
}

type StandardSpecSiteConfigCors struct {
	AllowedOrigins []string `json:"allowedOrigins" tf:"allowed_origins"`
	// +optional
	SupportCredentials *bool `json:"supportCredentials,omitempty" tf:"support_credentials"`
}

type StandardSpecSiteConfigIpRestrictionHeaders struct {
	// +optional
	// +kubebuilder:validation:MaxItems=8
	XAzureFdid []string `json:"xAzureFdid,omitempty" tf:"x_azure_fdid"`
	// +optional
	XFdHealthProbe []string `json:"xFdHealthProbe,omitempty" tf:"x_fd_health_probe"`
	// +optional
	// +kubebuilder:validation:MaxItems=8
	XForwardedFor []string `json:"xForwardedFor,omitempty" tf:"x_forwarded_for"`
	// +optional
	// +kubebuilder:validation:MaxItems=8
	XForwardedHost []string `json:"xForwardedHost,omitempty" tf:"x_forwarded_host"`
}

type StandardSpecSiteConfigIpRestriction struct {
	// +optional
	Action *string `json:"action,omitempty" tf:"action"`
	// +optional
	Headers *StandardSpecSiteConfigIpRestrictionHeaders `json:"headers,omitempty" tf:"headers"`
	// +optional
	IpAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Priority *int64 `json:"priority,omitempty" tf:"priority"`
	// +optional
	ServiceTag *string `json:"serviceTag,omitempty" tf:"service_tag"`
	// +optional
	VirtualNetworkSubnetID *string `json:"virtualNetworkSubnetID,omitempty" tf:"virtual_network_subnet_id"`
}

type StandardSpecSiteConfig struct {
	// +optional
	AlwaysOn *bool `json:"alwaysOn,omitempty" tf:"always_on"`
	// +optional
	AppScaleLimit *int64 `json:"appScaleLimit,omitempty" tf:"app_scale_limit"`
	// +optional
	Cors *StandardSpecSiteConfigCors `json:"cors,omitempty" tf:"cors"`
	// +optional
	DotnetFrameworkVersion *string `json:"dotnetFrameworkVersion,omitempty" tf:"dotnet_framework_version"`
	// +optional
	ElasticInstanceMinimum *int64 `json:"elasticInstanceMinimum,omitempty" tf:"elastic_instance_minimum"`
	// +optional
	FtpsState *string `json:"ftpsState,omitempty" tf:"ftps_state"`
	// +optional
	HealthCheckPath *string `json:"healthCheckPath,omitempty" tf:"health_check_path"`
	// +optional
	Http2Enabled *bool `json:"http2Enabled,omitempty" tf:"http2_enabled"`
	// +optional
	IpRestriction []StandardSpecSiteConfigIpRestriction `json:"ipRestriction,omitempty" tf:"ip_restriction"`
	// +optional
	LinuxFxVersion *string `json:"linuxFxVersion,omitempty" tf:"linux_fx_version"`
	// +optional
	MinTlsVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version"`
	// +optional
	PreWarmedInstanceCount *int64 `json:"preWarmedInstanceCount,omitempty" tf:"pre_warmed_instance_count"`
	// +optional
	RuntimeScaleMonitoringEnabled *bool `json:"runtimeScaleMonitoringEnabled,omitempty" tf:"runtime_scale_monitoring_enabled"`
	// +optional
	Use32BitWorkerProcess *bool `json:"use32BitWorkerProcess,omitempty" tf:"use_32_bit_worker_process"`
	// +optional
	VnetRouteAllEnabled *bool `json:"vnetRouteAllEnabled,omitempty" tf:"vnet_route_all_enabled"`
	// +optional
	WebsocketsEnabled *bool `json:"websocketsEnabled,omitempty" tf:"websockets_enabled"`
}

type StandardSpecSiteCredential struct {
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// +optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type StandardSpec struct {
	State *StandardSpecResource `json:"state,omitempty" tf:"-"`

	Resource StandardSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type StandardSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	AppServicePlanID *string `json:"appServicePlanID" tf:"app_service_plan_id"`
	// +optional
	AppSettings *map[string]string `json:"appSettings,omitempty" tf:"app_settings"`
	// +optional
	BundleVersion *string `json:"bundleVersion,omitempty" tf:"bundle_version"`
	// +optional
	ClientAffinityEnabled *bool `json:"clientAffinityEnabled,omitempty" tf:"client_affinity_enabled"`
	// +optional
	ClientCertificateMode *string `json:"clientCertificateMode,omitempty" tf:"client_certificate_mode"`
	// +optional
	ConnectionString []StandardSpecConnectionString `json:"connectionString,omitempty" tf:"connection_string"`
	// +optional
	CustomDomainVerificationID *string `json:"customDomainVerificationID,omitempty" tf:"custom_domain_verification_id"`
	// +optional
	DefaultHostname *string `json:"defaultHostname,omitempty" tf:"default_hostname"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	HttpsOnly *bool `json:"httpsOnly,omitempty" tf:"https_only"`
	// +optional
	Identity *StandardSpecIdentity `json:"identity,omitempty" tf:"identity"`
	// +optional
	Kind     *string `json:"kind,omitempty" tf:"kind"`
	Location *string `json:"location" tf:"location"`
	Name     *string `json:"name" tf:"name"`
	// +optional
	OutboundIPAddresses *string `json:"outboundIPAddresses,omitempty" tf:"outbound_ip_addresses"`
	// +optional
	PossibleOutboundIPAddresses *string `json:"possibleOutboundIPAddresses,omitempty" tf:"possible_outbound_ip_addresses"`
	ResourceGroupName           *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	SiteConfig *StandardSpecSiteConfig `json:"siteConfig,omitempty" tf:"site_config"`
	// +optional
	SiteCredential          []StandardSpecSiteCredential `json:"siteCredential,omitempty" tf:"site_credential"`
	StorageAccountAccessKey *string                      `json:"-" sensitive:"true" tf:"storage_account_access_key"`
	StorageAccountName      *string                      `json:"storageAccountName" tf:"storage_account_name"`
	// +optional
	StorageAccountShareName *string `json:"storageAccountShareName,omitempty" tf:"storage_account_share_name"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	UseExtensionBundle *bool `json:"useExtensionBundle,omitempty" tf:"use_extension_bundle"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type StandardStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StandardList is a list of Standards
type StandardList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Standard CRD objects
	Items []Standard `json:"items,omitempty"`
}
