/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type IntegrationAccountBatchConfiguration struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IntegrationAccountBatchConfigurationSpec   `json:"spec,omitempty"`
	Status            IntegrationAccountBatchConfigurationStatus `json:"status,omitempty"`
}

type IntegrationAccountBatchConfigurationSpecReleaseCriteriaRecurrenceScheduleMonthly struct {
	Week    *int64  `json:"week" tf:"week"`
	Weekday *string `json:"weekday" tf:"weekday"`
}

type IntegrationAccountBatchConfigurationSpecReleaseCriteriaRecurrenceSchedule struct {
	// +optional
	Hours []int64 `json:"hours,omitempty" tf:"hours"`
	// +optional
	Minutes []int64 `json:"minutes,omitempty" tf:"minutes"`
	// +optional
	MonthDays []int64 `json:"monthDays,omitempty" tf:"month_days"`
	// +optional
	Monthly []IntegrationAccountBatchConfigurationSpecReleaseCriteriaRecurrenceScheduleMonthly `json:"monthly,omitempty" tf:"monthly"`
	// +optional
	WeekDays []string `json:"weekDays,omitempty" tf:"week_days"`
}

type IntegrationAccountBatchConfigurationSpecReleaseCriteriaRecurrence struct {
	// +optional
	EndTime   *string `json:"endTime,omitempty" tf:"end_time"`
	Frequency *string `json:"frequency" tf:"frequency"`
	Interval  *int64  `json:"interval" tf:"interval"`
	// +optional
	Schedule *IntegrationAccountBatchConfigurationSpecReleaseCriteriaRecurrenceSchedule `json:"schedule,omitempty" tf:"schedule"`
	// +optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time"`
	// +optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone"`
}

type IntegrationAccountBatchConfigurationSpecReleaseCriteria struct {
	// +optional
	BatchSize *int64 `json:"batchSize,omitempty" tf:"batch_size"`
	// +optional
	MessageCount *int64 `json:"messageCount,omitempty" tf:"message_count"`
	// +optional
	Recurrence *IntegrationAccountBatchConfigurationSpecReleaseCriteriaRecurrence `json:"recurrence,omitempty" tf:"recurrence"`
}

type IntegrationAccountBatchConfigurationSpec struct {
	State *IntegrationAccountBatchConfigurationSpecResource `json:"state,omitempty" tf:"-"`

	Resource IntegrationAccountBatchConfigurationSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type IntegrationAccountBatchConfigurationSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	BatchGroupName         *string `json:"batchGroupName" tf:"batch_group_name"`
	IntegrationAccountName *string `json:"integrationAccountName" tf:"integration_account_name"`
	// +optional
	Metadata          *map[string]string                                       `json:"metadata,omitempty" tf:"metadata"`
	Name              *string                                                  `json:"name" tf:"name"`
	ReleaseCriteria   *IntegrationAccountBatchConfigurationSpecReleaseCriteria `json:"releaseCriteria" tf:"release_criteria"`
	ResourceGroupName *string                                                  `json:"resourceGroupName" tf:"resource_group_name"`
}

type IntegrationAccountBatchConfigurationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// IntegrationAccountBatchConfigurationList is a list of IntegrationAccountBatchConfigurations
type IntegrationAccountBatchConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of IntegrationAccountBatchConfiguration CRD objects
	Items []IntegrationAccountBatchConfiguration `json:"items,omitempty"`
}
