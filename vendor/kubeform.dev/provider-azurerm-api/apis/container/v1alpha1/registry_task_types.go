/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type RegistryTask struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegistryTaskSpec   `json:"spec,omitempty"`
	Status            RegistryTaskStatus `json:"status,omitempty"`
}

type RegistryTaskSpecAgentSetting struct {
	Cpu *int64 `json:"cpu" tf:"cpu"`
}

type RegistryTaskSpecBaseImageTrigger struct {
	// +optional
	Enabled *bool   `json:"enabled,omitempty" tf:"enabled"`
	Name    *string `json:"name" tf:"name"`
	Type    *string `json:"type" tf:"type"`
	// +optional
	UpdateTriggerEndpoint *string `json:"-" sensitive:"true" tf:"update_trigger_endpoint"`
	// +optional
	UpdateTriggerPayloadType *string `json:"updateTriggerPayloadType,omitempty" tf:"update_trigger_payload_type"`
}

type RegistryTaskSpecDockerStep struct {
	// +optional
	Arguments *map[string]string `json:"arguments,omitempty" tf:"arguments"`
	// +optional
	CacheEnabled       *bool   `json:"cacheEnabled,omitempty" tf:"cache_enabled"`
	ContextAccessToken *string `json:"-" sensitive:"true" tf:"context_access_token"`
	ContextPath        *string `json:"contextPath" tf:"context_path"`
	DockerfilePath     *string `json:"dockerfilePath" tf:"dockerfile_path"`
	// +optional
	ImageNames []string `json:"imageNames,omitempty" tf:"image_names"`
	// +optional
	PushEnabled *bool `json:"pushEnabled,omitempty" tf:"push_enabled"`
	// +optional
	SecretArguments *map[string]string `json:"-" sensitive:"true" tf:"secret_arguments"`
	// +optional
	Target *string `json:"target,omitempty" tf:"target"`
}

type RegistryTaskSpecEncodedStep struct {
	// +optional
	ContextAccessToken *string `json:"-" sensitive:"true" tf:"context_access_token"`
	// +optional
	ContextPath *string `json:"contextPath,omitempty" tf:"context_path"`
	// +optional
	SecretValues *map[string]string `json:"-" sensitive:"true" tf:"secret_values"`
	TaskContent  *string            `json:"taskContent" tf:"task_content"`
	// +optional
	ValueContent *string `json:"valueContent,omitempty" tf:"value_content"`
	// +optional
	Values *map[string]string `json:"values,omitempty" tf:"values"`
}

type RegistryTaskSpecFileStep struct {
	// +optional
	ContextAccessToken *string `json:"-" sensitive:"true" tf:"context_access_token"`
	// +optional
	ContextPath *string `json:"contextPath,omitempty" tf:"context_path"`
	// +optional
	SecretValues *map[string]string `json:"-" sensitive:"true" tf:"secret_values"`
	TaskFilePath *string            `json:"taskFilePath" tf:"task_file_path"`
	// +optional
	ValueFilePath *string `json:"valueFilePath,omitempty" tf:"value_file_path"`
	// +optional
	Values *map[string]string `json:"values,omitempty" tf:"values"`
}

type RegistryTaskSpecIdentity struct {
	// +optional
	IdentityIDS []string `json:"identityIDS,omitempty" tf:"identity_ids"`
	// +optional
	PrincipalID *string `json:"principalID,omitempty" tf:"principal_id"`
	// +optional
	TenantID *string `json:"tenantID,omitempty" tf:"tenant_id"`
	Type     *string `json:"type" tf:"type"`
}

type RegistryTaskSpecPlatform struct {
	// +optional
	Architecture *string `json:"architecture,omitempty" tf:"architecture"`
	Os           *string `json:"os" tf:"os"`
	// +optional
	Variant *string `json:"variant,omitempty" tf:"variant"`
}

type RegistryTaskSpecRegistryCredentialCustom struct {
	// +optional
	Identity    *string `json:"identity,omitempty" tf:"identity"`
	LoginServer *string `json:"loginServer" tf:"login_server"`
	// +optional
	Password *string `json:"password,omitempty" tf:"password"`
	// +optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type RegistryTaskSpecRegistryCredentialSource struct {
	LoginMode *string `json:"loginMode" tf:"login_mode"`
}

type RegistryTaskSpecRegistryCredential struct {
	// +optional
	Custom []RegistryTaskSpecRegistryCredentialCustom `json:"-" sensitive:"true" tf:"custom"`
	// +optional
	Source *RegistryTaskSpecRegistryCredentialSource `json:"source,omitempty" tf:"source"`
}

type RegistryTaskSpecSourceTriggerAuthentication struct {
	// +optional
	ExpireInSeconds *int64 `json:"expireInSeconds,omitempty" tf:"expire_in_seconds"`
	// +optional
	RefreshToken *string `json:"-" sensitive:"true" tf:"refresh_token"`
	// +optional
	Scope     *string `json:"scope,omitempty" tf:"scope"`
	Token     *string `json:"-" sensitive:"true" tf:"token"`
	TokenType *string `json:"tokenType" tf:"token_type"`
}

type RegistryTaskSpecSourceTrigger struct {
	// +optional
	Authentication *RegistryTaskSpecSourceTriggerAuthentication `json:"authentication,omitempty" tf:"authentication"`
	// +optional
	Branch *string `json:"branch,omitempty" tf:"branch"`
	// +optional
	Enabled       *bool    `json:"enabled,omitempty" tf:"enabled"`
	Events        []string `json:"events" tf:"events"`
	Name          *string  `json:"name" tf:"name"`
	RepositoryURL *string  `json:"repositoryURL" tf:"repository_url"`
	SourceType    *string  `json:"sourceType" tf:"source_type"`
}

type RegistryTaskSpecTimerTrigger struct {
	// +optional
	Enabled  *bool   `json:"enabled,omitempty" tf:"enabled"`
	Name     *string `json:"name" tf:"name"`
	Schedule *string `json:"schedule" tf:"schedule"`
}

type RegistryTaskSpec struct {
	State *RegistryTaskSpecResource `json:"state,omitempty" tf:"-"`

	Resource RegistryTaskSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type RegistryTaskSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AgentPoolName *string `json:"agentPoolName,omitempty" tf:"agent_pool_name"`
	// +optional
	AgentSetting *RegistryTaskSpecAgentSetting `json:"agentSetting,omitempty" tf:"agent_setting"`
	// +optional
	BaseImageTrigger    *RegistryTaskSpecBaseImageTrigger `json:"baseImageTrigger,omitempty" tf:"base_image_trigger"`
	ContainerRegistryID *string                           `json:"containerRegistryID" tf:"container_registry_id"`
	// +optional
	DockerStep *RegistryTaskSpecDockerStep `json:"dockerStep,omitempty" tf:"docker_step"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	EncodedStep *RegistryTaskSpecEncodedStep `json:"encodedStep,omitempty" tf:"encoded_step"`
	// +optional
	FileStep *RegistryTaskSpecFileStep `json:"fileStep,omitempty" tf:"file_step"`
	// +optional
	Identity *RegistryTaskSpecIdentity `json:"identity,omitempty" tf:"identity"`
	// +optional
	IsSystemTask *bool `json:"isSystemTask,omitempty" tf:"is_system_task"`
	// +optional
	LogTemplate *string `json:"logTemplate,omitempty" tf:"log_template"`
	Name        *string `json:"name" tf:"name"`
	// +optional
	Platform *RegistryTaskSpecPlatform `json:"platform,omitempty" tf:"platform"`
	// +optional
	RegistryCredential *RegistryTaskSpecRegistryCredential `json:"registryCredential,omitempty" tf:"registry_credential"`
	// +optional
	SourceTrigger []RegistryTaskSpecSourceTrigger `json:"sourceTrigger,omitempty" tf:"source_trigger"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TimeoutInSeconds *int64 `json:"timeoutInSeconds,omitempty" tf:"timeout_in_seconds"`
	// +optional
	TimerTrigger []RegistryTaskSpecTimerTrigger `json:"timerTrigger,omitempty" tf:"timer_trigger"`
}

type RegistryTaskStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RegistryTaskList is a list of RegistryTasks
type RegistryTaskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of RegistryTask CRD objects
	Items []RegistryTask `json:"items,omitempty"`
}
