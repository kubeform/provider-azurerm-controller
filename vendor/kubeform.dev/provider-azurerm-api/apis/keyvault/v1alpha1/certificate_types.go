/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Certificate struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateSpec   `json:"spec,omitempty"`
	Status            CertificateStatus `json:"status,omitempty"`
}

type CertificateSpecCertificate struct {
	Contents *string `json:"-" sensitive:"true" tf:"contents"`
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
}

type CertificateSpecCertificateAttribute struct {
	// +optional
	Created *string `json:"created,omitempty" tf:"created"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	Expires *string `json:"expires,omitempty" tf:"expires"`
	// +optional
	NotBefore *string `json:"notBefore,omitempty" tf:"not_before"`
	// +optional
	RecoveryLevel *string `json:"recoveryLevel,omitempty" tf:"recovery_level"`
	// +optional
	Updated *string `json:"updated,omitempty" tf:"updated"`
}

type CertificateSpecCertificatePolicyIssuerParameters struct {
	Name *string `json:"name" tf:"name"`
}

type CertificateSpecCertificatePolicyKeyProperties struct {
	// +optional
	Curve      *string `json:"curve,omitempty" tf:"curve"`
	Exportable *bool   `json:"exportable" tf:"exportable"`
	// +optional
	KeySize  *int64  `json:"keySize,omitempty" tf:"key_size"`
	KeyType  *string `json:"keyType" tf:"key_type"`
	ReuseKey *bool   `json:"reuseKey" tf:"reuse_key"`
}

type CertificateSpecCertificatePolicyLifetimeActionAction struct {
	ActionType *string `json:"actionType" tf:"action_type"`
}

type CertificateSpecCertificatePolicyLifetimeActionTrigger struct {
	// +optional
	DaysBeforeExpiry *int64 `json:"daysBeforeExpiry,omitempty" tf:"days_before_expiry"`
	// +optional
	LifetimePercentage *int64 `json:"lifetimePercentage,omitempty" tf:"lifetime_percentage"`
}

type CertificateSpecCertificatePolicyLifetimeAction struct {
	Action  *CertificateSpecCertificatePolicyLifetimeActionAction  `json:"action" tf:"action"`
	Trigger *CertificateSpecCertificatePolicyLifetimeActionTrigger `json:"trigger" tf:"trigger"`
}

type CertificateSpecCertificatePolicySecretProperties struct {
	ContentType *string `json:"contentType" tf:"content_type"`
}

type CertificateSpecCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames struct {
	// +optional
	DnsNames []string `json:"dnsNames,omitempty" tf:"dns_names"`
	// +optional
	Emails []string `json:"emails,omitempty" tf:"emails"`
	// +optional
	Upns []string `json:"upns,omitempty" tf:"upns"`
}

type CertificateSpecCertificatePolicyX509CertificateProperties struct {
	// +optional
	ExtendedKeyUsage []string `json:"extendedKeyUsage,omitempty" tf:"extended_key_usage"`
	KeyUsage         []string `json:"keyUsage" tf:"key_usage"`
	Subject          *string  `json:"subject" tf:"subject"`
	// +optional
	SubjectAlternativeNames *CertificateSpecCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names"`
	ValidityInMonths        *int64                                                                            `json:"validityInMonths" tf:"validity_in_months"`
}

type CertificateSpecCertificatePolicy struct {
	IssuerParameters *CertificateSpecCertificatePolicyIssuerParameters `json:"issuerParameters" tf:"issuer_parameters"`
	KeyProperties    *CertificateSpecCertificatePolicyKeyProperties    `json:"keyProperties" tf:"key_properties"`
	// +optional
	LifetimeAction   []CertificateSpecCertificatePolicyLifetimeAction  `json:"lifetimeAction,omitempty" tf:"lifetime_action"`
	SecretProperties *CertificateSpecCertificatePolicySecretProperties `json:"secretProperties" tf:"secret_properties"`
	// +optional
	X509CertificateProperties *CertificateSpecCertificatePolicyX509CertificateProperties `json:"x509CertificateProperties,omitempty" tf:"x509_certificate_properties"`
}

type CertificateSpec struct {
	State *CertificateSpecResource `json:"state,omitempty" tf:"-"`

	Resource CertificateSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type CertificateSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Certificate *CertificateSpecCertificate `json:"certificate,omitempty" tf:"certificate"`
	// +optional
	CertificateAttribute []CertificateSpecCertificateAttribute `json:"certificateAttribute,omitempty" tf:"certificate_attribute"`
	// +optional
	CertificateData *string `json:"certificateData,omitempty" tf:"certificate_data"`
	// +optional
	CertificateDataBase64 *string `json:"certificateDataBase64,omitempty" tf:"certificate_data_base64"`
	// +optional
	CertificatePolicy *CertificateSpecCertificatePolicy `json:"certificatePolicy,omitempty" tf:"certificate_policy"`
	KeyVaultID        *string                           `json:"keyVaultID" tf:"key_vault_id"`
	Name              *string                           `json:"name" tf:"name"`
	// +optional
	SecretID *string `json:"secretID,omitempty" tf:"secret_id"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
	// +optional
	VersionlessID *string `json:"versionlessID,omitempty" tf:"versionless_id"`
	// +optional
	VersionlessSecretID *string `json:"versionlessSecretID,omitempty" tf:"versionless_secret_id"`
}

type CertificateStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CertificateList is a list of Certificates
type CertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Certificate CRD objects
	Items []Certificate `json:"items,omitempty"`
}
