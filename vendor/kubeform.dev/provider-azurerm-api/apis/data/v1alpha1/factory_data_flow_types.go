/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type FactoryDataFlow struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FactoryDataFlowSpec   `json:"spec,omitempty"`
	Status            FactoryDataFlowStatus `json:"status,omitempty"`
}

type FactoryDataFlowSpecSinkDataset struct {
	Name *string `json:"name" tf:"name"`
	// +optional
	Parameters *map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type FactoryDataFlowSpecSinkLinkedService struct {
	Name *string `json:"name" tf:"name"`
	// +optional
	Parameters *map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type FactoryDataFlowSpecSinkSchemaLinkedService struct {
	Name *string `json:"name" tf:"name"`
	// +optional
	Parameters *map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type FactoryDataFlowSpecSink struct {
	// +optional
	Dataset *FactoryDataFlowSpecSinkDataset `json:"dataset,omitempty" tf:"dataset"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	LinkedService *FactoryDataFlowSpecSinkLinkedService `json:"linkedService,omitempty" tf:"linked_service"`
	Name          *string                               `json:"name" tf:"name"`
	// +optional
	SchemaLinkedService *FactoryDataFlowSpecSinkSchemaLinkedService `json:"schemaLinkedService,omitempty" tf:"schema_linked_service"`
}

type FactoryDataFlowSpecSourceDataset struct {
	Name *string `json:"name" tf:"name"`
	// +optional
	Parameters *map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type FactoryDataFlowSpecSourceLinkedService struct {
	Name *string `json:"name" tf:"name"`
	// +optional
	Parameters *map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type FactoryDataFlowSpecSourceSchemaLinkedService struct {
	Name *string `json:"name" tf:"name"`
	// +optional
	Parameters *map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type FactoryDataFlowSpecSource struct {
	// +optional
	Dataset *FactoryDataFlowSpecSourceDataset `json:"dataset,omitempty" tf:"dataset"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	LinkedService *FactoryDataFlowSpecSourceLinkedService `json:"linkedService,omitempty" tf:"linked_service"`
	Name          *string                                 `json:"name" tf:"name"`
	// +optional
	SchemaLinkedService *FactoryDataFlowSpecSourceSchemaLinkedService `json:"schemaLinkedService,omitempty" tf:"schema_linked_service"`
}

type FactoryDataFlowSpecTransformation struct {
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	Name        *string `json:"name" tf:"name"`
}

type FactoryDataFlowSpec struct {
	State *FactoryDataFlowSpecResource `json:"state,omitempty" tf:"-"`

	Resource FactoryDataFlowSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type FactoryDataFlowSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Annotations   []string `json:"annotations,omitempty" tf:"annotations"`
	DataFactoryID *string  `json:"dataFactoryID" tf:"data_factory_id"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Folder *string                     `json:"folder,omitempty" tf:"folder"`
	Name   *string                     `json:"name" tf:"name"`
	Script *string                     `json:"script" tf:"script"`
	Sink   []FactoryDataFlowSpecSink   `json:"sink" tf:"sink"`
	Source []FactoryDataFlowSpecSource `json:"source" tf:"source"`
	// +optional
	Transformation []FactoryDataFlowSpecTransformation `json:"transformation,omitempty" tf:"transformation"`
}

type FactoryDataFlowStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// FactoryDataFlowList is a list of FactoryDataFlows
type FactoryDataFlowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of FactoryDataFlow CRD objects
	Items []FactoryDataFlow `json:"items,omitempty"`
}
