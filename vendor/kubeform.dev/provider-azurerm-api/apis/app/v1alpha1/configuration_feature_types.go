/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ConfigurationFeature struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigurationFeatureSpec   `json:"spec,omitempty"`
	Status            ConfigurationFeatureStatus `json:"status,omitempty"`
}

type ConfigurationFeatureSpecTargetingFilterGroups struct {
	Name              *string `json:"name" tf:"name"`
	RolloutPercentage *int64  `json:"rolloutPercentage" tf:"rollout_percentage"`
}

type ConfigurationFeatureSpecTargetingFilter struct {
	DefaultRolloutPercentage *int64 `json:"defaultRolloutPercentage" tf:"default_rollout_percentage"`
	// +optional
	Groups []ConfigurationFeatureSpecTargetingFilterGroups `json:"groups,omitempty" tf:"groups"`
	// +optional
	Users []string `json:"users,omitempty" tf:"users"`
}

type ConfigurationFeatureSpecTimewindowFilter struct {
	// +optional
	End *string `json:"end,omitempty" tf:"end"`
	// +optional
	Start *string `json:"start,omitempty" tf:"start"`
}

type ConfigurationFeatureSpec struct {
	State *ConfigurationFeatureSpecResource `json:"state,omitempty" tf:"-"`

	Resource ConfigurationFeatureSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ConfigurationFeatureSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	ConfigurationStoreID *string `json:"configurationStoreID" tf:"configuration_store_id"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	Etag *string `json:"etag,omitempty" tf:"etag"`
	// +optional
	Label *string `json:"label,omitempty" tf:"label"`
	// +optional
	Locked *bool   `json:"locked,omitempty" tf:"locked"`
	Name   *string `json:"name" tf:"name"`
	// +optional
	PercentageFilterValue *int64 `json:"percentageFilterValue,omitempty" tf:"percentage_filter_value"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TargetingFilter []ConfigurationFeatureSpecTargetingFilter `json:"targetingFilter,omitempty" tf:"targeting_filter"`
	// +optional
	TimewindowFilter []ConfigurationFeatureSpecTimewindowFilter `json:"timewindowFilter,omitempty" tf:"timewindow_filter"`
}

type ConfigurationFeatureStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ConfigurationFeatureList is a list of ConfigurationFeatures
type ConfigurationFeatureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ConfigurationFeature CRD objects
	Items []ConfigurationFeature `json:"items,omitempty"`
}
