/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Host struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HostSpec   `json:"spec,omitempty"`
	Status            HostStatus `json:"status,omitempty"`
}

type HostSpecIpConfiguration struct {
	Name              *string `json:"name" tf:"name"`
	PublicIPAddressID *string `json:"publicIPAddressID" tf:"public_ip_address_id"`
	SubnetID          *string `json:"subnetID" tf:"subnet_id"`
}

type HostSpec struct {
	State *HostSpecResource `json:"state,omitempty" tf:"-"`

	Resource HostSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type HostSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CopyPasteEnabled *bool `json:"copyPasteEnabled,omitempty" tf:"copy_paste_enabled"`
	// +optional
	DnsName *string `json:"dnsName,omitempty" tf:"dns_name"`
	// +optional
	FileCopyEnabled *bool `json:"fileCopyEnabled,omitempty" tf:"file_copy_enabled"`
	// +optional
	IpConfiguration *HostSpecIpConfiguration `json:"ipConfiguration,omitempty" tf:"ip_configuration"`
	// +optional
	IpConnectEnabled  *bool   `json:"ipConnectEnabled,omitempty" tf:"ip_connect_enabled"`
	Location          *string `json:"location" tf:"location"`
	Name              *string `json:"name" tf:"name"`
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	ScaleUnits *int64 `json:"scaleUnits,omitempty" tf:"scale_units"`
	// +optional
	ShareableLinkEnabled *bool `json:"shareableLinkEnabled,omitempty" tf:"shareable_link_enabled"`
	// +optional
	Sku *string `json:"sku,omitempty" tf:"sku"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TunnelingEnabled *bool `json:"tunnelingEnabled,omitempty" tf:"tunneling_enabled"`
}

type HostStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// HostList is a list of Hosts
type HostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Host CRD objects
	Items []Host `json:"items,omitempty"`
}
