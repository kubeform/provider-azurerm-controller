/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AccountSpecActiveDirectory{}).Type1()):             AccountSpecActiveDirectoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecDailySchedule{}).Type1()):        SnapshotPolicySpecDailyScheduleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecHourlySchedule{}).Type1()):       SnapshotPolicySpecHourlyScheduleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecMonthlySchedule{}).Type1()):      SnapshotPolicySpecMonthlyScheduleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecWeeklySchedule{}).Type1()):       SnapshotPolicySpecWeeklyScheduleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(VolumeSpecDataProtectionReplication{}).Type1()):    VolumeSpecDataProtectionReplicationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(VolumeSpecDataProtectionSnapshotPolicy{}).Type1()): VolumeSpecDataProtectionSnapshotPolicyCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AccountSpecActiveDirectory{}).Type1()):             AccountSpecActiveDirectoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecDailySchedule{}).Type1()):        SnapshotPolicySpecDailyScheduleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecHourlySchedule{}).Type1()):       SnapshotPolicySpecHourlyScheduleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecMonthlySchedule{}).Type1()):      SnapshotPolicySpecMonthlyScheduleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecWeeklySchedule{}).Type1()):       SnapshotPolicySpecWeeklyScheduleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(VolumeSpecDataProtectionReplication{}).Type1()):    VolumeSpecDataProtectionReplicationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(VolumeSpecDataProtectionSnapshotPolicy{}).Type1()): VolumeSpecDataProtectionSnapshotPolicyCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type AccountSpecActiveDirectoryCodec struct {
}

func (AccountSpecActiveDirectoryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AccountSpecActiveDirectory)(ptr) == nil
}

func (AccountSpecActiveDirectoryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AccountSpecActiveDirectory)(ptr)
	var objs []AccountSpecActiveDirectory
	if obj != nil {
		objs = []AccountSpecActiveDirectory{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AccountSpecActiveDirectory{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AccountSpecActiveDirectoryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AccountSpecActiveDirectory)(ptr) = AccountSpecActiveDirectory{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AccountSpecActiveDirectory

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AccountSpecActiveDirectory{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AccountSpecActiveDirectory)(ptr) = objs[0]
			} else {
				*(*AccountSpecActiveDirectory)(ptr) = AccountSpecActiveDirectory{}
			}
		} else {
			*(*AccountSpecActiveDirectory)(ptr) = AccountSpecActiveDirectory{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AccountSpecActiveDirectory

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AccountSpecActiveDirectory{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AccountSpecActiveDirectory)(ptr) = obj
		} else {
			*(*AccountSpecActiveDirectory)(ptr) = AccountSpecActiveDirectory{}
		}
	default:
		iter.ReportError("decode AccountSpecActiveDirectory", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SnapshotPolicySpecDailyScheduleCodec struct {
}

func (SnapshotPolicySpecDailyScheduleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SnapshotPolicySpecDailySchedule)(ptr) == nil
}

func (SnapshotPolicySpecDailyScheduleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SnapshotPolicySpecDailySchedule)(ptr)
	var objs []SnapshotPolicySpecDailySchedule
	if obj != nil {
		objs = []SnapshotPolicySpecDailySchedule{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecDailySchedule{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SnapshotPolicySpecDailyScheduleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SnapshotPolicySpecDailySchedule)(ptr) = SnapshotPolicySpecDailySchedule{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SnapshotPolicySpecDailySchedule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecDailySchedule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SnapshotPolicySpecDailySchedule)(ptr) = objs[0]
			} else {
				*(*SnapshotPolicySpecDailySchedule)(ptr) = SnapshotPolicySpecDailySchedule{}
			}
		} else {
			*(*SnapshotPolicySpecDailySchedule)(ptr) = SnapshotPolicySpecDailySchedule{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SnapshotPolicySpecDailySchedule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecDailySchedule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SnapshotPolicySpecDailySchedule)(ptr) = obj
		} else {
			*(*SnapshotPolicySpecDailySchedule)(ptr) = SnapshotPolicySpecDailySchedule{}
		}
	default:
		iter.ReportError("decode SnapshotPolicySpecDailySchedule", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SnapshotPolicySpecHourlyScheduleCodec struct {
}

func (SnapshotPolicySpecHourlyScheduleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SnapshotPolicySpecHourlySchedule)(ptr) == nil
}

func (SnapshotPolicySpecHourlyScheduleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SnapshotPolicySpecHourlySchedule)(ptr)
	var objs []SnapshotPolicySpecHourlySchedule
	if obj != nil {
		objs = []SnapshotPolicySpecHourlySchedule{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecHourlySchedule{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SnapshotPolicySpecHourlyScheduleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SnapshotPolicySpecHourlySchedule)(ptr) = SnapshotPolicySpecHourlySchedule{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SnapshotPolicySpecHourlySchedule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecHourlySchedule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SnapshotPolicySpecHourlySchedule)(ptr) = objs[0]
			} else {
				*(*SnapshotPolicySpecHourlySchedule)(ptr) = SnapshotPolicySpecHourlySchedule{}
			}
		} else {
			*(*SnapshotPolicySpecHourlySchedule)(ptr) = SnapshotPolicySpecHourlySchedule{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SnapshotPolicySpecHourlySchedule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecHourlySchedule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SnapshotPolicySpecHourlySchedule)(ptr) = obj
		} else {
			*(*SnapshotPolicySpecHourlySchedule)(ptr) = SnapshotPolicySpecHourlySchedule{}
		}
	default:
		iter.ReportError("decode SnapshotPolicySpecHourlySchedule", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SnapshotPolicySpecMonthlyScheduleCodec struct {
}

func (SnapshotPolicySpecMonthlyScheduleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SnapshotPolicySpecMonthlySchedule)(ptr) == nil
}

func (SnapshotPolicySpecMonthlyScheduleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SnapshotPolicySpecMonthlySchedule)(ptr)
	var objs []SnapshotPolicySpecMonthlySchedule
	if obj != nil {
		objs = []SnapshotPolicySpecMonthlySchedule{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecMonthlySchedule{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SnapshotPolicySpecMonthlyScheduleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SnapshotPolicySpecMonthlySchedule)(ptr) = SnapshotPolicySpecMonthlySchedule{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SnapshotPolicySpecMonthlySchedule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecMonthlySchedule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SnapshotPolicySpecMonthlySchedule)(ptr) = objs[0]
			} else {
				*(*SnapshotPolicySpecMonthlySchedule)(ptr) = SnapshotPolicySpecMonthlySchedule{}
			}
		} else {
			*(*SnapshotPolicySpecMonthlySchedule)(ptr) = SnapshotPolicySpecMonthlySchedule{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SnapshotPolicySpecMonthlySchedule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecMonthlySchedule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SnapshotPolicySpecMonthlySchedule)(ptr) = obj
		} else {
			*(*SnapshotPolicySpecMonthlySchedule)(ptr) = SnapshotPolicySpecMonthlySchedule{}
		}
	default:
		iter.ReportError("decode SnapshotPolicySpecMonthlySchedule", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SnapshotPolicySpecWeeklyScheduleCodec struct {
}

func (SnapshotPolicySpecWeeklyScheduleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SnapshotPolicySpecWeeklySchedule)(ptr) == nil
}

func (SnapshotPolicySpecWeeklyScheduleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SnapshotPolicySpecWeeklySchedule)(ptr)
	var objs []SnapshotPolicySpecWeeklySchedule
	if obj != nil {
		objs = []SnapshotPolicySpecWeeklySchedule{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecWeeklySchedule{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SnapshotPolicySpecWeeklyScheduleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SnapshotPolicySpecWeeklySchedule)(ptr) = SnapshotPolicySpecWeeklySchedule{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SnapshotPolicySpecWeeklySchedule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecWeeklySchedule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SnapshotPolicySpecWeeklySchedule)(ptr) = objs[0]
			} else {
				*(*SnapshotPolicySpecWeeklySchedule)(ptr) = SnapshotPolicySpecWeeklySchedule{}
			}
		} else {
			*(*SnapshotPolicySpecWeeklySchedule)(ptr) = SnapshotPolicySpecWeeklySchedule{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj SnapshotPolicySpecWeeklySchedule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SnapshotPolicySpecWeeklySchedule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*SnapshotPolicySpecWeeklySchedule)(ptr) = obj
		} else {
			*(*SnapshotPolicySpecWeeklySchedule)(ptr) = SnapshotPolicySpecWeeklySchedule{}
		}
	default:
		iter.ReportError("decode SnapshotPolicySpecWeeklySchedule", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type VolumeSpecDataProtectionReplicationCodec struct {
}

func (VolumeSpecDataProtectionReplicationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*VolumeSpecDataProtectionReplication)(ptr) == nil
}

func (VolumeSpecDataProtectionReplicationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*VolumeSpecDataProtectionReplication)(ptr)
	var objs []VolumeSpecDataProtectionReplication
	if obj != nil {
		objs = []VolumeSpecDataProtectionReplication{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(VolumeSpecDataProtectionReplication{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (VolumeSpecDataProtectionReplicationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*VolumeSpecDataProtectionReplication)(ptr) = VolumeSpecDataProtectionReplication{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []VolumeSpecDataProtectionReplication

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(VolumeSpecDataProtectionReplication{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*VolumeSpecDataProtectionReplication)(ptr) = objs[0]
			} else {
				*(*VolumeSpecDataProtectionReplication)(ptr) = VolumeSpecDataProtectionReplication{}
			}
		} else {
			*(*VolumeSpecDataProtectionReplication)(ptr) = VolumeSpecDataProtectionReplication{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj VolumeSpecDataProtectionReplication

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(VolumeSpecDataProtectionReplication{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*VolumeSpecDataProtectionReplication)(ptr) = obj
		} else {
			*(*VolumeSpecDataProtectionReplication)(ptr) = VolumeSpecDataProtectionReplication{}
		}
	default:
		iter.ReportError("decode VolumeSpecDataProtectionReplication", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type VolumeSpecDataProtectionSnapshotPolicyCodec struct {
}

func (VolumeSpecDataProtectionSnapshotPolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*VolumeSpecDataProtectionSnapshotPolicy)(ptr) == nil
}

func (VolumeSpecDataProtectionSnapshotPolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*VolumeSpecDataProtectionSnapshotPolicy)(ptr)
	var objs []VolumeSpecDataProtectionSnapshotPolicy
	if obj != nil {
		objs = []VolumeSpecDataProtectionSnapshotPolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(VolumeSpecDataProtectionSnapshotPolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (VolumeSpecDataProtectionSnapshotPolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*VolumeSpecDataProtectionSnapshotPolicy)(ptr) = VolumeSpecDataProtectionSnapshotPolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []VolumeSpecDataProtectionSnapshotPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(VolumeSpecDataProtectionSnapshotPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*VolumeSpecDataProtectionSnapshotPolicy)(ptr) = objs[0]
			} else {
				*(*VolumeSpecDataProtectionSnapshotPolicy)(ptr) = VolumeSpecDataProtectionSnapshotPolicy{}
			}
		} else {
			*(*VolumeSpecDataProtectionSnapshotPolicy)(ptr) = VolumeSpecDataProtectionSnapshotPolicy{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj VolumeSpecDataProtectionSnapshotPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(VolumeSpecDataProtectionSnapshotPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*VolumeSpecDataProtectionSnapshotPolicy)(ptr) = obj
		} else {
			*(*VolumeSpecDataProtectionSnapshotPolicy)(ptr) = VolumeSpecDataProtectionSnapshotPolicy{}
		}
	default:
		iter.ReportError("decode VolumeSpecDataProtectionSnapshotPolicy", "unexpected JSON type")
	}
}
