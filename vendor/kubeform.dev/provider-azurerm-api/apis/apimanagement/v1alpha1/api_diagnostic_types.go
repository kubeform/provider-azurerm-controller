/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ApiDiagnostic struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiDiagnosticSpec   `json:"spec,omitempty"`
	Status            ApiDiagnosticStatus `json:"status,omitempty"`
}

type ApiDiagnosticSpecBackendRequestDataMaskingHeaders struct {
	Mode  *string `json:"mode" tf:"mode"`
	Value *string `json:"value" tf:"value"`
}

type ApiDiagnosticSpecBackendRequestDataMaskingQueryParams struct {
	Mode  *string `json:"mode" tf:"mode"`
	Value *string `json:"value" tf:"value"`
}

type ApiDiagnosticSpecBackendRequestDataMasking struct {
	// +optional
	Headers []ApiDiagnosticSpecBackendRequestDataMaskingHeaders `json:"headers,omitempty" tf:"headers"`
	// +optional
	QueryParams []ApiDiagnosticSpecBackendRequestDataMaskingQueryParams `json:"queryParams,omitempty" tf:"query_params"`
}

type ApiDiagnosticSpecBackendRequest struct {
	// +optional
	BodyBytes *int64 `json:"bodyBytes,omitempty" tf:"body_bytes"`
	// +optional
	DataMasking *ApiDiagnosticSpecBackendRequestDataMasking `json:"dataMasking,omitempty" tf:"data_masking"`
	// +optional
	HeadersToLog []string `json:"headersToLog,omitempty" tf:"headers_to_log"`
}

type ApiDiagnosticSpecBackendResponseDataMaskingHeaders struct {
	Mode  *string `json:"mode" tf:"mode"`
	Value *string `json:"value" tf:"value"`
}

type ApiDiagnosticSpecBackendResponseDataMaskingQueryParams struct {
	Mode  *string `json:"mode" tf:"mode"`
	Value *string `json:"value" tf:"value"`
}

type ApiDiagnosticSpecBackendResponseDataMasking struct {
	// +optional
	Headers []ApiDiagnosticSpecBackendResponseDataMaskingHeaders `json:"headers,omitempty" tf:"headers"`
	// +optional
	QueryParams []ApiDiagnosticSpecBackendResponseDataMaskingQueryParams `json:"queryParams,omitempty" tf:"query_params"`
}

type ApiDiagnosticSpecBackendResponse struct {
	// +optional
	BodyBytes *int64 `json:"bodyBytes,omitempty" tf:"body_bytes"`
	// +optional
	DataMasking *ApiDiagnosticSpecBackendResponseDataMasking `json:"dataMasking,omitempty" tf:"data_masking"`
	// +optional
	HeadersToLog []string `json:"headersToLog,omitempty" tf:"headers_to_log"`
}

type ApiDiagnosticSpecFrontendRequestDataMaskingHeaders struct {
	Mode  *string `json:"mode" tf:"mode"`
	Value *string `json:"value" tf:"value"`
}

type ApiDiagnosticSpecFrontendRequestDataMaskingQueryParams struct {
	Mode  *string `json:"mode" tf:"mode"`
	Value *string `json:"value" tf:"value"`
}

type ApiDiagnosticSpecFrontendRequestDataMasking struct {
	// +optional
	Headers []ApiDiagnosticSpecFrontendRequestDataMaskingHeaders `json:"headers,omitempty" tf:"headers"`
	// +optional
	QueryParams []ApiDiagnosticSpecFrontendRequestDataMaskingQueryParams `json:"queryParams,omitempty" tf:"query_params"`
}

type ApiDiagnosticSpecFrontendRequest struct {
	// +optional
	BodyBytes *int64 `json:"bodyBytes,omitempty" tf:"body_bytes"`
	// +optional
	DataMasking *ApiDiagnosticSpecFrontendRequestDataMasking `json:"dataMasking,omitempty" tf:"data_masking"`
	// +optional
	HeadersToLog []string `json:"headersToLog,omitempty" tf:"headers_to_log"`
}

type ApiDiagnosticSpecFrontendResponseDataMaskingHeaders struct {
	Mode  *string `json:"mode" tf:"mode"`
	Value *string `json:"value" tf:"value"`
}

type ApiDiagnosticSpecFrontendResponseDataMaskingQueryParams struct {
	Mode  *string `json:"mode" tf:"mode"`
	Value *string `json:"value" tf:"value"`
}

type ApiDiagnosticSpecFrontendResponseDataMasking struct {
	// +optional
	Headers []ApiDiagnosticSpecFrontendResponseDataMaskingHeaders `json:"headers,omitempty" tf:"headers"`
	// +optional
	QueryParams []ApiDiagnosticSpecFrontendResponseDataMaskingQueryParams `json:"queryParams,omitempty" tf:"query_params"`
}

type ApiDiagnosticSpecFrontendResponse struct {
	// +optional
	BodyBytes *int64 `json:"bodyBytes,omitempty" tf:"body_bytes"`
	// +optional
	DataMasking *ApiDiagnosticSpecFrontendResponseDataMasking `json:"dataMasking,omitempty" tf:"data_masking"`
	// +optional
	HeadersToLog []string `json:"headersToLog,omitempty" tf:"headers_to_log"`
}

type ApiDiagnosticSpec struct {
	State *ApiDiagnosticSpecResource `json:"state,omitempty" tf:"-"`

	Resource ApiDiagnosticSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ApiDiagnosticSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AlwaysLogErrors       *bool   `json:"alwaysLogErrors,omitempty" tf:"always_log_errors"`
	ApiManagementLoggerID *string `json:"apiManagementLoggerID" tf:"api_management_logger_id"`
	ApiManagementName     *string `json:"apiManagementName" tf:"api_management_name"`
	ApiName               *string `json:"apiName" tf:"api_name"`
	// +optional
	BackendRequest *ApiDiagnosticSpecBackendRequest `json:"backendRequest,omitempty" tf:"backend_request"`
	// +optional
	BackendResponse *ApiDiagnosticSpecBackendResponse `json:"backendResponse,omitempty" tf:"backend_response"`
	// +optional
	FrontendRequest *ApiDiagnosticSpecFrontendRequest `json:"frontendRequest,omitempty" tf:"frontend_request"`
	// +optional
	FrontendResponse *ApiDiagnosticSpecFrontendResponse `json:"frontendResponse,omitempty" tf:"frontend_response"`
	// +optional
	HttpCorrelationProtocol *string `json:"httpCorrelationProtocol,omitempty" tf:"http_correlation_protocol"`
	Identifier              *string `json:"identifier" tf:"identifier"`
	// +optional
	LogClientIP *bool `json:"logClientIP,omitempty" tf:"log_client_ip"`
	// +optional
	OperationNameFormat *string `json:"operationNameFormat,omitempty" tf:"operation_name_format"`
	ResourceGroupName   *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	SamplingPercentage *float64 `json:"samplingPercentage,omitempty" tf:"sampling_percentage"`
	// +optional
	Verbosity *string `json:"verbosity,omitempty" tf:"verbosity"`
}

type ApiDiagnosticStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ApiDiagnosticList is a list of ApiDiagnostics
type ApiDiagnosticList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ApiDiagnostic CRD objects
	Items []ApiDiagnostic `json:"items,omitempty"`
}
