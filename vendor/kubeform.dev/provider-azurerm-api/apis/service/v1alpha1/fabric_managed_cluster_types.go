/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type FabricManagedCluster struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FabricManagedClusterSpec   `json:"spec,omitempty"`
	Status            FabricManagedClusterStatus `json:"status,omitempty"`
}

type FabricManagedClusterSpecAuthenticationActiveDirectory struct {
	ClientApplicationID  *string `json:"clientApplicationID" tf:"client_application_id"`
	ClusterApplicationID *string `json:"clusterApplicationID" tf:"cluster_application_id"`
	TenantID             *string `json:"tenantID" tf:"tenant_id"`
}

type FabricManagedClusterSpecAuthenticationCertificate struct {
	// +optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name"`
	Thumbprint *string `json:"thumbprint" tf:"thumbprint"`
	Type       *string `json:"type" tf:"type"`
}

type FabricManagedClusterSpecAuthentication struct {
	// +optional
	ActiveDirectory *FabricManagedClusterSpecAuthenticationActiveDirectory `json:"activeDirectory,omitempty" tf:"active_directory"`
	// +optional
	Certificate []FabricManagedClusterSpecAuthenticationCertificate `json:"certificate,omitempty" tf:"certificate"`
}

type FabricManagedClusterSpecCustomFabricSetting struct {
	Parameter *string `json:"parameter" tf:"parameter"`
	Section   *string `json:"section" tf:"section"`
	Value     *string `json:"value" tf:"value"`
}

type FabricManagedClusterSpecLbRule struct {
	BackendPort   *int64  `json:"backendPort" tf:"backend_port"`
	FrontendPort  *int64  `json:"frontendPort" tf:"frontend_port"`
	ProbeProtocol *string `json:"probeProtocol" tf:"probe_protocol"`
	// +optional
	ProbeRequestPath *string `json:"probeRequestPath,omitempty" tf:"probe_request_path"`
	Protocol         *string `json:"protocol" tf:"protocol"`
}

type FabricManagedClusterSpecNodeTypeVmSecretsCertificates struct {
	Store *string `json:"store" tf:"store"`
	Url   *string `json:"url" tf:"url"`
}

type FabricManagedClusterSpecNodeTypeVmSecrets struct {
	Certificates []FabricManagedClusterSpecNodeTypeVmSecretsCertificates `json:"certificates" tf:"certificates"`
	VaultID      *string                                                 `json:"vaultID" tf:"vault_id"`
}

type FabricManagedClusterSpecNodeType struct {
	ApplicationPortRange *string `json:"applicationPortRange" tf:"application_port_range"`
	// +optional
	Capacities     *map[string]string `json:"capacities,omitempty" tf:"capacities"`
	DataDiskSizeGb *int64             `json:"dataDiskSizeGb" tf:"data_disk_size_gb"`
	// +optional
	DataDiskType       *string `json:"dataDiskType,omitempty" tf:"data_disk_type"`
	EphemeralPortRange *string `json:"ephemeralPortRange" tf:"ephemeral_port_range"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	MultiplePlacementGroupsEnabled *bool   `json:"multiplePlacementGroupsEnabled,omitempty" tf:"multiple_placement_groups_enabled"`
	Name                           *string `json:"name" tf:"name"`
	// +optional
	PlacementProperties *map[string]string `json:"placementProperties,omitempty" tf:"placement_properties"`
	// +optional
	Primary *bool `json:"primary,omitempty" tf:"primary"`
	// +optional
	Stateless        *bool   `json:"stateless,omitempty" tf:"stateless"`
	VmImageOffer     *string `json:"vmImageOffer" tf:"vm_image_offer"`
	VmImagePublisher *string `json:"vmImagePublisher" tf:"vm_image_publisher"`
	VmImageSku       *string `json:"vmImageSku" tf:"vm_image_sku"`
	VmImageVersion   *string `json:"vmImageVersion" tf:"vm_image_version"`
	VmInstanceCount  *int64  `json:"vmInstanceCount" tf:"vm_instance_count"`
	// +optional
	VmSecrets []FabricManagedClusterSpecNodeTypeVmSecrets `json:"vmSecrets,omitempty" tf:"vm_secrets"`
	VmSize    *string                                     `json:"vmSize" tf:"vm_size"`
}

type FabricManagedClusterSpec struct {
	State *FabricManagedClusterSpecResource `json:"state,omitempty" tf:"-"`

	Resource FabricManagedClusterSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type FabricManagedClusterSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Authentication *FabricManagedClusterSpecAuthentication `json:"authentication,omitempty" tf:"authentication"`
	// +optional
	BackupServiceEnabled *bool  `json:"backupServiceEnabled,omitempty" tf:"backup_service_enabled"`
	ClientConnectionPort *int64 `json:"clientConnectionPort" tf:"client_connection_port"`
	// +optional
	CustomFabricSetting []FabricManagedClusterSpecCustomFabricSetting `json:"customFabricSetting,omitempty" tf:"custom_fabric_setting"`
	// +optional
	DnsName *string `json:"dnsName,omitempty" tf:"dns_name"`
	// +optional
	DnsServiceEnabled *bool                            `json:"dnsServiceEnabled,omitempty" tf:"dns_service_enabled"`
	HttpGatewayPort   *int64                           `json:"httpGatewayPort" tf:"http_gateway_port"`
	LbRule            []FabricManagedClusterSpecLbRule `json:"lbRule" tf:"lb_rule"`
	Location          *string                          `json:"location" tf:"location"`
	Name              *string                          `json:"name" tf:"name"`
	// +optional
	NodeType []FabricManagedClusterSpecNodeType `json:"nodeType,omitempty" tf:"node_type"`
	// +optional
	Password          *string `json:"password,omitempty" tf:"password"`
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	Sku *string `json:"sku,omitempty" tf:"sku"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	UpgradeWave *string `json:"upgradeWave,omitempty" tf:"upgrade_wave"`
	// +optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type FabricManagedClusterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// FabricManagedClusterList is a list of FabricManagedClusters
type FabricManagedClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of FabricManagedCluster CRD objects
	Items []FabricManagedCluster `json:"items,omitempty"`
}
