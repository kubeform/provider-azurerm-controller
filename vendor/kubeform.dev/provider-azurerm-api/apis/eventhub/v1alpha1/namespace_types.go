/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Namespace struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespaceSpec   `json:"spec,omitempty"`
	Status            NamespaceStatus `json:"status,omitempty"`
}

type NamespaceSpecIdentity struct {
	// +optional
	PrincipalID *string `json:"principalID,omitempty" tf:"principal_id"`
	// +optional
	TenantID *string `json:"tenantID,omitempty" tf:"tenant_id"`
	Type     *string `json:"type" tf:"type"`
}

type NamespaceSpecNetworkRulesetsIpRule struct {
	// +optional
	Action *string `json:"action,omitempty" tf:"action"`
	IpMask *string `json:"ipMask" tf:"ip_mask"`
}

type NamespaceSpecNetworkRulesetsVirtualNetworkRule struct {
	// +optional
	IgnoreMissingVirtualNetworkServiceEndpoint *bool   `json:"ignoreMissingVirtualNetworkServiceEndpoint,omitempty" tf:"ignore_missing_virtual_network_service_endpoint"`
	SubnetID                                   *string `json:"subnetID" tf:"subnet_id"`
}

type NamespaceSpecNetworkRulesets struct {
	DefaultAction *string `json:"defaultAction" tf:"default_action"`
	// +optional
	// +kubebuilder:validation:MaxItems=128
	IpRule []NamespaceSpecNetworkRulesetsIpRule `json:"ipRule,omitempty" tf:"ip_rule"`
	// +optional
	TrustedServiceAccessEnabled *bool `json:"trustedServiceAccessEnabled,omitempty" tf:"trusted_service_access_enabled"`
	// +optional
	// +kubebuilder:validation:MaxItems=128
	VirtualNetworkRule []NamespaceSpecNetworkRulesetsVirtualNetworkRule `json:"virtualNetworkRule,omitempty" tf:"virtual_network_rule"`
}

type NamespaceSpec struct {
	State *NamespaceSpecResource `json:"state,omitempty" tf:"-"`

	Resource NamespaceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type NamespaceSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AutoInflateEnabled *bool `json:"autoInflateEnabled,omitempty" tf:"auto_inflate_enabled"`
	// +optional
	Capacity *int64 `json:"capacity,omitempty" tf:"capacity"`
	// +optional
	DedicatedClusterID *string `json:"dedicatedClusterID,omitempty" tf:"dedicated_cluster_id"`
	// +optional
	DefaultPrimaryConnectionString *string `json:"-" sensitive:"true" tf:"default_primary_connection_string"`
	// +optional
	DefaultPrimaryConnectionStringAlias *string `json:"-" sensitive:"true" tf:"default_primary_connection_string_alias"`
	// +optional
	DefaultPrimaryKey *string `json:"-" sensitive:"true" tf:"default_primary_key"`
	// +optional
	DefaultSecondaryConnectionString *string `json:"-" sensitive:"true" tf:"default_secondary_connection_string"`
	// +optional
	DefaultSecondaryConnectionStringAlias *string `json:"-" sensitive:"true" tf:"default_secondary_connection_string_alias"`
	// +optional
	DefaultSecondaryKey *string `json:"-" sensitive:"true" tf:"default_secondary_key"`
	// +optional
	Identity *NamespaceSpecIdentity `json:"identity,omitempty" tf:"identity"`
	Location *string                `json:"location" tf:"location"`
	// +optional
	MaximumThroughputUnits *int64  `json:"maximumThroughputUnits,omitempty" tf:"maximum_throughput_units"`
	Name                   *string `json:"name" tf:"name"`
	// +optional
	NetworkRulesets   *NamespaceSpecNetworkRulesets `json:"networkRulesets,omitempty" tf:"network_rulesets"`
	ResourceGroupName *string                       `json:"resourceGroupName" tf:"resource_group_name"`
	Sku               *string                       `json:"sku" tf:"sku"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant"`
}

type NamespaceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NamespaceList is a list of Namespaces
type NamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Namespace CRD objects
	Items []Namespace `json:"items,omitempty"`
}
