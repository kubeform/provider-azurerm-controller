/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Policy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicySpec   `json:"spec,omitempty"`
	Status            PolicyStatus `json:"status,omitempty"`
}

type PolicySpecDns struct {
	// +optional
	// Deprecated
	NetworkRuleFqdnEnabled *bool `json:"networkRuleFqdnEnabled,omitempty" tf:"network_rule_fqdn_enabled"`
	// +optional
	ProxyEnabled *bool `json:"proxyEnabled,omitempty" tf:"proxy_enabled"`
	// +optional
	Servers []string `json:"servers,omitempty" tf:"servers"`
}

type PolicySpecIdentity struct {
	// +optional
	PrincipalID *string `json:"principalID,omitempty" tf:"principal_id"`
	// +optional
	TenantID *string `json:"tenantID,omitempty" tf:"tenant_id"`
	Type     *string `json:"type" tf:"type"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	UserAssignedIdentityIDS []string `json:"userAssignedIdentityIDS,omitempty" tf:"user_assigned_identity_ids"`
}

type PolicySpecInsightsLogAnalyticsWorkspace struct {
	FirewallLocation *string `json:"firewallLocation" tf:"firewall_location"`
	ID               *string `json:"ID" tf:"id"`
}

type PolicySpecInsights struct {
	DefaultLogAnalyticsWorkspaceID *string `json:"defaultLogAnalyticsWorkspaceID" tf:"default_log_analytics_workspace_id"`
	Enabled                        *bool   `json:"enabled" tf:"enabled"`
	// +optional
	LogAnalyticsWorkspace []PolicySpecInsightsLogAnalyticsWorkspace `json:"logAnalyticsWorkspace,omitempty" tf:"log_analytics_workspace"`
	// +optional
	RetentionInDays *int64 `json:"retentionInDays,omitempty" tf:"retention_in_days"`
}

type PolicySpecIntrusionDetectionSignatureOverrides struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
}

type PolicySpecIntrusionDetectionTrafficBypass struct {
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DestinationAddresses []string `json:"destinationAddresses,omitempty" tf:"destination_addresses"`
	// +optional
	DestinationIPGroups []string `json:"destinationIPGroups,omitempty" tf:"destination_ip_groups"`
	// +optional
	DestinationPorts []string `json:"destinationPorts,omitempty" tf:"destination_ports"`
	Name             *string  `json:"name" tf:"name"`
	Protocol         *string  `json:"protocol" tf:"protocol"`
	// +optional
	SourceAddresses []string `json:"sourceAddresses,omitempty" tf:"source_addresses"`
	// +optional
	SourceIPGroups []string `json:"sourceIPGroups,omitempty" tf:"source_ip_groups"`
}

type PolicySpecIntrusionDetection struct {
	// +optional
	Mode *string `json:"mode,omitempty" tf:"mode"`
	// +optional
	SignatureOverrides []PolicySpecIntrusionDetectionSignatureOverrides `json:"signatureOverrides,omitempty" tf:"signature_overrides"`
	// +optional
	TrafficBypass []PolicySpecIntrusionDetectionTrafficBypass `json:"trafficBypass,omitempty" tf:"traffic_bypass"`
}

type PolicySpecThreatIntelligenceAllowlist struct {
	// +optional
	Fqdns []string `json:"fqdns,omitempty" tf:"fqdns"`
	// +optional
	IpAddresses []string `json:"ipAddresses,omitempty" tf:"ip_addresses"`
}

type PolicySpecTlsCertificate struct {
	KeyVaultSecretID *string `json:"keyVaultSecretID" tf:"key_vault_secret_id"`
	Name             *string `json:"name" tf:"name"`
}

type PolicySpec struct {
	State *PolicySpecResource `json:"state,omitempty" tf:"-"`

	Resource PolicySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type PolicySpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	BasePolicyID *string `json:"basePolicyID,omitempty" tf:"base_policy_id"`
	// +optional
	ChildPolicies []string `json:"childPolicies,omitempty" tf:"child_policies"`
	// +optional
	Dns *PolicySpecDns `json:"dns,omitempty" tf:"dns"`
	// +optional
	Firewalls []string `json:"firewalls,omitempty" tf:"firewalls"`
	// +optional
	Identity *PolicySpecIdentity `json:"identity,omitempty" tf:"identity"`
	// +optional
	Insights *PolicySpecInsights `json:"insights,omitempty" tf:"insights"`
	// +optional
	IntrusionDetection *PolicySpecIntrusionDetection `json:"intrusionDetection,omitempty" tf:"intrusion_detection"`
	Location           *string                       `json:"location" tf:"location"`
	Name               *string                       `json:"name" tf:"name"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	PrivateIPRanges   []string `json:"privateIPRanges,omitempty" tf:"private_ip_ranges"`
	ResourceGroupName *string  `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	RuleCollectionGroups []string `json:"ruleCollectionGroups,omitempty" tf:"rule_collection_groups"`
	// +optional
	Sku *string `json:"sku,omitempty" tf:"sku"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	ThreatIntelligenceAllowlist *PolicySpecThreatIntelligenceAllowlist `json:"threatIntelligenceAllowlist,omitempty" tf:"threat_intelligence_allowlist"`
	// +optional
	ThreatIntelligenceMode *string `json:"threatIntelligenceMode,omitempty" tf:"threat_intelligence_mode"`
	// +optional
	TlsCertificate *PolicySpecTlsCertificate `json:"tlsCertificate,omitempty" tf:"tls_certificate"`
}

type PolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PolicyList is a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Policy CRD objects
	Items []Policy `json:"items,omitempty"`
}
