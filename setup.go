/*
Copyright AppsCode Inc. and Contributors

Licensed under the AppsCode Free Trial License 1.0.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://github.com/appscode/licenses/raw/1.0.0/AppsCode-Free-Trial-1.0.0.md

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package main

import (
	"context"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/gobuffalo/flect"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm"
	auditlib "go.bytebuilders.dev/audit/lib"
	arv1 "k8s.io/api/admissionregistration/v1"
	"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
	informers "k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	admissionregistrationv1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1"
	"k8s.io/client-go/tools/cache"
	"k8s.io/klog/v2"
	advancedv1alpha1 "kubeform.dev/provider-azurerm-api/apis/advanced/v1alpha1"
	analysisv1alpha1 "kubeform.dev/provider-azurerm-api/apis/analysis/v1alpha1"
	apimanagementv1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"
	appv1alpha1 "kubeform.dev/provider-azurerm-api/apis/app/v1alpha1"
	applicationv1alpha1 "kubeform.dev/provider-azurerm-api/apis/application/v1alpha1"
	attestationv1alpha1 "kubeform.dev/provider-azurerm-api/apis/attestation/v1alpha1"
	automationv1alpha1 "kubeform.dev/provider-azurerm-api/apis/automation/v1alpha1"
	availabilityv1alpha1 "kubeform.dev/provider-azurerm-api/apis/availability/v1alpha1"
	backupv1alpha1 "kubeform.dev/provider-azurerm-api/apis/backup/v1alpha1"
	bastionv1alpha1 "kubeform.dev/provider-azurerm-api/apis/bastion/v1alpha1"
	batchv1alpha1 "kubeform.dev/provider-azurerm-api/apis/batch/v1alpha1"
	blueprintv1alpha1 "kubeform.dev/provider-azurerm-api/apis/blueprint/v1alpha1"
	botv1alpha1 "kubeform.dev/provider-azurerm-api/apis/bot/v1alpha1"
	cdnv1alpha1 "kubeform.dev/provider-azurerm-api/apis/cdn/v1alpha1"
	cognitivev1alpha1 "kubeform.dev/provider-azurerm-api/apis/cognitive/v1alpha1"
	communicationv1alpha1 "kubeform.dev/provider-azurerm-api/apis/communication/v1alpha1"
	consumptionv1alpha1 "kubeform.dev/provider-azurerm-api/apis/consumption/v1alpha1"
	containerv1alpha1 "kubeform.dev/provider-azurerm-api/apis/container/v1alpha1"
	cosmosdbv1alpha1 "kubeform.dev/provider-azurerm-api/apis/cosmosdb/v1alpha1"
	costv1alpha1 "kubeform.dev/provider-azurerm-api/apis/cost/v1alpha1"
	customv1alpha1 "kubeform.dev/provider-azurerm-api/apis/custom/v1alpha1"
	dashboardv1alpha1 "kubeform.dev/provider-azurerm-api/apis/dashboard/v1alpha1"
	datav1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"
	databasev1alpha1 "kubeform.dev/provider-azurerm-api/apis/database/v1alpha1"
	databoxv1alpha1 "kubeform.dev/provider-azurerm-api/apis/databox/v1alpha1"
	databricksv1alpha1 "kubeform.dev/provider-azurerm-api/apis/databricks/v1alpha1"
	dedicatedhardwarev1alpha1 "kubeform.dev/provider-azurerm-api/apis/dedicatedhardware/v1alpha1"
	dedicatedhostv1alpha1 "kubeform.dev/provider-azurerm-api/apis/dedicatedhost/v1alpha1"
	devspacev1alpha1 "kubeform.dev/provider-azurerm-api/apis/devspace/v1alpha1"
	devtestv1alpha1 "kubeform.dev/provider-azurerm-api/apis/devtest/v1alpha1"
	digitalv1alpha1 "kubeform.dev/provider-azurerm-api/apis/digital/v1alpha1"
	diskv1alpha1 "kubeform.dev/provider-azurerm-api/apis/disk/v1alpha1"
	dnsv1alpha1 "kubeform.dev/provider-azurerm-api/apis/dns/v1alpha1"
	eventgridv1alpha1 "kubeform.dev/provider-azurerm-api/apis/eventgrid/v1alpha1"
	eventhubv1alpha1 "kubeform.dev/provider-azurerm-api/apis/eventhub/v1alpha1"
	expressroutev1alpha1 "kubeform.dev/provider-azurerm-api/apis/expressroute/v1alpha1"
	firewallv1alpha1 "kubeform.dev/provider-azurerm-api/apis/firewall/v1alpha1"
	frontdoorv1alpha1 "kubeform.dev/provider-azurerm-api/apis/frontdoor/v1alpha1"
	functionv1alpha1 "kubeform.dev/provider-azurerm-api/apis/function/v1alpha1"
	hdinsightv1alpha1 "kubeform.dev/provider-azurerm-api/apis/hdinsight/v1alpha1"
	healthbotv1alpha1 "kubeform.dev/provider-azurerm-api/apis/healthbot/v1alpha1"
	healthcarev1alpha1 "kubeform.dev/provider-azurerm-api/apis/healthcare/v1alpha1"
	hpcv1alpha1 "kubeform.dev/provider-azurerm-api/apis/hpc/v1alpha1"
	imagev1alpha1 "kubeform.dev/provider-azurerm-api/apis/image/v1alpha1"
	integrationv1alpha1 "kubeform.dev/provider-azurerm-api/apis/integration/v1alpha1"
	iotcentralv1alpha1 "kubeform.dev/provider-azurerm-api/apis/iotcentral/v1alpha1"
	iothubv1alpha1 "kubeform.dev/provider-azurerm-api/apis/iothub/v1alpha1"
	iotsecurityv1alpha1 "kubeform.dev/provider-azurerm-api/apis/iotsecurity/v1alpha1"
	iottimev1alpha1 "kubeform.dev/provider-azurerm-api/apis/iottime/v1alpha1"
	ipv1alpha1 "kubeform.dev/provider-azurerm-api/apis/ip/v1alpha1"
	keyvaultv1alpha1 "kubeform.dev/provider-azurerm-api/apis/keyvault/v1alpha1"
	kubernetesclusterv1alpha1 "kubeform.dev/provider-azurerm-api/apis/kubernetescluster/v1alpha1"
	kustov1alpha1 "kubeform.dev/provider-azurerm-api/apis/kusto/v1alpha1"
	lbv1alpha1 "kubeform.dev/provider-azurerm-api/apis/lb/v1alpha1"
	lighthousev1alpha1 "kubeform.dev/provider-azurerm-api/apis/lighthouse/v1alpha1"
	linuxv1alpha1 "kubeform.dev/provider-azurerm-api/apis/linux/v1alpha1"
	localv1alpha1 "kubeform.dev/provider-azurerm-api/apis/local/v1alpha1"
	loganalyticsv1alpha1 "kubeform.dev/provider-azurerm-api/apis/loganalytics/v1alpha1"
	logicappv1alpha1 "kubeform.dev/provider-azurerm-api/apis/logicapp/v1alpha1"
	machinev1alpha1 "kubeform.dev/provider-azurerm-api/apis/machine/v1alpha1"
	maintenancev1alpha1 "kubeform.dev/provider-azurerm-api/apis/maintenance/v1alpha1"
	managedv1alpha1 "kubeform.dev/provider-azurerm-api/apis/managed/v1alpha1"
	managementv1alpha1 "kubeform.dev/provider-azurerm-api/apis/management/v1alpha1"
	mapsv1alpha1 "kubeform.dev/provider-azurerm-api/apis/maps/v1alpha1"
	mariadbv1alpha1 "kubeform.dev/provider-azurerm-api/apis/mariadb/v1alpha1"
	marketplacev1alpha1 "kubeform.dev/provider-azurerm-api/apis/marketplace/v1alpha1"
	mediav1alpha1 "kubeform.dev/provider-azurerm-api/apis/media/v1alpha1"
	monitorv1alpha1 "kubeform.dev/provider-azurerm-api/apis/monitor/v1alpha1"
	mssqlv1alpha1 "kubeform.dev/provider-azurerm-api/apis/mssql/v1alpha1"
	mysqlv1alpha1 "kubeform.dev/provider-azurerm-api/apis/mysql/v1alpha1"
	natv1alpha1 "kubeform.dev/provider-azurerm-api/apis/nat/v1alpha1"
	netappv1alpha1 "kubeform.dev/provider-azurerm-api/apis/netapp/v1alpha1"
	networkv1alpha1 "kubeform.dev/provider-azurerm-api/apis/network/v1alpha1"
	notificationhubv1alpha1 "kubeform.dev/provider-azurerm-api/apis/notificationhub/v1alpha1"
	orchestratedv1alpha1 "kubeform.dev/provider-azurerm-api/apis/orchestrated/v1alpha1"
	packetv1alpha1 "kubeform.dev/provider-azurerm-api/apis/packet/v1alpha1"
	pointv1alpha1 "kubeform.dev/provider-azurerm-api/apis/point/v1alpha1"
	policyv1alpha1 "kubeform.dev/provider-azurerm-api/apis/policy/v1alpha1"
	portalv1alpha1 "kubeform.dev/provider-azurerm-api/apis/portal/v1alpha1"
	postgresqlv1alpha1 "kubeform.dev/provider-azurerm-api/apis/postgresql/v1alpha1"
	powerbiv1alpha1 "kubeform.dev/provider-azurerm-api/apis/powerbi/v1alpha1"
	privatev1alpha1 "kubeform.dev/provider-azurerm-api/apis/private/v1alpha1"
	proximityv1alpha1 "kubeform.dev/provider-azurerm-api/apis/proximity/v1alpha1"
	publicipv1alpha1 "kubeform.dev/provider-azurerm-api/apis/publicip/v1alpha1"
	purviewv1alpha1 "kubeform.dev/provider-azurerm-api/apis/purview/v1alpha1"
	recoveryv1alpha1 "kubeform.dev/provider-azurerm-api/apis/recovery/v1alpha1"
	redisv1alpha1 "kubeform.dev/provider-azurerm-api/apis/redis/v1alpha1"
	relayv1alpha1 "kubeform.dev/provider-azurerm-api/apis/relay/v1alpha1"
	resourcev1alpha1 "kubeform.dev/provider-azurerm-api/apis/resource/v1alpha1"
	rolev1alpha1 "kubeform.dev/provider-azurerm-api/apis/role/v1alpha1"
	routev1alpha1 "kubeform.dev/provider-azurerm-api/apis/route/v1alpha1"
	searchv1alpha1 "kubeform.dev/provider-azurerm-api/apis/search/v1alpha1"
	securityv1alpha1 "kubeform.dev/provider-azurerm-api/apis/security/v1alpha1"
	sentinelv1alpha1 "kubeform.dev/provider-azurerm-api/apis/sentinel/v1alpha1"
	servicev1alpha1 "kubeform.dev/provider-azurerm-api/apis/service/v1alpha1"
	servicebusv1alpha1 "kubeform.dev/provider-azurerm-api/apis/servicebus/v1alpha1"
	sharedimagev1alpha1 "kubeform.dev/provider-azurerm-api/apis/sharedimage/v1alpha1"
	signalrv1alpha1 "kubeform.dev/provider-azurerm-api/apis/signalr/v1alpha1"
	siterecoveryv1alpha1 "kubeform.dev/provider-azurerm-api/apis/siterecovery/v1alpha1"
	snapshotv1alpha1 "kubeform.dev/provider-azurerm-api/apis/snapshot/v1alpha1"
	spatialv1alpha1 "kubeform.dev/provider-azurerm-api/apis/spatial/v1alpha1"
	springv1alpha1 "kubeform.dev/provider-azurerm-api/apis/spring/v1alpha1"
	sqlv1alpha1 "kubeform.dev/provider-azurerm-api/apis/sql/v1alpha1"
	sshv1alpha1 "kubeform.dev/provider-azurerm-api/apis/ssh/v1alpha1"
	stackv1alpha1 "kubeform.dev/provider-azurerm-api/apis/stack/v1alpha1"
	staticv1alpha1 "kubeform.dev/provider-azurerm-api/apis/static/v1alpha1"
	storagev1alpha1 "kubeform.dev/provider-azurerm-api/apis/storage/v1alpha1"
	streamv1alpha1 "kubeform.dev/provider-azurerm-api/apis/stream/v1alpha1"
	subnetv1alpha1 "kubeform.dev/provider-azurerm-api/apis/subnet/v1alpha1"
	subscriptionv1alpha1 "kubeform.dev/provider-azurerm-api/apis/subscription/v1alpha1"
	synapsev1alpha1 "kubeform.dev/provider-azurerm-api/apis/synapse/v1alpha1"
	templatev1alpha1 "kubeform.dev/provider-azurerm-api/apis/template/v1alpha1"
	tenantv1alpha1 "kubeform.dev/provider-azurerm-api/apis/tenant/v1alpha1"
	trafficmanagerv1alpha1 "kubeform.dev/provider-azurerm-api/apis/trafficmanager/v1alpha1"
	userv1alpha1 "kubeform.dev/provider-azurerm-api/apis/user/v1alpha1"
	virtualv1alpha1 "kubeform.dev/provider-azurerm-api/apis/virtual/v1alpha1"
	vmwarev1alpha1 "kubeform.dev/provider-azurerm-api/apis/vmware/v1alpha1"
	vpnv1alpha1 "kubeform.dev/provider-azurerm-api/apis/vpn/v1alpha1"
	webv1alpha1 "kubeform.dev/provider-azurerm-api/apis/web/v1alpha1"
	windowsv1alpha1 "kubeform.dev/provider-azurerm-api/apis/windows/v1alpha1"
	controllersadvanced "kubeform.dev/provider-azurerm-controller/controllers/advanced"
	controllersanalysis "kubeform.dev/provider-azurerm-controller/controllers/analysis"
	controllersapimanagement "kubeform.dev/provider-azurerm-controller/controllers/apimanagement"
	controllersapp "kubeform.dev/provider-azurerm-controller/controllers/app"
	controllersapplication "kubeform.dev/provider-azurerm-controller/controllers/application"
	controllersattestation "kubeform.dev/provider-azurerm-controller/controllers/attestation"
	controllersautomation "kubeform.dev/provider-azurerm-controller/controllers/automation"
	controllersavailability "kubeform.dev/provider-azurerm-controller/controllers/availability"
	controllersbackup "kubeform.dev/provider-azurerm-controller/controllers/backup"
	controllersbastion "kubeform.dev/provider-azurerm-controller/controllers/bastion"
	controllersbatch "kubeform.dev/provider-azurerm-controller/controllers/batch"
	controllersblueprint "kubeform.dev/provider-azurerm-controller/controllers/blueprint"
	controllersbot "kubeform.dev/provider-azurerm-controller/controllers/bot"
	controllerscdn "kubeform.dev/provider-azurerm-controller/controllers/cdn"
	controllerscognitive "kubeform.dev/provider-azurerm-controller/controllers/cognitive"
	controllerscommunication "kubeform.dev/provider-azurerm-controller/controllers/communication"
	controllersconsumption "kubeform.dev/provider-azurerm-controller/controllers/consumption"
	controllerscontainer "kubeform.dev/provider-azurerm-controller/controllers/container"
	controllerscosmosdb "kubeform.dev/provider-azurerm-controller/controllers/cosmosdb"
	controllerscost "kubeform.dev/provider-azurerm-controller/controllers/cost"
	controllerscustom "kubeform.dev/provider-azurerm-controller/controllers/custom"
	controllersdashboard "kubeform.dev/provider-azurerm-controller/controllers/dashboard"
	controllersdata "kubeform.dev/provider-azurerm-controller/controllers/data"
	controllersdatabase "kubeform.dev/provider-azurerm-controller/controllers/database"
	controllersdatabox "kubeform.dev/provider-azurerm-controller/controllers/databox"
	controllersdatabricks "kubeform.dev/provider-azurerm-controller/controllers/databricks"
	controllersdedicatedhardware "kubeform.dev/provider-azurerm-controller/controllers/dedicatedhardware"
	controllersdedicatedhost "kubeform.dev/provider-azurerm-controller/controllers/dedicatedhost"
	controllersdevspace "kubeform.dev/provider-azurerm-controller/controllers/devspace"
	controllersdevtest "kubeform.dev/provider-azurerm-controller/controllers/devtest"
	controllersdigital "kubeform.dev/provider-azurerm-controller/controllers/digital"
	controllersdisk "kubeform.dev/provider-azurerm-controller/controllers/disk"
	controllersdns "kubeform.dev/provider-azurerm-controller/controllers/dns"
	controllerseventgrid "kubeform.dev/provider-azurerm-controller/controllers/eventgrid"
	controllerseventhub "kubeform.dev/provider-azurerm-controller/controllers/eventhub"
	controllersexpressroute "kubeform.dev/provider-azurerm-controller/controllers/expressroute"
	controllersfirewall "kubeform.dev/provider-azurerm-controller/controllers/firewall"
	controllersfrontdoor "kubeform.dev/provider-azurerm-controller/controllers/frontdoor"
	controllersfunction "kubeform.dev/provider-azurerm-controller/controllers/function"
	controllershdinsight "kubeform.dev/provider-azurerm-controller/controllers/hdinsight"
	controllershealthbot "kubeform.dev/provider-azurerm-controller/controllers/healthbot"
	controllershealthcare "kubeform.dev/provider-azurerm-controller/controllers/healthcare"
	controllershpc "kubeform.dev/provider-azurerm-controller/controllers/hpc"
	controllersimage "kubeform.dev/provider-azurerm-controller/controllers/image"
	controllersintegration "kubeform.dev/provider-azurerm-controller/controllers/integration"
	controllersiotcentral "kubeform.dev/provider-azurerm-controller/controllers/iotcentral"
	controllersiothub "kubeform.dev/provider-azurerm-controller/controllers/iothub"
	controllersiotsecurity "kubeform.dev/provider-azurerm-controller/controllers/iotsecurity"
	controllersiottime "kubeform.dev/provider-azurerm-controller/controllers/iottime"
	controllersip "kubeform.dev/provider-azurerm-controller/controllers/ip"
	controllerskeyvault "kubeform.dev/provider-azurerm-controller/controllers/keyvault"
	controllerskubernetescluster "kubeform.dev/provider-azurerm-controller/controllers/kubernetescluster"
	controllerskusto "kubeform.dev/provider-azurerm-controller/controllers/kusto"
	controllerslb "kubeform.dev/provider-azurerm-controller/controllers/lb"
	controllerslighthouse "kubeform.dev/provider-azurerm-controller/controllers/lighthouse"
	controllerslinux "kubeform.dev/provider-azurerm-controller/controllers/linux"
	controllerslocal "kubeform.dev/provider-azurerm-controller/controllers/local"
	controllersloganalytics "kubeform.dev/provider-azurerm-controller/controllers/loganalytics"
	controllerslogicapp "kubeform.dev/provider-azurerm-controller/controllers/logicapp"
	controllersmachine "kubeform.dev/provider-azurerm-controller/controllers/machine"
	controllersmaintenance "kubeform.dev/provider-azurerm-controller/controllers/maintenance"
	controllersmanaged "kubeform.dev/provider-azurerm-controller/controllers/managed"
	controllersmanagement "kubeform.dev/provider-azurerm-controller/controllers/management"
	controllersmaps "kubeform.dev/provider-azurerm-controller/controllers/maps"
	controllersmariadb "kubeform.dev/provider-azurerm-controller/controllers/mariadb"
	controllersmarketplace "kubeform.dev/provider-azurerm-controller/controllers/marketplace"
	controllersmedia "kubeform.dev/provider-azurerm-controller/controllers/media"
	controllersmonitor "kubeform.dev/provider-azurerm-controller/controllers/monitor"
	controllersmssql "kubeform.dev/provider-azurerm-controller/controllers/mssql"
	controllersmysql "kubeform.dev/provider-azurerm-controller/controllers/mysql"
	controllersnat "kubeform.dev/provider-azurerm-controller/controllers/nat"
	controllersnetapp "kubeform.dev/provider-azurerm-controller/controllers/netapp"
	controllersnetwork "kubeform.dev/provider-azurerm-controller/controllers/network"
	controllersnotificationhub "kubeform.dev/provider-azurerm-controller/controllers/notificationhub"
	controllersorchestrated "kubeform.dev/provider-azurerm-controller/controllers/orchestrated"
	controllerspacket "kubeform.dev/provider-azurerm-controller/controllers/packet"
	controllerspoint "kubeform.dev/provider-azurerm-controller/controllers/point"
	controllerspolicy "kubeform.dev/provider-azurerm-controller/controllers/policy"
	controllersportal "kubeform.dev/provider-azurerm-controller/controllers/portal"
	controllerspostgresql "kubeform.dev/provider-azurerm-controller/controllers/postgresql"
	controllerspowerbi "kubeform.dev/provider-azurerm-controller/controllers/powerbi"
	controllersprivate "kubeform.dev/provider-azurerm-controller/controllers/private"
	controllersproximity "kubeform.dev/provider-azurerm-controller/controllers/proximity"
	controllerspublicip "kubeform.dev/provider-azurerm-controller/controllers/publicip"
	controllerspurview "kubeform.dev/provider-azurerm-controller/controllers/purview"
	controllersrecovery "kubeform.dev/provider-azurerm-controller/controllers/recovery"
	controllersredis "kubeform.dev/provider-azurerm-controller/controllers/redis"
	controllersrelay "kubeform.dev/provider-azurerm-controller/controllers/relay"
	controllersresource "kubeform.dev/provider-azurerm-controller/controllers/resource"
	controllersrole "kubeform.dev/provider-azurerm-controller/controllers/role"
	controllersroute "kubeform.dev/provider-azurerm-controller/controllers/route"
	controllerssearch "kubeform.dev/provider-azurerm-controller/controllers/search"
	controllerssecurity "kubeform.dev/provider-azurerm-controller/controllers/security"
	controllerssentinel "kubeform.dev/provider-azurerm-controller/controllers/sentinel"
	controllersservice "kubeform.dev/provider-azurerm-controller/controllers/service"
	controllersservicebus "kubeform.dev/provider-azurerm-controller/controllers/servicebus"
	controllerssharedimage "kubeform.dev/provider-azurerm-controller/controllers/sharedimage"
	controllerssignalr "kubeform.dev/provider-azurerm-controller/controllers/signalr"
	controllerssiterecovery "kubeform.dev/provider-azurerm-controller/controllers/siterecovery"
	controllerssnapshot "kubeform.dev/provider-azurerm-controller/controllers/snapshot"
	controllersspatial "kubeform.dev/provider-azurerm-controller/controllers/spatial"
	controllersspring "kubeform.dev/provider-azurerm-controller/controllers/spring"
	controllerssql "kubeform.dev/provider-azurerm-controller/controllers/sql"
	controllersssh "kubeform.dev/provider-azurerm-controller/controllers/ssh"
	controllersstack "kubeform.dev/provider-azurerm-controller/controllers/stack"
	controllersstatic "kubeform.dev/provider-azurerm-controller/controllers/static"
	controllersstorage "kubeform.dev/provider-azurerm-controller/controllers/storage"
	controllersstream "kubeform.dev/provider-azurerm-controller/controllers/stream"
	controllerssubnet "kubeform.dev/provider-azurerm-controller/controllers/subnet"
	controllerssubscription "kubeform.dev/provider-azurerm-controller/controllers/subscription"
	controllerssynapse "kubeform.dev/provider-azurerm-controller/controllers/synapse"
	controllerstemplate "kubeform.dev/provider-azurerm-controller/controllers/template"
	controllerstenant "kubeform.dev/provider-azurerm-controller/controllers/tenant"
	controllerstrafficmanager "kubeform.dev/provider-azurerm-controller/controllers/trafficmanager"
	controllersuser "kubeform.dev/provider-azurerm-controller/controllers/user"
	controllersvirtual "kubeform.dev/provider-azurerm-controller/controllers/virtual"
	controllersvmware "kubeform.dev/provider-azurerm-controller/controllers/vmware"
	controllersvpn "kubeform.dev/provider-azurerm-controller/controllers/vpn"
	controllersweb "kubeform.dev/provider-azurerm-controller/controllers/web"
	controllerswindows "kubeform.dev/provider-azurerm-controller/controllers/windows"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
)

var runningControllers = struct {
	sync.RWMutex
	mp map[schema.GroupVersionKind]bool
}{mp: make(map[schema.GroupVersionKind]bool)}

func watchCRD(ctx context.Context, crdClient *clientset.Clientset, vwcClient *admissionregistrationv1.AdmissionregistrationV1Client, stopCh <-chan struct{}, mgr manager.Manager, auditor *auditlib.EventPublisher, watchOnlyDefault bool) error {
	informerFactory := informers.NewSharedInformerFactory(crdClient, time.Second*30)
	i := informerFactory.Apiextensions().V1beta1().CustomResourceDefinitions().Informer()
	l := informerFactory.Apiextensions().V1beta1().CustomResourceDefinitions().Lister()

	i.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			var key string
			key, err := cache.MetaNamespaceKeyFunc(obj)
			if err != nil {
				klog.Error(err)
				return
			}

			_, name, err := cache.SplitMetaNamespaceKey(key)
			if err != nil {
				klog.Error(err)
				return
			}

			crd, err := l.Get(name)
			if err != nil {
				klog.Error(err)
				return
			}
			if strings.Contains(crd.Spec.Group, "azurerm.kubeform.com") {
				gvk := schema.GroupVersionKind{
					Group:   crd.Spec.Group,
					Version: crd.Spec.Version,
					Kind:    crd.Spec.Names.Kind,
				}

				// check whether this gvk came before, if no then start the controller
				runningControllers.RLock()
				_, ok := runningControllers.mp[gvk]
				runningControllers.RUnlock()

				if !ok {
					runningControllers.Lock()
					runningControllers.mp[gvk] = true
					runningControllers.Unlock()

					if enableValidatingWebhook {
						// add dynamic ValidatingWebhookConfiguration

						// create empty VWC if the group has come for the first time
						err := createEmptyVWC(vwcClient, gvk)
						if err != nil {
							klog.Error(err)
							return
						}

						// update
						err = updateVWC(vwcClient, gvk)
						if err != nil {
							klog.Error(err)
							return
						}

						err = SetupWebhook(mgr, gvk)
						if err != nil {
							setupLog.Error(err, "unable to enable webhook")
							os.Exit(1)
						}
					}

					err = SetupManager(ctx, mgr, gvk, auditor, watchOnlyDefault)
					if err != nil {
						setupLog.Error(err, "unable to start manager")
						os.Exit(1)
					}
				}
			}
		},
	})

	informerFactory.Start(stopCh)

	return nil
}

func createEmptyVWC(vwcClient *admissionregistrationv1.AdmissionregistrationV1Client, gvk schema.GroupVersionKind) error {
	vwcName := strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-") + "-vwc"
	_, err := vwcClient.ValidatingWebhookConfigurations().Get(context.TODO(), vwcName, metav1.GetOptions{})
	if err == nil || !(errors.IsNotFound(err)) {
		return err
	}

	emptyVWC := &arv1.ValidatingWebhookConfiguration{
		TypeMeta: metav1.TypeMeta{
			Kind:       "ValidatingWebhookConfiguration",
			APIVersion: "admissionregistration.k8s.io/v1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-") + "-vwc",
			Labels: map[string]string{
				"app.kubernetes.io/instance": "azurerm.kubeform.com",
				"app.kubernetes.io/part-of":  "kubeform.com",
			},
		},
	}
	_, err = vwcClient.ValidatingWebhookConfigurations().Create(context.TODO(), emptyVWC, metav1.CreateOptions{})
	if err != nil {
		return err
	}

	return nil
}

func updateVWC(vwcClient *admissionregistrationv1.AdmissionregistrationV1Client, gvk schema.GroupVersionKind) error {
	vwcName := strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-") + "-vwc"
	vwc, err := vwcClient.ValidatingWebhookConfigurations().Get(context.TODO(), vwcName, metav1.GetOptions{})
	if err != nil {
		return err
	}

	path := "/validate-" + strings.ReplaceAll(strings.ToLower(gvk.Group), ".", "-") + "-v1alpha1-" + strings.ToLower(gvk.Kind)
	fail := arv1.Fail
	sideEffects := arv1.SideEffectClassNone
	admissionReviewVersions := []string{"v1"}

	rules := []arv1.RuleWithOperations{
		{
			Operations: []arv1.OperationType{
				arv1.Create,
				arv1.Update,
				arv1.Delete,
			},
			Rule: arv1.Rule{
				APIGroups:   []string{strings.ToLower(gvk.Group)},
				APIVersions: []string{gvk.Version},
				Resources:   []string{strings.ToLower(flect.Pluralize(gvk.Kind))},
			},
		},
	}

	data, err := ioutil.ReadFile("/tmp/k8s-webhook-server/serving-certs/ca.crt")
	if err != nil {
		return err
	}

	name := strings.ToLower(gvk.Kind) + "." + gvk.Group
	for _, webhook := range vwc.Webhooks {
		if webhook.Name == name {
			return nil
		}
	}

	newWebhook := arv1.ValidatingWebhook{
		Name: name,
		ClientConfig: arv1.WebhookClientConfig{
			Service: &arv1.ServiceReference{
				Namespace: webhookNamespace,
				Name:      webhookName,
				Path:      &path,
			},
			CABundle: data,
		},
		Rules:                   rules,
		FailurePolicy:           &fail,
		SideEffects:             &sideEffects,
		AdmissionReviewVersions: admissionReviewVersions,
	}

	vwc.Webhooks = append(vwc.Webhooks, newWebhook)

	_, err = vwcClient.ValidatingWebhookConfigurations().Update(context.TODO(), vwc, metav1.UpdateOptions{})
	if err != nil {
		return err
	}

	return nil
}

func SetupManager(ctx context.Context, mgr manager.Manager, gvk schema.GroupVersionKind, auditor *auditlib.EventPublisher, watchOnlyDefault bool) error {
	switch gvk {
	case schema.GroupVersionKind{
		Group:   "advanced.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ThreatProtection",
	}:
		if err := (&controllersadvanced.ThreatProtectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ThreatProtection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_advanced_threat_protection"],
			TypeName:         "azurerm_advanced_threat_protection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ThreatProtection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "analysis.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesServer",
	}:
		if err := (&controllersanalysis.ServicesServerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServicesServer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_analysis_services_server"],
			TypeName:         "azurerm_analysis_services_server",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServicesServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiManagement",
	}:
		if err := (&controllersapimanagement.ApiManagementReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApiManagement"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management"],
			TypeName:         "azurerm_api_management",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApiManagement")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Api",
	}:
		if err := (&controllersapimanagement.ApiReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Api"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_api"],
			TypeName:         "azurerm_api_management_api",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Api")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiDiagnostic",
	}:
		if err := (&controllersapimanagement.ApiDiagnosticReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApiDiagnostic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_api_diagnostic"],
			TypeName:         "azurerm_api_management_api_diagnostic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApiDiagnostic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiOperation",
	}:
		if err := (&controllersapimanagement.ApiOperationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApiOperation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_api_operation"],
			TypeName:         "azurerm_api_management_api_operation",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApiOperation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiOperationPolicy",
	}:
		if err := (&controllersapimanagement.ApiOperationPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApiOperationPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_api_operation_policy"],
			TypeName:         "azurerm_api_management_api_operation_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApiOperationPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiOperationTag",
	}:
		if err := (&controllersapimanagement.ApiOperationTagReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApiOperationTag"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_api_operation_tag"],
			TypeName:         "azurerm_api_management_api_operation_tag",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApiOperationTag")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiPolicy",
	}:
		if err := (&controllersapimanagement.ApiPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApiPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_api_policy"],
			TypeName:         "azurerm_api_management_api_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApiPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiSchema",
	}:
		if err := (&controllersapimanagement.ApiSchemaReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApiSchema"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_api_schema"],
			TypeName:         "azurerm_api_management_api_schema",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApiSchema")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiVersionSet",
	}:
		if err := (&controllersapimanagement.ApiVersionSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApiVersionSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_api_version_set"],
			TypeName:         "azurerm_api_management_api_version_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApiVersionSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AuthorizationServer",
	}:
		if err := (&controllersapimanagement.AuthorizationServerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AuthorizationServer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_authorization_server"],
			TypeName:         "azurerm_api_management_authorization_server",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AuthorizationServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Backend",
	}:
		if err := (&controllersapimanagement.BackendReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Backend"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_backend"],
			TypeName:         "azurerm_api_management_backend",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Backend")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&controllersapimanagement.CertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Certificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_certificate"],
			TypeName:         "azurerm_api_management_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomDomain",
	}:
		if err := (&controllersapimanagement.CustomDomainReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CustomDomain"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_custom_domain"],
			TypeName:         "azurerm_api_management_custom_domain",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CustomDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Diagnostic",
	}:
		if err := (&controllersapimanagement.DiagnosticReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Diagnostic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_diagnostic"],
			TypeName:         "azurerm_api_management_diagnostic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Diagnostic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EmailTemplate",
	}:
		if err := (&controllersapimanagement.EmailTemplateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EmailTemplate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_email_template"],
			TypeName:         "azurerm_api_management_email_template",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EmailTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersapimanagement.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_group"],
			TypeName:         "azurerm_api_management_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupUser",
	}:
		if err := (&controllersapimanagement.GroupUserReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GroupUser"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_group_user"],
			TypeName:         "azurerm_api_management_group_user",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProviderAad",
	}:
		if err := (&controllersapimanagement.IdentityProviderAadReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityProviderAad"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_identity_provider_aad"],
			TypeName:         "azurerm_api_management_identity_provider_aad",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityProviderAad")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProviderAadb2c",
	}:
		if err := (&controllersapimanagement.IdentityProviderAadb2cReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityProviderAadb2c"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_identity_provider_aadb2c"],
			TypeName:         "azurerm_api_management_identity_provider_aadb2c",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityProviderAadb2c")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProviderFacebook",
	}:
		if err := (&controllersapimanagement.IdentityProviderFacebookReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityProviderFacebook"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_identity_provider_facebook"],
			TypeName:         "azurerm_api_management_identity_provider_facebook",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityProviderFacebook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProviderGoogle",
	}:
		if err := (&controllersapimanagement.IdentityProviderGoogleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityProviderGoogle"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_identity_provider_google"],
			TypeName:         "azurerm_api_management_identity_provider_google",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityProviderGoogle")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProviderMicrosoft",
	}:
		if err := (&controllersapimanagement.IdentityProviderMicrosoftReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityProviderMicrosoft"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_identity_provider_microsoft"],
			TypeName:         "azurerm_api_management_identity_provider_microsoft",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityProviderMicrosoft")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProviderTwitter",
	}:
		if err := (&controllersapimanagement.IdentityProviderTwitterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IdentityProviderTwitter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_identity_provider_twitter"],
			TypeName:         "azurerm_api_management_identity_provider_twitter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IdentityProviderTwitter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Logger",
	}:
		if err := (&controllersapimanagement.LoggerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Logger"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_logger"],
			TypeName:         "azurerm_api_management_logger",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Logger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamedValue",
	}:
		if err := (&controllersapimanagement.NamedValueReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NamedValue"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_named_value"],
			TypeName:         "azurerm_api_management_named_value",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NamedValue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OpenidConnectProvider",
	}:
		if err := (&controllersapimanagement.OpenidConnectProviderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OpenidConnectProvider"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_openid_connect_provider"],
			TypeName:         "azurerm_api_management_openid_connect_provider",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OpenidConnectProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersapimanagement.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_policy"],
			TypeName:         "azurerm_api_management_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Product",
	}:
		if err := (&controllersapimanagement.ProductReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Product"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_product"],
			TypeName:         "azurerm_api_management_product",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Product")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProductAPI",
	}:
		if err := (&controllersapimanagement.ProductAPIReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProductAPI"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_product_api"],
			TypeName:         "azurerm_api_management_product_api",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProductAPI")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProductGroup",
	}:
		if err := (&controllersapimanagement.ProductGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProductGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_product_group"],
			TypeName:         "azurerm_api_management_product_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProductGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProductPolicy",
	}:
		if err := (&controllersapimanagement.ProductPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProductPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_product_policy"],
			TypeName:         "azurerm_api_management_product_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProductPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Property",
	}:
		if err := (&controllersapimanagement.PropertyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Property"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_property"],
			TypeName:         "azurerm_api_management_property",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Property")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RedisCache",
	}:
		if err := (&controllersapimanagement.RedisCacheReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RedisCache"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_redis_cache"],
			TypeName:         "azurerm_api_management_redis_cache",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RedisCache")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subscription",
	}:
		if err := (&controllersapimanagement.SubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Subscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_subscription"],
			TypeName:         "azurerm_api_management_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Subscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&controllersapimanagement.UserReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("User"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_api_management_user"],
			TypeName:         "azurerm_api_management_user",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&controllersapp.ConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Configuration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_configuration"],
			TypeName:         "azurerm_app_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&controllersapp.ServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Service"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service"],
			TypeName:         "azurerm_app_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceActiveSlot",
	}:
		if err := (&controllersapp.ServiceActiveSlotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceActiveSlot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_active_slot"],
			TypeName:         "azurerm_app_service_active_slot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceActiveSlot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceCertificate",
	}:
		if err := (&controllersapp.ServiceCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_certificate"],
			TypeName:         "azurerm_app_service_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceCertificateBinding",
	}:
		if err := (&controllersapp.ServiceCertificateBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceCertificateBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_certificate_binding"],
			TypeName:         "azurerm_app_service_certificate_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceCertificateBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceCertificateOrder",
	}:
		if err := (&controllersapp.ServiceCertificateOrderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceCertificateOrder"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_certificate_order"],
			TypeName:         "azurerm_app_service_certificate_order",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceCertificateOrder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceCustomHostnameBinding",
	}:
		if err := (&controllersapp.ServiceCustomHostnameBindingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceCustomHostnameBinding"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_custom_hostname_binding"],
			TypeName:         "azurerm_app_service_custom_hostname_binding",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceCustomHostnameBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceEnvironment",
	}:
		if err := (&controllersapp.ServiceEnvironmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceEnvironment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_environment"],
			TypeName:         "azurerm_app_service_environment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceEnvironment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceEnvironmentV3",
	}:
		if err := (&controllersapp.ServiceEnvironmentV3Reconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceEnvironmentV3"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_environment_v3"],
			TypeName:         "azurerm_app_service_environment_v3",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceEnvironmentV3")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceHybridConnection",
	}:
		if err := (&controllersapp.ServiceHybridConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceHybridConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_hybrid_connection"],
			TypeName:         "azurerm_app_service_hybrid_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceHybridConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceManagedCertificate",
	}:
		if err := (&controllersapp.ServiceManagedCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceManagedCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_managed_certificate"],
			TypeName:         "azurerm_app_service_managed_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceManagedCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicePlan",
	}:
		if err := (&controllersapp.ServicePlanReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServicePlan"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_plan"],
			TypeName:         "azurerm_app_service_plan",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServicePlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceSlot",
	}:
		if err := (&controllersapp.ServiceSlotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceSlot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_slot"],
			TypeName:         "azurerm_app_service_slot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceSlot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceSlotVirtualNetworkSwiftConnection",
	}:
		if err := (&controllersapp.ServiceSlotVirtualNetworkSwiftConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceSlotVirtualNetworkSwiftConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_slot_virtual_network_swift_connection"],
			TypeName:         "azurerm_app_service_slot_virtual_network_swift_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceSlotVirtualNetworkSwiftConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceSourceControlToken",
	}:
		if err := (&controllersapp.ServiceSourceControlTokenReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceSourceControlToken"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_source_control_token"],
			TypeName:         "azurerm_app_service_source_control_token",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceSourceControlToken")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceVirtualNetworkSwiftConnection",
	}:
		if err := (&controllersapp.ServiceVirtualNetworkSwiftConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceVirtualNetworkSwiftConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_app_service_virtual_network_swift_connection"],
			TypeName:         "azurerm_app_service_virtual_network_swift_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceVirtualNetworkSwiftConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&controllersapplication.GatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Gateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_application_gateway"],
			TypeName:         "azurerm_application_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Insights",
	}:
		if err := (&controllersapplication.InsightsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Insights"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_application_insights"],
			TypeName:         "azurerm_application_insights",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Insights")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InsightsAnalyticsItem",
	}:
		if err := (&controllersapplication.InsightsAnalyticsItemReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InsightsAnalyticsItem"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_application_insights_analytics_item"],
			TypeName:         "azurerm_application_insights_analytics_item",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InsightsAnalyticsItem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InsightsAPIKey",
	}:
		if err := (&controllersapplication.InsightsAPIKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InsightsAPIKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_application_insights_api_key"],
			TypeName:         "azurerm_application_insights_api_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InsightsAPIKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InsightsSmartDetectionRule",
	}:
		if err := (&controllersapplication.InsightsSmartDetectionRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InsightsSmartDetectionRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_application_insights_smart_detection_rule"],
			TypeName:         "azurerm_application_insights_smart_detection_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InsightsSmartDetectionRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InsightsWebTest",
	}:
		if err := (&controllersapplication.InsightsWebTestReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InsightsWebTest"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_application_insights_web_test"],
			TypeName:         "azurerm_application_insights_web_test",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InsightsWebTest")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityGroup",
	}:
		if err := (&controllersapplication.SecurityGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecurityGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_application_security_group"],
			TypeName:         "azurerm_application_security_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecurityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "attestation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Provider",
	}:
		if err := (&controllersattestation.ProviderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Provider"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_attestation_provider"],
			TypeName:         "azurerm_attestation_provider",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Provider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllersautomation.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_account"],
			TypeName:         "azurerm_automation_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&controllersautomation.CertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Certificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_certificate"],
			TypeName:         "azurerm_automation_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllersautomation.ConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_connection"],
			TypeName:         "azurerm_automation_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectionCertificate",
	}:
		if err := (&controllersautomation.ConnectionCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConnectionCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_connection_certificate"],
			TypeName:         "azurerm_automation_connection_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConnectionCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectionClassicCertificate",
	}:
		if err := (&controllersautomation.ConnectionClassicCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConnectionClassicCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_connection_classic_certificate"],
			TypeName:         "azurerm_automation_connection_classic_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConnectionClassicCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectionServicePrincipal",
	}:
		if err := (&controllersautomation.ConnectionServicePrincipalReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConnectionServicePrincipal"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_connection_service_principal"],
			TypeName:         "azurerm_automation_connection_service_principal",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConnectionServicePrincipal")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Credential",
	}:
		if err := (&controllersautomation.CredentialReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Credential"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_credential"],
			TypeName:         "azurerm_automation_credential",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Credential")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DscConfiguration",
	}:
		if err := (&controllersautomation.DscConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DscConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_dsc_configuration"],
			TypeName:         "azurerm_automation_dsc_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DscConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DscNodeconfiguration",
	}:
		if err := (&controllersautomation.DscNodeconfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DscNodeconfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_dsc_nodeconfiguration"],
			TypeName:         "azurerm_automation_dsc_nodeconfiguration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DscNodeconfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobSchedule",
	}:
		if err := (&controllersautomation.JobScheduleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("JobSchedule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_job_schedule"],
			TypeName:         "azurerm_automation_job_schedule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "JobSchedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Module",
	}:
		if err := (&controllersautomation.ModuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Module"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_module"],
			TypeName:         "azurerm_automation_module",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Module")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Runbook",
	}:
		if err := (&controllersautomation.RunbookReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Runbook"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_runbook"],
			TypeName:         "azurerm_automation_runbook",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Runbook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schedule",
	}:
		if err := (&controllersautomation.ScheduleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Schedule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_schedule"],
			TypeName:         "azurerm_automation_schedule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Schedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VariableBool",
	}:
		if err := (&controllersautomation.VariableBoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VariableBool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_variable_bool"],
			TypeName:         "azurerm_automation_variable_bool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VariableBool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VariableDatetime",
	}:
		if err := (&controllersautomation.VariableDatetimeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VariableDatetime"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_variable_datetime"],
			TypeName:         "azurerm_automation_variable_datetime",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VariableDatetime")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VariableInt",
	}:
		if err := (&controllersautomation.VariableIntReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VariableInt"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_variable_int"],
			TypeName:         "azurerm_automation_variable_int",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VariableInt")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VariableString",
	}:
		if err := (&controllersautomation.VariableStringReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VariableString"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_automation_variable_string"],
			TypeName:         "azurerm_automation_variable_string",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VariableString")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "availability.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Set",
	}:
		if err := (&controllersavailability.SetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Set"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_availability_set"],
			TypeName:         "azurerm_availability_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Set")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ContainerStorageAccount",
	}:
		if err := (&controllersbackup.ContainerStorageAccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ContainerStorageAccount"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_backup_container_storage_account"],
			TypeName:         "azurerm_backup_container_storage_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ContainerStorageAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyFileShare",
	}:
		if err := (&controllersbackup.PolicyFileShareReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PolicyFileShare"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_backup_policy_file_share"],
			TypeName:         "azurerm_backup_policy_file_share",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PolicyFileShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyVm",
	}:
		if err := (&controllersbackup.PolicyVmReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PolicyVm"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_backup_policy_vm"],
			TypeName:         "azurerm_backup_policy_vm",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PolicyVm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectedFileShare",
	}:
		if err := (&controllersbackup.ProtectedFileShareReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProtectedFileShare"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_backup_protected_file_share"],
			TypeName:         "azurerm_backup_protected_file_share",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProtectedFileShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectedVm",
	}:
		if err := (&controllersbackup.ProtectedVmReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProtectedVm"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_backup_protected_vm"],
			TypeName:         "azurerm_backup_protected_vm",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProtectedVm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastion.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Host",
	}:
		if err := (&controllersbastion.HostReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Host"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_bastion_host"],
			TypeName:         "azurerm_bastion_host",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Host")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllersbatch.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_batch_account"],
			TypeName:         "azurerm_batch_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&controllersbatch.ApplicationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Application"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_batch_application"],
			TypeName:         "azurerm_batch_application",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&controllersbatch.CertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Certificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_batch_certificate"],
			TypeName:         "azurerm_batch_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Pool",
	}:
		if err := (&controllersbatch.PoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Pool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_batch_pool"],
			TypeName:         "azurerm_batch_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Pool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "blueprint.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Assignment",
	}:
		if err := (&controllersblueprint.AssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Assignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_blueprint_assignment"],
			TypeName:         "azurerm_blueprint_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Assignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ChannelDirectline",
	}:
		if err := (&controllersbot.ChannelDirectlineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ChannelDirectline"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_bot_channel_directline"],
			TypeName:         "azurerm_bot_channel_directline",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ChannelDirectline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ChannelEmail",
	}:
		if err := (&controllersbot.ChannelEmailReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ChannelEmail"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_bot_channel_email"],
			TypeName:         "azurerm_bot_channel_email",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ChannelEmail")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ChannelMsTeams",
	}:
		if err := (&controllersbot.ChannelMsTeamsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ChannelMsTeams"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_bot_channel_ms_teams"],
			TypeName:         "azurerm_bot_channel_ms_teams",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ChannelMsTeams")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ChannelSlack",
	}:
		if err := (&controllersbot.ChannelSlackReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ChannelSlack"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_bot_channel_slack"],
			TypeName:         "azurerm_bot_channel_slack",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ChannelSlack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ChannelsRegistration",
	}:
		if err := (&controllersbot.ChannelsRegistrationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ChannelsRegistration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_bot_channels_registration"],
			TypeName:         "azurerm_bot_channels_registration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ChannelsRegistration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllersbot.ConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_bot_connection"],
			TypeName:         "azurerm_bot_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebApp",
	}:
		if err := (&controllersbot.WebAppReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WebApp"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_bot_web_app"],
			TypeName:         "azurerm_bot_web_app",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WebApp")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cdn.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&controllerscdn.EndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Endpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cdn_endpoint"],
			TypeName:         "azurerm_cdn_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cdn.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Profile",
	}:
		if err := (&controllerscdn.ProfileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Profile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cdn_profile"],
			TypeName:         "azurerm_cdn_profile",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Profile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognitive.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllerscognitive.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cognitive_account"],
			TypeName:         "azurerm_cognitive_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "communication.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&controllerscommunication.ServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Service"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_communication_service"],
			TypeName:         "azurerm_communication_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "consumption.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BudgetResourceGroup",
	}:
		if err := (&controllersconsumption.BudgetResourceGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BudgetResourceGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_consumption_budget_resource_group"],
			TypeName:         "azurerm_consumption_budget_resource_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BudgetResourceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "consumption.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BudgetSubscription",
	}:
		if err := (&controllersconsumption.BudgetSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BudgetSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_consumption_budget_subscription"],
			TypeName:         "azurerm_consumption_budget_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BudgetSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllerscontainer.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_container_group"],
			TypeName:         "azurerm_container_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Registry",
	}:
		if err := (&controllerscontainer.RegistryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Registry"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_container_registry"],
			TypeName:         "azurerm_container_registry",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Registry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegistryScopeMap",
	}:
		if err := (&controllerscontainer.RegistryScopeMapReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegistryScopeMap"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_container_registry_scope_map"],
			TypeName:         "azurerm_container_registry_scope_map",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegistryScopeMap")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegistryToken",
	}:
		if err := (&controllerscontainer.RegistryTokenReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegistryToken"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_container_registry_token"],
			TypeName:         "azurerm_container_registry_token",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegistryToken")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegistryWebhook",
	}:
		if err := (&controllerscontainer.RegistryWebhookReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RegistryWebhook"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_container_registry_webhook"],
			TypeName:         "azurerm_container_registry_webhook",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RegistryWebhook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllerscosmosdb.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_account"],
			TypeName:         "azurerm_cosmosdb_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CassandraKeyspace",
	}:
		if err := (&controllerscosmosdb.CassandraKeyspaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CassandraKeyspace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_cassandra_keyspace"],
			TypeName:         "azurerm_cosmosdb_cassandra_keyspace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CassandraKeyspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CassandraTable",
	}:
		if err := (&controllerscosmosdb.CassandraTableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CassandraTable"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_cassandra_table"],
			TypeName:         "azurerm_cosmosdb_cassandra_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CassandraTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GremlinDatabase",
	}:
		if err := (&controllerscosmosdb.GremlinDatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GremlinDatabase"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_gremlin_database"],
			TypeName:         "azurerm_cosmosdb_gremlin_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GremlinDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GremlinGraph",
	}:
		if err := (&controllerscosmosdb.GremlinGraphReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GremlinGraph"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_gremlin_graph"],
			TypeName:         "azurerm_cosmosdb_gremlin_graph",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GremlinGraph")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MongoCollection",
	}:
		if err := (&controllerscosmosdb.MongoCollectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MongoCollection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_mongo_collection"],
			TypeName:         "azurerm_cosmosdb_mongo_collection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MongoCollection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MongoDatabase",
	}:
		if err := (&controllerscosmosdb.MongoDatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MongoDatabase"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_mongo_database"],
			TypeName:         "azurerm_cosmosdb_mongo_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MongoDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NotebookWorkspace",
	}:
		if err := (&controllerscosmosdb.NotebookWorkspaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NotebookWorkspace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_notebook_workspace"],
			TypeName:         "azurerm_cosmosdb_notebook_workspace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NotebookWorkspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlContainer",
	}:
		if err := (&controllerscosmosdb.SqlContainerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SqlContainer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_sql_container"],
			TypeName:         "azurerm_cosmosdb_sql_container",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SqlContainer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlDatabase",
	}:
		if err := (&controllerscosmosdb.SqlDatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SqlDatabase"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_sql_database"],
			TypeName:         "azurerm_cosmosdb_sql_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SqlDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlFunction",
	}:
		if err := (&controllerscosmosdb.SqlFunctionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SqlFunction"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_sql_function"],
			TypeName:         "azurerm_cosmosdb_sql_function",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SqlFunction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlStoredProcedure",
	}:
		if err := (&controllerscosmosdb.SqlStoredProcedureReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SqlStoredProcedure"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_sql_stored_procedure"],
			TypeName:         "azurerm_cosmosdb_sql_stored_procedure",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SqlStoredProcedure")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlTrigger",
	}:
		if err := (&controllerscosmosdb.SqlTriggerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SqlTrigger"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_sql_trigger"],
			TypeName:         "azurerm_cosmosdb_sql_trigger",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SqlTrigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&controllerscosmosdb.TableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Table"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cosmosdb_table"],
			TypeName:         "azurerm_cosmosdb_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cost.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagementExportResourceGroup",
	}:
		if err := (&controllerscost.ManagementExportResourceGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagementExportResourceGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_cost_management_export_resource_group"],
			TypeName:         "azurerm_cost_management_export_resource_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagementExportResourceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "custom.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Provider",
	}:
		if err := (&controllerscustom.ProviderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Provider"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_custom_provider"],
			TypeName:         "azurerm_custom_provider",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Provider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dashboard.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dashboard",
	}:
		if err := (&controllersdashboard.DashboardReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Dashboard"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dashboard"],
			TypeName:         "azurerm_dashboard",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Dashboard")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Factory",
	}:
		if err := (&controllersdata.FactoryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Factory"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory"],
			TypeName:         "azurerm_data_factory",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Factory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetAzureBlob",
	}:
		if err := (&controllersdata.FactoryDatasetAzureBlobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryDatasetAzureBlob"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_dataset_azure_blob"],
			TypeName:         "azurerm_data_factory_dataset_azure_blob",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryDatasetAzureBlob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetCosmosdbSqlapi",
	}:
		if err := (&controllersdata.FactoryDatasetCosmosdbSqlapiReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryDatasetCosmosdbSqlapi"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_dataset_cosmosdb_sqlapi"],
			TypeName:         "azurerm_data_factory_dataset_cosmosdb_sqlapi",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryDatasetCosmosdbSqlapi")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetDelimitedText",
	}:
		if err := (&controllersdata.FactoryDatasetDelimitedTextReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryDatasetDelimitedText"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_dataset_delimited_text"],
			TypeName:         "azurerm_data_factory_dataset_delimited_text",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryDatasetDelimitedText")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetHTTP",
	}:
		if err := (&controllersdata.FactoryDatasetHTTPReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryDatasetHTTP"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_dataset_http"],
			TypeName:         "azurerm_data_factory_dataset_http",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryDatasetHTTP")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetJSON",
	}:
		if err := (&controllersdata.FactoryDatasetJSONReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryDatasetJSON"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_dataset_json"],
			TypeName:         "azurerm_data_factory_dataset_json",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryDatasetJSON")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetMysql",
	}:
		if err := (&controllersdata.FactoryDatasetMysqlReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryDatasetMysql"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_dataset_mysql"],
			TypeName:         "azurerm_data_factory_dataset_mysql",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryDatasetMysql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetParquet",
	}:
		if err := (&controllersdata.FactoryDatasetParquetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryDatasetParquet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_dataset_parquet"],
			TypeName:         "azurerm_data_factory_dataset_parquet",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryDatasetParquet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetPostgresql",
	}:
		if err := (&controllersdata.FactoryDatasetPostgresqlReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryDatasetPostgresql"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_dataset_postgresql"],
			TypeName:         "azurerm_data_factory_dataset_postgresql",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryDatasetPostgresql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetSnowflake",
	}:
		if err := (&controllersdata.FactoryDatasetSnowflakeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryDatasetSnowflake"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_dataset_snowflake"],
			TypeName:         "azurerm_data_factory_dataset_snowflake",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryDatasetSnowflake")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetSQLServerTable",
	}:
		if err := (&controllersdata.FactoryDatasetSQLServerTableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryDatasetSQLServerTable"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_dataset_sql_server_table"],
			TypeName:         "azurerm_data_factory_dataset_sql_server_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryDatasetSQLServerTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryIntegrationRuntimeAzure",
	}:
		if err := (&controllersdata.FactoryIntegrationRuntimeAzureReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryIntegrationRuntimeAzure"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_integration_runtime_azure"],
			TypeName:         "azurerm_data_factory_integration_runtime_azure",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryIntegrationRuntimeAzure")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryIntegrationRuntimeAzureSsis",
	}:
		if err := (&controllersdata.FactoryIntegrationRuntimeAzureSsisReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryIntegrationRuntimeAzureSsis"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_integration_runtime_azure_ssis"],
			TypeName:         "azurerm_data_factory_integration_runtime_azure_ssis",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryIntegrationRuntimeAzureSsis")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryIntegrationRuntimeManaged",
	}:
		if err := (&controllersdata.FactoryIntegrationRuntimeManagedReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryIntegrationRuntimeManaged"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_integration_runtime_managed"],
			TypeName:         "azurerm_data_factory_integration_runtime_managed",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryIntegrationRuntimeManaged")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryIntegrationRuntimeSelfHosted",
	}:
		if err := (&controllersdata.FactoryIntegrationRuntimeSelfHostedReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryIntegrationRuntimeSelfHosted"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_integration_runtime_self_hosted"],
			TypeName:         "azurerm_data_factory_integration_runtime_self_hosted",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryIntegrationRuntimeSelfHosted")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedCustomService",
	}:
		if err := (&controllersdata.FactoryLinkedCustomServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedCustomService"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_custom_service"],
			TypeName:         "azurerm_data_factory_linked_custom_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedCustomService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureBlobStorage",
	}:
		if err := (&controllersdata.FactoryLinkedServiceAzureBlobStorageReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceAzureBlobStorage"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_azure_blob_storage"],
			TypeName:         "azurerm_data_factory_linked_service_azure_blob_storage",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceAzureBlobStorage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureDatabricks",
	}:
		if err := (&controllersdata.FactoryLinkedServiceAzureDatabricksReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceAzureDatabricks"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_azure_databricks"],
			TypeName:         "azurerm_data_factory_linked_service_azure_databricks",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceAzureDatabricks")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureFileStorage",
	}:
		if err := (&controllersdata.FactoryLinkedServiceAzureFileStorageReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceAzureFileStorage"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_azure_file_storage"],
			TypeName:         "azurerm_data_factory_linked_service_azure_file_storage",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceAzureFileStorage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureFunction",
	}:
		if err := (&controllersdata.FactoryLinkedServiceAzureFunctionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceAzureFunction"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_azure_function"],
			TypeName:         "azurerm_data_factory_linked_service_azure_function",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceAzureFunction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureSearch",
	}:
		if err := (&controllersdata.FactoryLinkedServiceAzureSearchReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceAzureSearch"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_azure_search"],
			TypeName:         "azurerm_data_factory_linked_service_azure_search",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceAzureSearch")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureSQLDatabase",
	}:
		if err := (&controllersdata.FactoryLinkedServiceAzureSQLDatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceAzureSQLDatabase"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_azure_sql_database"],
			TypeName:         "azurerm_data_factory_linked_service_azure_sql_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceAzureSQLDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureTableStorage",
	}:
		if err := (&controllersdata.FactoryLinkedServiceAzureTableStorageReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceAzureTableStorage"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_azure_table_storage"],
			TypeName:         "azurerm_data_factory_linked_service_azure_table_storage",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceAzureTableStorage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceCosmosdb",
	}:
		if err := (&controllersdata.FactoryLinkedServiceCosmosdbReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceCosmosdb"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_cosmosdb"],
			TypeName:         "azurerm_data_factory_linked_service_cosmosdb",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceCosmosdb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceDataLakeStorageGen2",
	}:
		if err := (&controllersdata.FactoryLinkedServiceDataLakeStorageGen2Reconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceDataLakeStorageGen2"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_data_lake_storage_gen2"],
			TypeName:         "azurerm_data_factory_linked_service_data_lake_storage_gen2",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceDataLakeStorageGen2")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceKeyVault",
	}:
		if err := (&controllersdata.FactoryLinkedServiceKeyVaultReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceKeyVault"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_key_vault"],
			TypeName:         "azurerm_data_factory_linked_service_key_vault",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceKeyVault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceKusto",
	}:
		if err := (&controllersdata.FactoryLinkedServiceKustoReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceKusto"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_kusto"],
			TypeName:         "azurerm_data_factory_linked_service_kusto",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceKusto")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceMysql",
	}:
		if err := (&controllersdata.FactoryLinkedServiceMysqlReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceMysql"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_mysql"],
			TypeName:         "azurerm_data_factory_linked_service_mysql",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceMysql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceOdata",
	}:
		if err := (&controllersdata.FactoryLinkedServiceOdataReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceOdata"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_odata"],
			TypeName:         "azurerm_data_factory_linked_service_odata",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceOdata")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServicePostgresql",
	}:
		if err := (&controllersdata.FactoryLinkedServicePostgresqlReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServicePostgresql"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_postgresql"],
			TypeName:         "azurerm_data_factory_linked_service_postgresql",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServicePostgresql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceSftp",
	}:
		if err := (&controllersdata.FactoryLinkedServiceSftpReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceSftp"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_sftp"],
			TypeName:         "azurerm_data_factory_linked_service_sftp",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceSftp")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceSnowflake",
	}:
		if err := (&controllersdata.FactoryLinkedServiceSnowflakeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceSnowflake"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_snowflake"],
			TypeName:         "azurerm_data_factory_linked_service_snowflake",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceSnowflake")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceSQLServer",
	}:
		if err := (&controllersdata.FactoryLinkedServiceSQLServerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceSQLServer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_sql_server"],
			TypeName:         "azurerm_data_factory_linked_service_sql_server",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceSQLServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceSynapse",
	}:
		if err := (&controllersdata.FactoryLinkedServiceSynapseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceSynapse"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_synapse"],
			TypeName:         "azurerm_data_factory_linked_service_synapse",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceSynapse")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceWeb",
	}:
		if err := (&controllersdata.FactoryLinkedServiceWebReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryLinkedServiceWeb"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_linked_service_web"],
			TypeName:         "azurerm_data_factory_linked_service_web",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryLinkedServiceWeb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryPipeline",
	}:
		if err := (&controllersdata.FactoryPipelineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryPipeline"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_pipeline"],
			TypeName:         "azurerm_data_factory_pipeline",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryPipeline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryTriggerBlobEvent",
	}:
		if err := (&controllersdata.FactoryTriggerBlobEventReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryTriggerBlobEvent"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_trigger_blob_event"],
			TypeName:         "azurerm_data_factory_trigger_blob_event",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryTriggerBlobEvent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryTriggerSchedule",
	}:
		if err := (&controllersdata.FactoryTriggerScheduleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FactoryTriggerSchedule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_factory_trigger_schedule"],
			TypeName:         "azurerm_data_factory_trigger_schedule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FactoryTriggerSchedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeAnalyticsAccount",
	}:
		if err := (&controllersdata.LakeAnalyticsAccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LakeAnalyticsAccount"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_lake_analytics_account"],
			TypeName:         "azurerm_data_lake_analytics_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LakeAnalyticsAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeAnalyticsFirewallRule",
	}:
		if err := (&controllersdata.LakeAnalyticsFirewallRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LakeAnalyticsFirewallRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_lake_analytics_firewall_rule"],
			TypeName:         "azurerm_data_lake_analytics_firewall_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LakeAnalyticsFirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeStore",
	}:
		if err := (&controllersdata.LakeStoreReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LakeStore"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_lake_store"],
			TypeName:         "azurerm_data_lake_store",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LakeStore")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeStoreFile",
	}:
		if err := (&controllersdata.LakeStoreFileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LakeStoreFile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_lake_store_file"],
			TypeName:         "azurerm_data_lake_store_file",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LakeStoreFile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeStoreFirewallRule",
	}:
		if err := (&controllersdata.LakeStoreFirewallRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LakeStoreFirewallRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_lake_store_firewall_rule"],
			TypeName:         "azurerm_data_lake_store_firewall_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LakeStoreFirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeStoreVirtualNetworkRule",
	}:
		if err := (&controllersdata.LakeStoreVirtualNetworkRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LakeStoreVirtualNetworkRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_lake_store_virtual_network_rule"],
			TypeName:         "azurerm_data_lake_store_virtual_network_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LakeStoreVirtualNetworkRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectionBackupInstancePostgresql",
	}:
		if err := (&controllersdata.ProtectionBackupInstancePostgresqlReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProtectionBackupInstancePostgresql"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_protection_backup_instance_postgresql"],
			TypeName:         "azurerm_data_protection_backup_instance_postgresql",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProtectionBackupInstancePostgresql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectionBackupPolicyPostgresql",
	}:
		if err := (&controllersdata.ProtectionBackupPolicyPostgresqlReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProtectionBackupPolicyPostgresql"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_protection_backup_policy_postgresql"],
			TypeName:         "azurerm_data_protection_backup_policy_postgresql",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProtectionBackupPolicyPostgresql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectionBackupVault",
	}:
		if err := (&controllersdata.ProtectionBackupVaultReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProtectionBackupVault"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_protection_backup_vault"],
			TypeName:         "azurerm_data_protection_backup_vault",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProtectionBackupVault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Share",
	}:
		if err := (&controllersdata.ShareReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Share"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_share"],
			TypeName:         "azurerm_data_share",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Share")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareAccount",
	}:
		if err := (&controllersdata.ShareAccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ShareAccount"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_share_account"],
			TypeName:         "azurerm_data_share_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ShareAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareDatasetBlobStorage",
	}:
		if err := (&controllersdata.ShareDatasetBlobStorageReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ShareDatasetBlobStorage"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_share_dataset_blob_storage"],
			TypeName:         "azurerm_data_share_dataset_blob_storage",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ShareDatasetBlobStorage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareDatasetDataLakeGen1",
	}:
		if err := (&controllersdata.ShareDatasetDataLakeGen1Reconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ShareDatasetDataLakeGen1"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_share_dataset_data_lake_gen1"],
			TypeName:         "azurerm_data_share_dataset_data_lake_gen1",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ShareDatasetDataLakeGen1")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareDatasetDataLakeGen2",
	}:
		if err := (&controllersdata.ShareDatasetDataLakeGen2Reconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ShareDatasetDataLakeGen2"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_share_dataset_data_lake_gen2"],
			TypeName:         "azurerm_data_share_dataset_data_lake_gen2",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ShareDatasetDataLakeGen2")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareDatasetKustoCluster",
	}:
		if err := (&controllersdata.ShareDatasetKustoClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ShareDatasetKustoCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_share_dataset_kusto_cluster"],
			TypeName:         "azurerm_data_share_dataset_kusto_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ShareDatasetKustoCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareDatasetKustoDatabase",
	}:
		if err := (&controllersdata.ShareDatasetKustoDatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ShareDatasetKustoDatabase"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_data_share_dataset_kusto_database"],
			TypeName:         "azurerm_data_share_dataset_kusto_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ShareDatasetKustoDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "database.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MigrationProject",
	}:
		if err := (&controllersdatabase.MigrationProjectReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MigrationProject"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_database_migration_project"],
			TypeName:         "azurerm_database_migration_project",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MigrationProject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "database.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MigrationService",
	}:
		if err := (&controllersdatabase.MigrationServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MigrationService"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_database_migration_service"],
			TypeName:         "azurerm_database_migration_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MigrationService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "databox.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EdgeDevice",
	}:
		if err := (&controllersdatabox.EdgeDeviceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EdgeDevice"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_databox_edge_device"],
			TypeName:         "azurerm_databox_edge_device",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EdgeDevice")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "databox.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EdgeOrder",
	}:
		if err := (&controllersdatabox.EdgeOrderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EdgeOrder"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_databox_edge_order"],
			TypeName:         "azurerm_databox_edge_order",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EdgeOrder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "databricks.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workspace",
	}:
		if err := (&controllersdatabricks.WorkspaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Workspace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_databricks_workspace"],
			TypeName:         "azurerm_databricks_workspace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Workspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dedicatedhardware.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityModule",
	}:
		if err := (&controllersdedicatedhardware.SecurityModuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecurityModule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dedicated_hardware_security_module"],
			TypeName:         "azurerm_dedicated_hardware_security_module",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecurityModule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dedicatedhost.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DedicatedHost",
	}:
		if err := (&controllersdedicatedhost.DedicatedHostReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DedicatedHost"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dedicated_host"],
			TypeName:         "azurerm_dedicated_host",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DedicatedHost")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dedicatedhost.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersdedicatedhost.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dedicated_host_group"],
			TypeName:         "azurerm_dedicated_host_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalVmShutdownSchedule",
	}:
		if err := (&controllersdevtest.GlobalVmShutdownScheduleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GlobalVmShutdownSchedule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dev_test_global_vm_shutdown_schedule"],
			TypeName:         "azurerm_dev_test_global_vm_shutdown_schedule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GlobalVmShutdownSchedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Lab",
	}:
		if err := (&controllersdevtest.LabReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Lab"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dev_test_lab"],
			TypeName:         "azurerm_dev_test_lab",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Lab")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LinuxVirtualMachine",
	}:
		if err := (&controllersdevtest.LinuxVirtualMachineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LinuxVirtualMachine"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dev_test_linux_virtual_machine"],
			TypeName:         "azurerm_dev_test_linux_virtual_machine",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LinuxVirtualMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersdevtest.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dev_test_policy"],
			TypeName:         "azurerm_dev_test_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schedule",
	}:
		if err := (&controllersdevtest.ScheduleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Schedule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dev_test_schedule"],
			TypeName:         "azurerm_dev_test_schedule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Schedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNetwork",
	}:
		if err := (&controllersdevtest.VirtualNetworkReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualNetwork"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dev_test_virtual_network"],
			TypeName:         "azurerm_dev_test_virtual_network",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualNetwork")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WindowsVirtualMachine",
	}:
		if err := (&controllersdevtest.WindowsVirtualMachineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WindowsVirtualMachine"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dev_test_windows_virtual_machine"],
			TypeName:         "azurerm_dev_test_windows_virtual_machine",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WindowsVirtualMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devspace.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Controller",
	}:
		if err := (&controllersdevspace.ControllerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Controller"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_devspace_controller"],
			TypeName:         "azurerm_devspace_controller",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Controller")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "digital.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TwinsEndpointEventgrid",
	}:
		if err := (&controllersdigital.TwinsEndpointEventgridReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TwinsEndpointEventgrid"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_digital_twins_endpoint_eventgrid"],
			TypeName:         "azurerm_digital_twins_endpoint_eventgrid",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TwinsEndpointEventgrid")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "digital.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TwinsEndpointEventhub",
	}:
		if err := (&controllersdigital.TwinsEndpointEventhubReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TwinsEndpointEventhub"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_digital_twins_endpoint_eventhub"],
			TypeName:         "azurerm_digital_twins_endpoint_eventhub",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TwinsEndpointEventhub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "digital.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TwinsEndpointServicebus",
	}:
		if err := (&controllersdigital.TwinsEndpointServicebusReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TwinsEndpointServicebus"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_digital_twins_endpoint_servicebus"],
			TypeName:         "azurerm_digital_twins_endpoint_servicebus",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TwinsEndpointServicebus")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "digital.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TwinsInstance",
	}:
		if err := (&controllersdigital.TwinsInstanceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TwinsInstance"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_digital_twins_instance"],
			TypeName:         "azurerm_digital_twins_instance",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TwinsInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "disk.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Access",
	}:
		if err := (&controllersdisk.AccessReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Access"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_disk_access"],
			TypeName:         "azurerm_disk_access",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Access")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "disk.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EncryptionSet",
	}:
		if err := (&controllersdisk.EncryptionSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EncryptionSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_disk_encryption_set"],
			TypeName:         "azurerm_disk_encryption_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EncryptionSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ARecord",
	}:
		if err := (&controllersdns.ARecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ARecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dns_a_record"],
			TypeName:         "azurerm_dns_a_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ARecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AaaaRecord",
	}:
		if err := (&controllersdns.AaaaRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AaaaRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dns_aaaa_record"],
			TypeName:         "azurerm_dns_aaaa_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AaaaRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CaaRecord",
	}:
		if err := (&controllersdns.CaaRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CaaRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dns_caa_record"],
			TypeName:         "azurerm_dns_caa_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CaaRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CnameRecord",
	}:
		if err := (&controllersdns.CnameRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CnameRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dns_cname_record"],
			TypeName:         "azurerm_dns_cname_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CnameRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MxRecord",
	}:
		if err := (&controllersdns.MxRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MxRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dns_mx_record"],
			TypeName:         "azurerm_dns_mx_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MxRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NsRecord",
	}:
		if err := (&controllersdns.NsRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NsRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dns_ns_record"],
			TypeName:         "azurerm_dns_ns_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NsRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PtrRecord",
	}:
		if err := (&controllersdns.PtrRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PtrRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dns_ptr_record"],
			TypeName:         "azurerm_dns_ptr_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PtrRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SrvRecord",
	}:
		if err := (&controllersdns.SrvRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SrvRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dns_srv_record"],
			TypeName:         "azurerm_dns_srv_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SrvRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TxtRecord",
	}:
		if err := (&controllersdns.TxtRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TxtRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dns_txt_record"],
			TypeName:         "azurerm_dns_txt_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TxtRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Zone",
	}:
		if err := (&controllersdns.ZoneReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Zone"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_dns_zone"],
			TypeName:         "azurerm_dns_zone",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Zone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventgrid.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&controllerseventgrid.DomainReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Domain"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventgrid_domain"],
			TypeName:         "azurerm_eventgrid_domain",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventgrid.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainTopic",
	}:
		if err := (&controllerseventgrid.DomainTopicReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DomainTopic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventgrid_domain_topic"],
			TypeName:         "azurerm_eventgrid_domain_topic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DomainTopic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventgrid.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventSubscription",
	}:
		if err := (&controllerseventgrid.EventSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventgrid_event_subscription"],
			TypeName:         "azurerm_eventgrid_event_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventgrid.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SystemTopic",
	}:
		if err := (&controllerseventgrid.SystemTopicReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SystemTopic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventgrid_system_topic"],
			TypeName:         "azurerm_eventgrid_system_topic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SystemTopic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventgrid.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SystemTopicEventSubscription",
	}:
		if err := (&controllerseventgrid.SystemTopicEventSubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SystemTopicEventSubscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventgrid_system_topic_event_subscription"],
			TypeName:         "azurerm_eventgrid_system_topic_event_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SystemTopicEventSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventgrid.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&controllerseventgrid.TopicReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Topic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventgrid_topic"],
			TypeName:         "azurerm_eventgrid_topic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Eventhub",
	}:
		if err := (&controllerseventhub.EventhubReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Eventhub"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventhub"],
			TypeName:         "azurerm_eventhub",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Eventhub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AuthorizationRule",
	}:
		if err := (&controllerseventhub.AuthorizationRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AuthorizationRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventhub_authorization_rule"],
			TypeName:         "azurerm_eventhub_authorization_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllerseventhub.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventhub_cluster"],
			TypeName:         "azurerm_eventhub_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsumerGroup",
	}:
		if err := (&controllerseventhub.ConsumerGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConsumerGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventhub_consumer_group"],
			TypeName:         "azurerm_eventhub_consumer_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConsumerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Namespace",
	}:
		if err := (&controllerseventhub.NamespaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Namespace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventhub_namespace"],
			TypeName:         "azurerm_eventhub_namespace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Namespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamespaceAuthorizationRule",
	}:
		if err := (&controllerseventhub.NamespaceAuthorizationRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NamespaceAuthorizationRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventhub_namespace_authorization_rule"],
			TypeName:         "azurerm_eventhub_namespace_authorization_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NamespaceAuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamespaceCustomerManagedKey",
	}:
		if err := (&controllerseventhub.NamespaceCustomerManagedKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NamespaceCustomerManagedKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventhub_namespace_customer_managed_key"],
			TypeName:         "azurerm_eventhub_namespace_customer_managed_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NamespaceCustomerManagedKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamespaceDisasterRecoveryConfig",
	}:
		if err := (&controllerseventhub.NamespaceDisasterRecoveryConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NamespaceDisasterRecoveryConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_eventhub_namespace_disaster_recovery_config"],
			TypeName:         "azurerm_eventhub_namespace_disaster_recovery_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NamespaceDisasterRecoveryConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Circuit",
	}:
		if err := (&controllersexpressroute.CircuitReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Circuit"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_express_route_circuit"],
			TypeName:         "azurerm_express_route_circuit",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Circuit")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CircuitAuthorization",
	}:
		if err := (&controllersexpressroute.CircuitAuthorizationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CircuitAuthorization"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_express_route_circuit_authorization"],
			TypeName:         "azurerm_express_route_circuit_authorization",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CircuitAuthorization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CircuitConnection",
	}:
		if err := (&controllersexpressroute.CircuitConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CircuitConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_express_route_circuit_connection"],
			TypeName:         "azurerm_express_route_circuit_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CircuitConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CircuitPeering",
	}:
		if err := (&controllersexpressroute.CircuitPeeringReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CircuitPeering"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_express_route_circuit_peering"],
			TypeName:         "azurerm_express_route_circuit_peering",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CircuitPeering")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&controllersexpressroute.ConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Connection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_express_route_connection"],
			TypeName:         "azurerm_express_route_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&controllersexpressroute.GatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Gateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_express_route_gateway"],
			TypeName:         "azurerm_express_route_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Port",
	}:
		if err := (&controllersexpressroute.PortReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Port"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_express_route_port"],
			TypeName:         "azurerm_express_route_port",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Port")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firewall.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Firewall",
	}:
		if err := (&controllersfirewall.FirewallReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Firewall"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_firewall"],
			TypeName:         "azurerm_firewall",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Firewall")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firewall.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationRuleCollection",
	}:
		if err := (&controllersfirewall.ApplicationRuleCollectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApplicationRuleCollection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_firewall_application_rule_collection"],
			TypeName:         "azurerm_firewall_application_rule_collection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApplicationRuleCollection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firewall.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NatRuleCollection",
	}:
		if err := (&controllersfirewall.NatRuleCollectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NatRuleCollection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_firewall_nat_rule_collection"],
			TypeName:         "azurerm_firewall_nat_rule_collection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NatRuleCollection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firewall.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkRuleCollection",
	}:
		if err := (&controllersfirewall.NetworkRuleCollectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkRuleCollection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_firewall_network_rule_collection"],
			TypeName:         "azurerm_firewall_network_rule_collection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkRuleCollection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firewall.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&controllersfirewall.PolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Policy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_firewall_policy"],
			TypeName:         "azurerm_firewall_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firewall.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyRuleCollectionGroup",
	}:
		if err := (&controllersfirewall.PolicyRuleCollectionGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PolicyRuleCollectionGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_firewall_policy_rule_collection_group"],
			TypeName:         "azurerm_firewall_policy_rule_collection_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PolicyRuleCollectionGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "frontdoor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Frontdoor",
	}:
		if err := (&controllersfrontdoor.FrontdoorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Frontdoor"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_frontdoor"],
			TypeName:         "azurerm_frontdoor",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Frontdoor")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "frontdoor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomHTTPSConfiguration",
	}:
		if err := (&controllersfrontdoor.CustomHTTPSConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CustomHTTPSConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_frontdoor_custom_https_configuration"],
			TypeName:         "azurerm_frontdoor_custom_https_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CustomHTTPSConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "frontdoor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallPolicy",
	}:
		if err := (&controllersfrontdoor.FirewallPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FirewallPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_frontdoor_firewall_policy"],
			TypeName:         "azurerm_frontdoor_firewall_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "function.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&controllersfunction.AppReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("App"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_function_app"],
			TypeName:         "azurerm_function_app",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "function.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppSlot",
	}:
		if err := (&controllersfunction.AppSlotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AppSlot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_function_app_slot"],
			TypeName:         "azurerm_function_app_slot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AppSlot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HadoopCluster",
	}:
		if err := (&controllershdinsight.HadoopClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HadoopCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hdinsight_hadoop_cluster"],
			TypeName:         "azurerm_hdinsight_hadoop_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HadoopCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HbaseCluster",
	}:
		if err := (&controllershdinsight.HbaseClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HbaseCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hdinsight_hbase_cluster"],
			TypeName:         "azurerm_hdinsight_hbase_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HbaseCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InteractiveQueryCluster",
	}:
		if err := (&controllershdinsight.InteractiveQueryClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InteractiveQueryCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hdinsight_interactive_query_cluster"],
			TypeName:         "azurerm_hdinsight_interactive_query_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InteractiveQueryCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KafkaCluster",
	}:
		if err := (&controllershdinsight.KafkaClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("KafkaCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hdinsight_kafka_cluster"],
			TypeName:         "azurerm_hdinsight_kafka_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KafkaCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MlServicesCluster",
	}:
		if err := (&controllershdinsight.MlServicesClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MlServicesCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hdinsight_ml_services_cluster"],
			TypeName:         "azurerm_hdinsight_ml_services_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MlServicesCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RserverCluster",
	}:
		if err := (&controllershdinsight.RserverClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RserverCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hdinsight_rserver_cluster"],
			TypeName:         "azurerm_hdinsight_rserver_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RserverCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SparkCluster",
	}:
		if err := (&controllershdinsight.SparkClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SparkCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hdinsight_spark_cluster"],
			TypeName:         "azurerm_hdinsight_spark_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SparkCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StormCluster",
	}:
		if err := (&controllershdinsight.StormClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StormCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hdinsight_storm_cluster"],
			TypeName:         "azurerm_hdinsight_storm_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StormCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthbot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Healthbot",
	}:
		if err := (&controllershealthbot.HealthbotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Healthbot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_healthbot"],
			TypeName:         "azurerm_healthbot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Healthbot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&controllershealthcare.ServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Service"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_healthcare_service"],
			TypeName:         "azurerm_healthcare_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hpc.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cache",
	}:
		if err := (&controllershpc.CacheReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cache"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hpc_cache"],
			TypeName:         "azurerm_hpc_cache",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cache")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hpc.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CacheAccessPolicy",
	}:
		if err := (&controllershpc.CacheAccessPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CacheAccessPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hpc_cache_access_policy"],
			TypeName:         "azurerm_hpc_cache_access_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CacheAccessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hpc.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CacheBlobNfsTarget",
	}:
		if err := (&controllershpc.CacheBlobNfsTargetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CacheBlobNfsTarget"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hpc_cache_blob_nfs_target"],
			TypeName:         "azurerm_hpc_cache_blob_nfs_target",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CacheBlobNfsTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hpc.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CacheBlobTarget",
	}:
		if err := (&controllershpc.CacheBlobTargetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CacheBlobTarget"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hpc_cache_blob_target"],
			TypeName:         "azurerm_hpc_cache_blob_target",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CacheBlobTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hpc.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CacheNfsTarget",
	}:
		if err := (&controllershpc.CacheNfsTargetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CacheNfsTarget"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_hpc_cache_nfs_target"],
			TypeName:         "azurerm_hpc_cache_nfs_target",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CacheNfsTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "image.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Image",
	}:
		if err := (&controllersimage.ImageReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Image"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_image"],
			TypeName:         "azurerm_image",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Image")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "integration.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceEnvironment",
	}:
		if err := (&controllersintegration.ServiceEnvironmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceEnvironment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_integration_service_environment"],
			TypeName:         "azurerm_integration_service_environment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceEnvironment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iotsecurity.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeviceGroup",
	}:
		if err := (&controllersiotsecurity.DeviceGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DeviceGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iot_security_device_group"],
			TypeName:         "azurerm_iot_security_device_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DeviceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iotsecurity.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Solution",
	}:
		if err := (&controllersiotsecurity.SolutionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Solution"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iot_security_solution"],
			TypeName:         "azurerm_iot_security_solution",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Solution")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iottime.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SeriesInsightsAccessPolicy",
	}:
		if err := (&controllersiottime.SeriesInsightsAccessPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SeriesInsightsAccessPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iot_time_series_insights_access_policy"],
			TypeName:         "azurerm_iot_time_series_insights_access_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SeriesInsightsAccessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iottime.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SeriesInsightsEventSourceIothub",
	}:
		if err := (&controllersiottime.SeriesInsightsEventSourceIothubReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SeriesInsightsEventSourceIothub"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iot_time_series_insights_event_source_iothub"],
			TypeName:         "azurerm_iot_time_series_insights_event_source_iothub",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SeriesInsightsEventSourceIothub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iottime.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SeriesInsightsGen2Environment",
	}:
		if err := (&controllersiottime.SeriesInsightsGen2EnvironmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SeriesInsightsGen2Environment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iot_time_series_insights_gen2_environment"],
			TypeName:         "azurerm_iot_time_series_insights_gen2_environment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SeriesInsightsGen2Environment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iottime.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SeriesInsightsReferenceDataSet",
	}:
		if err := (&controllersiottime.SeriesInsightsReferenceDataSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SeriesInsightsReferenceDataSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iot_time_series_insights_reference_data_set"],
			TypeName:         "azurerm_iot_time_series_insights_reference_data_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SeriesInsightsReferenceDataSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iottime.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SeriesInsightsStandardEnvironment",
	}:
		if err := (&controllersiottime.SeriesInsightsStandardEnvironmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SeriesInsightsStandardEnvironment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iot_time_series_insights_standard_environment"],
			TypeName:         "azurerm_iot_time_series_insights_standard_environment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SeriesInsightsStandardEnvironment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iotcentral.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&controllersiotcentral.ApplicationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Application"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iotcentral_application"],
			TypeName:         "azurerm_iotcentral_application",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Iothub",
	}:
		if err := (&controllersiothub.IothubReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Iothub"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub"],
			TypeName:         "azurerm_iothub",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Iothub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsumerGroup",
	}:
		if err := (&controllersiothub.ConsumerGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConsumerGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub_consumer_group"],
			TypeName:         "azurerm_iothub_consumer_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConsumerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dps",
	}:
		if err := (&controllersiothub.DpsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Dps"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub_dps"],
			TypeName:         "azurerm_iothub_dps",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Dps")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DpsCertificate",
	}:
		if err := (&controllersiothub.DpsCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DpsCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub_dps_certificate"],
			TypeName:         "azurerm_iothub_dps_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DpsCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DpsSharedAccessPolicy",
	}:
		if err := (&controllersiothub.DpsSharedAccessPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DpsSharedAccessPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub_dps_shared_access_policy"],
			TypeName:         "azurerm_iothub_dps_shared_access_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DpsSharedAccessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointEventhub",
	}:
		if err := (&controllersiothub.EndpointEventhubReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EndpointEventhub"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub_endpoint_eventhub"],
			TypeName:         "azurerm_iothub_endpoint_eventhub",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointEventhub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointServicebusQueue",
	}:
		if err := (&controllersiothub.EndpointServicebusQueueReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EndpointServicebusQueue"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub_endpoint_servicebus_queue"],
			TypeName:         "azurerm_iothub_endpoint_servicebus_queue",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointServicebusQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointServicebusTopic",
	}:
		if err := (&controllersiothub.EndpointServicebusTopicReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EndpointServicebusTopic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub_endpoint_servicebus_topic"],
			TypeName:         "azurerm_iothub_endpoint_servicebus_topic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointServicebusTopic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointStorageContainer",
	}:
		if err := (&controllersiothub.EndpointStorageContainerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EndpointStorageContainer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub_endpoint_storage_container"],
			TypeName:         "azurerm_iothub_endpoint_storage_container",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EndpointStorageContainer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Enrichment",
	}:
		if err := (&controllersiothub.EnrichmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Enrichment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub_enrichment"],
			TypeName:         "azurerm_iothub_enrichment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Enrichment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FallbackRoute",
	}:
		if err := (&controllersiothub.FallbackRouteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FallbackRoute"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub_fallback_route"],
			TypeName:         "azurerm_iothub_fallback_route",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FallbackRoute")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Route",
	}:
		if err := (&controllersiothub.RouteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Route"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub_route"],
			TypeName:         "azurerm_iothub_route",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Route")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SharedAccessPolicy",
	}:
		if err := (&controllersiothub.SharedAccessPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SharedAccessPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_iothub_shared_access_policy"],
			TypeName:         "azurerm_iothub_shared_access_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SharedAccessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ip.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersip.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_ip_group"],
			TypeName:         "azurerm_ip_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyVault",
	}:
		if err := (&controllerskeyvault.KeyVaultReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("KeyVault"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_key_vault"],
			TypeName:         "azurerm_key_vault",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KeyVault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessPolicy",
	}:
		if err := (&controllerskeyvault.AccessPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccessPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_key_vault_access_policy"],
			TypeName:         "azurerm_key_vault_access_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&controllerskeyvault.CertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Certificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_key_vault_certificate"],
			TypeName:         "azurerm_key_vault_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CertificateIssuer",
	}:
		if err := (&controllerskeyvault.CertificateIssuerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CertificateIssuer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_key_vault_certificate_issuer"],
			TypeName:         "azurerm_key_vault_certificate_issuer",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CertificateIssuer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Key",
	}:
		if err := (&controllerskeyvault.KeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Key"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_key_vault_key"],
			TypeName:         "azurerm_key_vault_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Key")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedHardwareSecurityModule",
	}:
		if err := (&controllerskeyvault.ManagedHardwareSecurityModuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagedHardwareSecurityModule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_key_vault_managed_hardware_security_module"],
			TypeName:         "azurerm_key_vault_managed_hardware_security_module",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagedHardwareSecurityModule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Secret",
	}:
		if err := (&controllerskeyvault.SecretReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Secret"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_key_vault_secret"],
			TypeName:         "azurerm_key_vault_secret",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Secret")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kubernetescluster.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KubernetesCluster",
	}:
		if err := (&controllerskubernetescluster.KubernetesClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("KubernetesCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_kubernetes_cluster"],
			TypeName:         "azurerm_kubernetes_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "KubernetesCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kubernetescluster.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NodePool",
	}:
		if err := (&controllerskubernetescluster.NodePoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NodePool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_kubernetes_cluster_node_pool"],
			TypeName:         "azurerm_kubernetes_cluster_node_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NodePool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AttachedDatabaseConfiguration",
	}:
		if err := (&controllerskusto.AttachedDatabaseConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AttachedDatabaseConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_kusto_attached_database_configuration"],
			TypeName:         "azurerm_kusto_attached_database_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AttachedDatabaseConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllerskusto.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_kusto_cluster"],
			TypeName:         "azurerm_kusto_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterCustomerManagedKey",
	}:
		if err := (&controllerskusto.ClusterCustomerManagedKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterCustomerManagedKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_kusto_cluster_customer_managed_key"],
			TypeName:         "azurerm_kusto_cluster_customer_managed_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterCustomerManagedKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterPrincipalAssignment",
	}:
		if err := (&controllerskusto.ClusterPrincipalAssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterPrincipalAssignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_kusto_cluster_principal_assignment"],
			TypeName:         "azurerm_kusto_cluster_principal_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterPrincipalAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&controllerskusto.DatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Database"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_kusto_database"],
			TypeName:         "azurerm_kusto_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabasePrincipal",
	}:
		if err := (&controllerskusto.DatabasePrincipalReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatabasePrincipal"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_kusto_database_principal"],
			TypeName:         "azurerm_kusto_database_principal",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatabasePrincipal")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabasePrincipalAssignment",
	}:
		if err := (&controllerskusto.DatabasePrincipalAssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatabasePrincipalAssignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_kusto_database_principal_assignment"],
			TypeName:         "azurerm_kusto_database_principal_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatabasePrincipalAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventgridDataConnection",
	}:
		if err := (&controllerskusto.EventgridDataConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventgridDataConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_kusto_eventgrid_data_connection"],
			TypeName:         "azurerm_kusto_eventgrid_data_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventgridDataConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventhubDataConnection",
	}:
		if err := (&controllerskusto.EventhubDataConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EventhubDataConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_kusto_eventhub_data_connection"],
			TypeName:         "azurerm_kusto_eventhub_data_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EventhubDataConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IothubDataConnection",
	}:
		if err := (&controllerskusto.IothubDataConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IothubDataConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_kusto_iothub_data_connection"],
			TypeName:         "azurerm_kusto_iothub_data_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IothubDataConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Lb",
	}:
		if err := (&controllerslb.LbReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Lb"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_lb"],
			TypeName:         "azurerm_lb",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Lb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendAddressPool",
	}:
		if err := (&controllerslb.BackendAddressPoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BackendAddressPool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_lb_backend_address_pool"],
			TypeName:         "azurerm_lb_backend_address_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackendAddressPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendAddressPoolAddress",
	}:
		if err := (&controllerslb.BackendAddressPoolAddressReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BackendAddressPoolAddress"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_lb_backend_address_pool_address"],
			TypeName:         "azurerm_lb_backend_address_pool_address",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BackendAddressPoolAddress")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NatPool",
	}:
		if err := (&controllerslb.NatPoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NatPool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_lb_nat_pool"],
			TypeName:         "azurerm_lb_nat_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NatPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NatRule",
	}:
		if err := (&controllerslb.NatRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NatRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_lb_nat_rule"],
			TypeName:         "azurerm_lb_nat_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NatRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OutboundRule",
	}:
		if err := (&controllerslb.OutboundRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("OutboundRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_lb_outbound_rule"],
			TypeName:         "azurerm_lb_outbound_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "OutboundRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Probe",
	}:
		if err := (&controllerslb.ProbeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Probe"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_lb_probe"],
			TypeName:         "azurerm_lb_probe",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Probe")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&controllerslb.RuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Rule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_lb_rule"],
			TypeName:         "azurerm_lb_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lighthouse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Assignment",
	}:
		if err := (&controllerslighthouse.AssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Assignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_lighthouse_assignment"],
			TypeName:         "azurerm_lighthouse_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Assignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lighthouse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Definition",
	}:
		if err := (&controllerslighthouse.DefinitionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Definition"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_lighthouse_definition"],
			TypeName:         "azurerm_lighthouse_definition",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Definition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "linux.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualMachine",
	}:
		if err := (&controllerslinux.VirtualMachineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualMachine"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_linux_virtual_machine"],
			TypeName:         "azurerm_linux_virtual_machine",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "linux.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualMachineScaleSet",
	}:
		if err := (&controllerslinux.VirtualMachineScaleSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualMachineScaleSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_linux_virtual_machine_scale_set"],
			TypeName:         "azurerm_linux_virtual_machine_scale_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualMachineScaleSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "local.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkGateway",
	}:
		if err := (&controllerslocal.NetworkGatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkGateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_local_network_gateway"],
			TypeName:         "azurerm_local_network_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersloganalytics.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_log_analytics_cluster"],
			TypeName:         "azurerm_log_analytics_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterCustomerManagedKey",
	}:
		if err := (&controllersloganalytics.ClusterCustomerManagedKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ClusterCustomerManagedKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_log_analytics_cluster_customer_managed_key"],
			TypeName:         "azurerm_log_analytics_cluster_customer_managed_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ClusterCustomerManagedKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataExportRule",
	}:
		if err := (&controllersloganalytics.DataExportRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataExportRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_log_analytics_data_export_rule"],
			TypeName:         "azurerm_log_analytics_data_export_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataExportRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasourceWindowsEvent",
	}:
		if err := (&controllersloganalytics.DatasourceWindowsEventReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatasourceWindowsEvent"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_log_analytics_datasource_windows_event"],
			TypeName:         "azurerm_log_analytics_datasource_windows_event",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatasourceWindowsEvent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasourceWindowsPerformanceCounter",
	}:
		if err := (&controllersloganalytics.DatasourceWindowsPerformanceCounterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatasourceWindowsPerformanceCounter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_log_analytics_datasource_windows_performance_counter"],
			TypeName:         "azurerm_log_analytics_datasource_windows_performance_counter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatasourceWindowsPerformanceCounter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LinkedService",
	}:
		if err := (&controllersloganalytics.LinkedServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LinkedService"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_log_analytics_linked_service"],
			TypeName:         "azurerm_log_analytics_linked_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LinkedService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LinkedStorageAccount",
	}:
		if err := (&controllersloganalytics.LinkedStorageAccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LinkedStorageAccount"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_log_analytics_linked_storage_account"],
			TypeName:         "azurerm_log_analytics_linked_storage_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LinkedStorageAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SavedSearch",
	}:
		if err := (&controllersloganalytics.SavedSearchReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SavedSearch"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_log_analytics_saved_search"],
			TypeName:         "azurerm_log_analytics_saved_search",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SavedSearch")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Solution",
	}:
		if err := (&controllersloganalytics.SolutionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Solution"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_log_analytics_solution"],
			TypeName:         "azurerm_log_analytics_solution",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Solution")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StorageInsights",
	}:
		if err := (&controllersloganalytics.StorageInsightsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StorageInsights"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_log_analytics_storage_insights"],
			TypeName:         "azurerm_log_analytics_storage_insights",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StorageInsights")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workspace",
	}:
		if err := (&controllersloganalytics.WorkspaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Workspace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_log_analytics_workspace"],
			TypeName:         "azurerm_log_analytics_workspace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Workspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActionCustom",
	}:
		if err := (&controllerslogicapp.ActionCustomReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ActionCustom"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_logic_app_action_custom"],
			TypeName:         "azurerm_logic_app_action_custom",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ActionCustom")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActionHTTP",
	}:
		if err := (&controllerslogicapp.ActionHTTPReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ActionHTTP"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_logic_app_action_http"],
			TypeName:         "azurerm_logic_app_action_http",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ActionHTTP")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IntegrationAccount",
	}:
		if err := (&controllerslogicapp.IntegrationAccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("IntegrationAccount"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_logic_app_integration_account"],
			TypeName:         "azurerm_logic_app_integration_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "IntegrationAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TriggerCustom",
	}:
		if err := (&controllerslogicapp.TriggerCustomReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TriggerCustom"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_logic_app_trigger_custom"],
			TypeName:         "azurerm_logic_app_trigger_custom",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TriggerCustom")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TriggerHTTPRequest",
	}:
		if err := (&controllerslogicapp.TriggerHTTPRequestReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TriggerHTTPRequest"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_logic_app_trigger_http_request"],
			TypeName:         "azurerm_logic_app_trigger_http_request",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TriggerHTTPRequest")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TriggerRecurrence",
	}:
		if err := (&controllerslogicapp.TriggerRecurrenceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TriggerRecurrence"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_logic_app_trigger_recurrence"],
			TypeName:         "azurerm_logic_app_trigger_recurrence",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TriggerRecurrence")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workflow",
	}:
		if err := (&controllerslogicapp.WorkflowReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Workflow"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_logic_app_workflow"],
			TypeName:         "azurerm_logic_app_workflow",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Workflow")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "machine.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LearningComputeCluster",
	}:
		if err := (&controllersmachine.LearningComputeClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LearningComputeCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_machine_learning_compute_cluster"],
			TypeName:         "azurerm_machine_learning_compute_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LearningComputeCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "machine.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LearningInferenceCluster",
	}:
		if err := (&controllersmachine.LearningInferenceClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LearningInferenceCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_machine_learning_inference_cluster"],
			TypeName:         "azurerm_machine_learning_inference_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LearningInferenceCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "machine.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LearningWorkspace",
	}:
		if err := (&controllersmachine.LearningWorkspaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LearningWorkspace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_machine_learning_workspace"],
			TypeName:         "azurerm_machine_learning_workspace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LearningWorkspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "maintenance.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssignmentDedicatedHost",
	}:
		if err := (&controllersmaintenance.AssignmentDedicatedHostReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AssignmentDedicatedHost"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_maintenance_assignment_dedicated_host"],
			TypeName:         "azurerm_maintenance_assignment_dedicated_host",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AssignmentDedicatedHost")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "maintenance.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssignmentVirtualMachine",
	}:
		if err := (&controllersmaintenance.AssignmentVirtualMachineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AssignmentVirtualMachine"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_maintenance_assignment_virtual_machine"],
			TypeName:         "azurerm_maintenance_assignment_virtual_machine",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AssignmentVirtualMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "maintenance.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&controllersmaintenance.ConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Configuration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_maintenance_configuration"],
			TypeName:         "azurerm_maintenance_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "managed.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&controllersmanaged.ApplicationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Application"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_managed_application"],
			TypeName:         "azurerm_managed_application",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "managed.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationDefinition",
	}:
		if err := (&controllersmanaged.ApplicationDefinitionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApplicationDefinition"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_managed_application_definition"],
			TypeName:         "azurerm_managed_application_definition",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApplicationDefinition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "managed.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Disk",
	}:
		if err := (&controllersmanaged.DiskReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Disk"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_managed_disk"],
			TypeName:         "azurerm_managed_disk",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Disk")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "management.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersmanagement.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_management_group"],
			TypeName:         "azurerm_management_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "management.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupPolicyAssignment",
	}:
		if err := (&controllersmanagement.GroupPolicyAssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GroupPolicyAssignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_management_group_policy_assignment"],
			TypeName:         "azurerm_management_group_policy_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupPolicyAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "management.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupSubscriptionAssociation",
	}:
		if err := (&controllersmanagement.GroupSubscriptionAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GroupSubscriptionAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_management_group_subscription_association"],
			TypeName:         "azurerm_management_group_subscription_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupSubscriptionAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "management.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupTemplateDeployment",
	}:
		if err := (&controllersmanagement.GroupTemplateDeploymentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GroupTemplateDeployment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_management_group_template_deployment"],
			TypeName:         "azurerm_management_group_template_deployment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupTemplateDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "management.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Lock",
	}:
		if err := (&controllersmanagement.LockReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Lock"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_management_lock"],
			TypeName:         "azurerm_management_lock",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Lock")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "maps.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllersmaps.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_maps_account"],
			TypeName:         "azurerm_maps_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mariadb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&controllersmariadb.ConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Configuration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mariadb_configuration"],
			TypeName:         "azurerm_mariadb_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mariadb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&controllersmariadb.DatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Database"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mariadb_database"],
			TypeName:         "azurerm_mariadb_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mariadb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&controllersmariadb.FirewallRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FirewallRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mariadb_firewall_rule"],
			TypeName:         "azurerm_mariadb_firewall_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mariadb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Server",
	}:
		if err := (&controllersmariadb.ServerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Server"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mariadb_server"],
			TypeName:         "azurerm_mariadb_server",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Server")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mariadb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNetworkRule",
	}:
		if err := (&controllersmariadb.VirtualNetworkRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualNetworkRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mariadb_virtual_network_rule"],
			TypeName:         "azurerm_mariadb_virtual_network_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualNetworkRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "marketplace.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Agreement",
	}:
		if err := (&controllersmarketplace.AgreementReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Agreement"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_marketplace_agreement"],
			TypeName:         "azurerm_marketplace_agreement",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Agreement")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Asset",
	}:
		if err := (&controllersmedia.AssetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Asset"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_media_asset"],
			TypeName:         "azurerm_media_asset",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Asset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssetFilter",
	}:
		if err := (&controllersmedia.AssetFilterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AssetFilter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_media_asset_filter"],
			TypeName:         "azurerm_media_asset_filter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AssetFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ContentKeyPolicy",
	}:
		if err := (&controllersmedia.ContentKeyPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ContentKeyPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_media_content_key_policy"],
			TypeName:         "azurerm_media_content_key_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ContentKeyPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Job",
	}:
		if err := (&controllersmedia.JobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Job"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_media_job"],
			TypeName:         "azurerm_media_job",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Job")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LiveEvent",
	}:
		if err := (&controllersmedia.LiveEventReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LiveEvent"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_media_live_event"],
			TypeName:         "azurerm_media_live_event",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LiveEvent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LiveEventOutput",
	}:
		if err := (&controllersmedia.LiveEventOutputReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LiveEventOutput"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_media_live_event_output"],
			TypeName:         "azurerm_media_live_event_output",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LiveEventOutput")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesAccount",
	}:
		if err := (&controllersmedia.ServicesAccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServicesAccount"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_media_services_account"],
			TypeName:         "azurerm_media_services_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServicesAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StreamingEndpoint",
	}:
		if err := (&controllersmedia.StreamingEndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StreamingEndpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_media_streaming_endpoint"],
			TypeName:         "azurerm_media_streaming_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StreamingEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StreamingLocator",
	}:
		if err := (&controllersmedia.StreamingLocatorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StreamingLocator"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_media_streaming_locator"],
			TypeName:         "azurerm_media_streaming_locator",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StreamingLocator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StreamingPolicy",
	}:
		if err := (&controllersmedia.StreamingPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("StreamingPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_media_streaming_policy"],
			TypeName:         "azurerm_media_streaming_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "StreamingPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Transform",
	}:
		if err := (&controllersmedia.TransformReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Transform"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_media_transform"],
			TypeName:         "azurerm_media_transform",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Transform")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AadDiagnosticSetting",
	}:
		if err := (&controllersmonitor.AadDiagnosticSettingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AadDiagnosticSetting"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_monitor_aad_diagnostic_setting"],
			TypeName:         "azurerm_monitor_aad_diagnostic_setting",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AadDiagnosticSetting")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActionGroup",
	}:
		if err := (&controllersmonitor.ActionGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ActionGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_monitor_action_group"],
			TypeName:         "azurerm_monitor_action_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ActionGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActionRuleActionGroup",
	}:
		if err := (&controllersmonitor.ActionRuleActionGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ActionRuleActionGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_monitor_action_rule_action_group"],
			TypeName:         "azurerm_monitor_action_rule_action_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ActionRuleActionGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActionRuleSuppression",
	}:
		if err := (&controllersmonitor.ActionRuleSuppressionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ActionRuleSuppression"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_monitor_action_rule_suppression"],
			TypeName:         "azurerm_monitor_action_rule_suppression",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ActionRuleSuppression")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActivityLogAlert",
	}:
		if err := (&controllersmonitor.ActivityLogAlertReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ActivityLogAlert"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_monitor_activity_log_alert"],
			TypeName:         "azurerm_monitor_activity_log_alert",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ActivityLogAlert")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AutoscaleSetting",
	}:
		if err := (&controllersmonitor.AutoscaleSettingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AutoscaleSetting"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_monitor_autoscale_setting"],
			TypeName:         "azurerm_monitor_autoscale_setting",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AutoscaleSetting")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DiagnosticSetting",
	}:
		if err := (&controllersmonitor.DiagnosticSettingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DiagnosticSetting"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_monitor_diagnostic_setting"],
			TypeName:         "azurerm_monitor_diagnostic_setting",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DiagnosticSetting")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogProfile",
	}:
		if err := (&controllersmonitor.LogProfileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LogProfile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_monitor_log_profile"],
			TypeName:         "azurerm_monitor_log_profile",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LogProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MetricAlert",
	}:
		if err := (&controllersmonitor.MetricAlertReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MetricAlert"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_monitor_metric_alert"],
			TypeName:         "azurerm_monitor_metric_alert",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MetricAlert")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScheduledQueryRulesAlert",
	}:
		if err := (&controllersmonitor.ScheduledQueryRulesAlertReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ScheduledQueryRulesAlert"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_monitor_scheduled_query_rules_alert"],
			TypeName:         "azurerm_monitor_scheduled_query_rules_alert",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ScheduledQueryRulesAlert")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScheduledQueryRulesLog",
	}:
		if err := (&controllersmonitor.ScheduledQueryRulesLogReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ScheduledQueryRulesLog"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_monitor_scheduled_query_rules_log"],
			TypeName:         "azurerm_monitor_scheduled_query_rules_log",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ScheduledQueryRulesLog")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SmartDetectorAlertRule",
	}:
		if err := (&controllersmonitor.SmartDetectorAlertRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SmartDetectorAlertRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_monitor_smart_detector_alert_rule"],
			TypeName:         "azurerm_monitor_smart_detector_alert_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SmartDetectorAlertRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&controllersmssql.DatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Database"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_database"],
			TypeName:         "azurerm_mssql_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseExtendedAuditingPolicy",
	}:
		if err := (&controllersmssql.DatabaseExtendedAuditingPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatabaseExtendedAuditingPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_database_extended_auditing_policy"],
			TypeName:         "azurerm_mssql_database_extended_auditing_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatabaseExtendedAuditingPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseVulnerabilityAssessmentRuleBaseline",
	}:
		if err := (&controllersmssql.DatabaseVulnerabilityAssessmentRuleBaselineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DatabaseVulnerabilityAssessmentRuleBaseline"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_database_vulnerability_assessment_rule_baseline"],
			TypeName:         "azurerm_mssql_database_vulnerability_assessment_rule_baseline",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DatabaseVulnerabilityAssessmentRuleBaseline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Elasticpool",
	}:
		if err := (&controllersmssql.ElasticpoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Elasticpool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_elasticpool"],
			TypeName:         "azurerm_mssql_elasticpool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Elasticpool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&controllersmssql.FirewallRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FirewallRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_firewall_rule"],
			TypeName:         "azurerm_mssql_firewall_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobAgent",
	}:
		if err := (&controllersmssql.JobAgentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("JobAgent"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_job_agent"],
			TypeName:         "azurerm_mssql_job_agent",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "JobAgent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobCredential",
	}:
		if err := (&controllersmssql.JobCredentialReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("JobCredential"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_job_credential"],
			TypeName:         "azurerm_mssql_job_credential",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "JobCredential")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Server",
	}:
		if err := (&controllersmssql.ServerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Server"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_server"],
			TypeName:         "azurerm_mssql_server",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Server")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerExtendedAuditingPolicy",
	}:
		if err := (&controllersmssql.ServerExtendedAuditingPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServerExtendedAuditingPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_server_extended_auditing_policy"],
			TypeName:         "azurerm_mssql_server_extended_auditing_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServerExtendedAuditingPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerSecurityAlertPolicy",
	}:
		if err := (&controllersmssql.ServerSecurityAlertPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServerSecurityAlertPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_server_security_alert_policy"],
			TypeName:         "azurerm_mssql_server_security_alert_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServerSecurityAlertPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerTransparentDataEncryption",
	}:
		if err := (&controllersmssql.ServerTransparentDataEncryptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServerTransparentDataEncryption"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_server_transparent_data_encryption"],
			TypeName:         "azurerm_mssql_server_transparent_data_encryption",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServerTransparentDataEncryption")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerVulnerabilityAssessment",
	}:
		if err := (&controllersmssql.ServerVulnerabilityAssessmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServerVulnerabilityAssessment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_server_vulnerability_assessment"],
			TypeName:         "azurerm_mssql_server_vulnerability_assessment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServerVulnerabilityAssessment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualMachine",
	}:
		if err := (&controllersmssql.VirtualMachineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualMachine"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_virtual_machine"],
			TypeName:         "azurerm_mssql_virtual_machine",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNetworkRule",
	}:
		if err := (&controllersmssql.VirtualNetworkRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualNetworkRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mssql_virtual_network_rule"],
			TypeName:         "azurerm_mssql_virtual_network_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualNetworkRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActiveDirectoryAdministrator",
	}:
		if err := (&controllersmysql.ActiveDirectoryAdministratorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ActiveDirectoryAdministrator"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mysql_active_directory_administrator"],
			TypeName:         "azurerm_mysql_active_directory_administrator",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ActiveDirectoryAdministrator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&controllersmysql.ConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Configuration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mysql_configuration"],
			TypeName:         "azurerm_mysql_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&controllersmysql.DatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Database"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mysql_database"],
			TypeName:         "azurerm_mysql_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&controllersmysql.FirewallRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FirewallRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mysql_firewall_rule"],
			TypeName:         "azurerm_mysql_firewall_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Server",
	}:
		if err := (&controllersmysql.ServerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Server"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mysql_server"],
			TypeName:         "azurerm_mysql_server",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Server")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerKey",
	}:
		if err := (&controllersmysql.ServerKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServerKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mysql_server_key"],
			TypeName:         "azurerm_mysql_server_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServerKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNetworkRule",
	}:
		if err := (&controllersmysql.VirtualNetworkRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualNetworkRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_mysql_virtual_network_rule"],
			TypeName:         "azurerm_mysql_virtual_network_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualNetworkRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nat.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&controllersnat.GatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Gateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_nat_gateway"],
			TypeName:         "azurerm_nat_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nat.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayPublicIPAssociation",
	}:
		if err := (&controllersnat.GatewayPublicIPAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GatewayPublicIPAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_nat_gateway_public_ip_association"],
			TypeName:         "azurerm_nat_gateway_public_ip_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GatewayPublicIPAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nat.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayPublicIPPrefixAssociation",
	}:
		if err := (&controllersnat.GatewayPublicIPPrefixAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GatewayPublicIPPrefixAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_nat_gateway_public_ip_prefix_association"],
			TypeName:         "azurerm_nat_gateway_public_ip_prefix_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GatewayPublicIPPrefixAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "netapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllersnetapp.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_netapp_account"],
			TypeName:         "azurerm_netapp_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "netapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Pool",
	}:
		if err := (&controllersnetapp.PoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Pool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_netapp_pool"],
			TypeName:         "azurerm_netapp_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Pool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "netapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&controllersnetapp.SnapshotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Snapshot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_netapp_snapshot"],
			TypeName:         "azurerm_netapp_snapshot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "netapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Volume",
	}:
		if err := (&controllersnetapp.VolumeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Volume"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_netapp_volume"],
			TypeName:         "azurerm_netapp_volume",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Volume")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectionMonitor",
	}:
		if err := (&controllersnetwork.ConnectionMonitorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ConnectionMonitor"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_connection_monitor"],
			TypeName:         "azurerm_network_connection_monitor",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ConnectionMonitor")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DdosProtectionPlan",
	}:
		if err := (&controllersnetwork.DdosProtectionPlanReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DdosProtectionPlan"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_ddos_protection_plan"],
			TypeName:         "azurerm_network_ddos_protection_plan",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DdosProtectionPlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Interface",
	}:
		if err := (&controllersnetwork.InterfaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Interface"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_interface"],
			TypeName:         "azurerm_network_interface",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Interface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceApplicationGatewayBackendAddressPoolAssociation",
	}:
		if err := (&controllersnetwork.InterfaceApplicationGatewayBackendAddressPoolAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InterfaceApplicationGatewayBackendAddressPoolAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_interface_application_gateway_backend_address_pool_association"],
			TypeName:         "azurerm_network_interface_application_gateway_backend_address_pool_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InterfaceApplicationGatewayBackendAddressPoolAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceApplicationSecurityGroupAssociation",
	}:
		if err := (&controllersnetwork.InterfaceApplicationSecurityGroupAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InterfaceApplicationSecurityGroupAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_interface_application_security_group_association"],
			TypeName:         "azurerm_network_interface_application_security_group_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InterfaceApplicationSecurityGroupAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceBackendAddressPoolAssociation",
	}:
		if err := (&controllersnetwork.InterfaceBackendAddressPoolAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InterfaceBackendAddressPoolAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_interface_backend_address_pool_association"],
			TypeName:         "azurerm_network_interface_backend_address_pool_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InterfaceBackendAddressPoolAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceNATRuleAssociation",
	}:
		if err := (&controllersnetwork.InterfaceNATRuleAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InterfaceNATRuleAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_interface_nat_rule_association"],
			TypeName:         "azurerm_network_interface_nat_rule_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InterfaceNATRuleAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceSecurityGroupAssociation",
	}:
		if err := (&controllersnetwork.InterfaceSecurityGroupAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("InterfaceSecurityGroupAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_interface_security_group_association"],
			TypeName:         "azurerm_network_interface_security_group_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "InterfaceSecurityGroupAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PacketCapture",
	}:
		if err := (&controllersnetwork.PacketCaptureReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PacketCapture"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_packet_capture"],
			TypeName:         "azurerm_network_packet_capture",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PacketCapture")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Profile",
	}:
		if err := (&controllersnetwork.ProfileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Profile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_profile"],
			TypeName:         "azurerm_network_profile",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Profile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityGroup",
	}:
		if err := (&controllersnetwork.SecurityGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecurityGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_security_group"],
			TypeName:         "azurerm_network_security_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecurityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityRule",
	}:
		if err := (&controllersnetwork.SecurityRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SecurityRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_security_rule"],
			TypeName:         "azurerm_network_security_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SecurityRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Watcher",
	}:
		if err := (&controllersnetwork.WatcherReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Watcher"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_watcher"],
			TypeName:         "azurerm_network_watcher",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Watcher")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WatcherFlowLog",
	}:
		if err := (&controllersnetwork.WatcherFlowLogReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("WatcherFlowLog"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_network_watcher_flow_log"],
			TypeName:         "azurerm_network_watcher_flow_log",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "WatcherFlowLog")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notificationhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NotificationHub",
	}:
		if err := (&controllersnotificationhub.NotificationHubReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NotificationHub"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_notification_hub"],
			TypeName:         "azurerm_notification_hub",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NotificationHub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notificationhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AuthorizationRule",
	}:
		if err := (&controllersnotificationhub.AuthorizationRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AuthorizationRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_notification_hub_authorization_rule"],
			TypeName:         "azurerm_notification_hub_authorization_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notificationhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Namespace",
	}:
		if err := (&controllersnotificationhub.NamespaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Namespace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_notification_hub_namespace"],
			TypeName:         "azurerm_notification_hub_namespace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Namespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "orchestrated.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualMachineScaleSet",
	}:
		if err := (&controllersorchestrated.VirtualMachineScaleSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualMachineScaleSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_orchestrated_virtual_machine_scale_set"],
			TypeName:         "azurerm_orchestrated_virtual_machine_scale_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualMachineScaleSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "packet.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Capture",
	}:
		if err := (&controllerspacket.CaptureReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Capture"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_packet_capture"],
			TypeName:         "azurerm_packet_capture",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Capture")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "point.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ToSiteVPNGateway",
	}:
		if err := (&controllerspoint.ToSiteVPNGatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ToSiteVPNGateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_point_to_site_vpn_gateway"],
			TypeName:         "azurerm_point_to_site_vpn_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ToSiteVPNGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "policy.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Assignment",
	}:
		if err := (&controllerspolicy.AssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Assignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_policy_assignment"],
			TypeName:         "azurerm_policy_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Assignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "policy.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Definition",
	}:
		if err := (&controllerspolicy.DefinitionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Definition"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_policy_definition"],
			TypeName:         "azurerm_policy_definition",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Definition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "policy.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Remediation",
	}:
		if err := (&controllerspolicy.RemediationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Remediation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_policy_remediation"],
			TypeName:         "azurerm_policy_remediation",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Remediation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "policy.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SetDefinition",
	}:
		if err := (&controllerspolicy.SetDefinitionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SetDefinition"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_policy_set_definition"],
			TypeName:         "azurerm_policy_set_definition",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SetDefinition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "portal.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TenantConfiguration",
	}:
		if err := (&controllersportal.TenantConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TenantConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_portal_tenant_configuration"],
			TypeName:         "azurerm_portal_tenant_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TenantConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActiveDirectoryAdministrator",
	}:
		if err := (&controllerspostgresql.ActiveDirectoryAdministratorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ActiveDirectoryAdministrator"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_postgresql_active_directory_administrator"],
			TypeName:         "azurerm_postgresql_active_directory_administrator",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ActiveDirectoryAdministrator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&controllerspostgresql.ConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Configuration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_postgresql_configuration"],
			TypeName:         "azurerm_postgresql_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&controllerspostgresql.DatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Database"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_postgresql_database"],
			TypeName:         "azurerm_postgresql_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&controllerspostgresql.FirewallRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FirewallRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_postgresql_firewall_rule"],
			TypeName:         "azurerm_postgresql_firewall_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FlexibleServer",
	}:
		if err := (&controllerspostgresql.FlexibleServerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FlexibleServer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_postgresql_flexible_server"],
			TypeName:         "azurerm_postgresql_flexible_server",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FlexibleServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FlexibleServerFirewallRule",
	}:
		if err := (&controllerspostgresql.FlexibleServerFirewallRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FlexibleServerFirewallRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_postgresql_flexible_server_firewall_rule"],
			TypeName:         "azurerm_postgresql_flexible_server_firewall_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FlexibleServerFirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Server",
	}:
		if err := (&controllerspostgresql.ServerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Server"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_postgresql_server"],
			TypeName:         "azurerm_postgresql_server",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Server")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerKey",
	}:
		if err := (&controllerspostgresql.ServerKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServerKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_postgresql_server_key"],
			TypeName:         "azurerm_postgresql_server_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServerKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNetworkRule",
	}:
		if err := (&controllerspostgresql.VirtualNetworkRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualNetworkRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_postgresql_virtual_network_rule"],
			TypeName:         "azurerm_postgresql_virtual_network_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualNetworkRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "powerbi.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Embedded",
	}:
		if err := (&controllerspowerbi.EmbeddedReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Embedded"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_powerbi_embedded"],
			TypeName:         "azurerm_powerbi_embedded",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Embedded")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsARecord",
	}:
		if err := (&controllersprivate.DnsARecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DnsARecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_private_dns_a_record"],
			TypeName:         "azurerm_private_dns_a_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DnsARecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsAaaaRecord",
	}:
		if err := (&controllersprivate.DnsAaaaRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DnsAaaaRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_private_dns_aaaa_record"],
			TypeName:         "azurerm_private_dns_aaaa_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DnsAaaaRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsCnameRecord",
	}:
		if err := (&controllersprivate.DnsCnameRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DnsCnameRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_private_dns_cname_record"],
			TypeName:         "azurerm_private_dns_cname_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DnsCnameRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsMxRecord",
	}:
		if err := (&controllersprivate.DnsMxRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DnsMxRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_private_dns_mx_record"],
			TypeName:         "azurerm_private_dns_mx_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DnsMxRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsPtrRecord",
	}:
		if err := (&controllersprivate.DnsPtrRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DnsPtrRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_private_dns_ptr_record"],
			TypeName:         "azurerm_private_dns_ptr_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DnsPtrRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsSrvRecord",
	}:
		if err := (&controllersprivate.DnsSrvRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DnsSrvRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_private_dns_srv_record"],
			TypeName:         "azurerm_private_dns_srv_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DnsSrvRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsTxtRecord",
	}:
		if err := (&controllersprivate.DnsTxtRecordReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DnsTxtRecord"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_private_dns_txt_record"],
			TypeName:         "azurerm_private_dns_txt_record",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DnsTxtRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsZone",
	}:
		if err := (&controllersprivate.DnsZoneReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DnsZone"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_private_dns_zone"],
			TypeName:         "azurerm_private_dns_zone",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DnsZone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsZoneVirtualNetworkLink",
	}:
		if err := (&controllersprivate.DnsZoneVirtualNetworkLinkReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DnsZoneVirtualNetworkLink"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_private_dns_zone_virtual_network_link"],
			TypeName:         "azurerm_private_dns_zone_virtual_network_link",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DnsZoneVirtualNetworkLink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&controllersprivate.EndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Endpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_private_endpoint"],
			TypeName:         "azurerm_private_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LinkService",
	}:
		if err := (&controllersprivate.LinkServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LinkService"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_private_link_service"],
			TypeName:         "azurerm_private_link_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LinkService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "proximity.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlacementGroup",
	}:
		if err := (&controllersproximity.PlacementGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PlacementGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_proximity_placement_group"],
			TypeName:         "azurerm_proximity_placement_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PlacementGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "publicip.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PublicIP",
	}:
		if err := (&controllerspublicip.PublicIPReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PublicIP"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_public_ip"],
			TypeName:         "azurerm_public_ip",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PublicIP")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "publicip.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Prefix",
	}:
		if err := (&controllerspublicip.PrefixReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Prefix"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_public_ip_prefix"],
			TypeName:         "azurerm_public_ip_prefix",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Prefix")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "purview.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllerspurview.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_purview_account"],
			TypeName:         "azurerm_purview_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "recovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesVault",
	}:
		if err := (&controllersrecovery.ServicesVaultReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServicesVault"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_recovery_services_vault"],
			TypeName:         "azurerm_recovery_services_vault",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServicesVault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redis.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cache",
	}:
		if err := (&controllersredis.CacheReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cache"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_redis_cache"],
			TypeName:         "azurerm_redis_cache",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cache")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redis.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EnterpriseCluster",
	}:
		if err := (&controllersredis.EnterpriseClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EnterpriseCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_redis_enterprise_cluster"],
			TypeName:         "azurerm_redis_enterprise_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EnterpriseCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redis.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EnterpriseDatabase",
	}:
		if err := (&controllersredis.EnterpriseDatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EnterpriseDatabase"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_redis_enterprise_database"],
			TypeName:         "azurerm_redis_enterprise_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EnterpriseDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redis.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&controllersredis.FirewallRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FirewallRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_redis_firewall_rule"],
			TypeName:         "azurerm_redis_firewall_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redis.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LinkedServer",
	}:
		if err := (&controllersredis.LinkedServerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("LinkedServer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_redis_linked_server"],
			TypeName:         "azurerm_redis_linked_server",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "LinkedServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "relay.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HybridConnection",
	}:
		if err := (&controllersrelay.HybridConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HybridConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_relay_hybrid_connection"],
			TypeName:         "azurerm_relay_hybrid_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HybridConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "relay.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Namespace",
	}:
		if err := (&controllersrelay.NamespaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Namespace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_relay_namespace"],
			TypeName:         "azurerm_relay_namespace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Namespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&controllersresource.GroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Group"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_resource_group"],
			TypeName:         "azurerm_resource_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupPolicyAssignment",
	}:
		if err := (&controllersresource.GroupPolicyAssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GroupPolicyAssignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_resource_group_policy_assignment"],
			TypeName:         "azurerm_resource_group_policy_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupPolicyAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupTemplateDeployment",
	}:
		if err := (&controllersresource.GroupTemplateDeploymentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GroupTemplateDeployment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_resource_group_template_deployment"],
			TypeName:         "azurerm_resource_group_template_deployment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GroupTemplateDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyAssignment",
	}:
		if err := (&controllersresource.PolicyAssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PolicyAssignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_resource_policy_assignment"],
			TypeName:         "azurerm_resource_policy_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PolicyAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProviderRegistration",
	}:
		if err := (&controllersresource.ProviderRegistrationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProviderRegistration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_resource_provider_registration"],
			TypeName:         "azurerm_resource_provider_registration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProviderRegistration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "role.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Assignment",
	}:
		if err := (&controllersrole.AssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Assignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_role_assignment"],
			TypeName:         "azurerm_role_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Assignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "role.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Definition",
	}:
		if err := (&controllersrole.DefinitionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Definition"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_role_definition"],
			TypeName:         "azurerm_role_definition",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Definition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Route",
	}:
		if err := (&controllersroute.RouteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Route"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_route"],
			TypeName:         "azurerm_route",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Route")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Filter",
	}:
		if err := (&controllersroute.FilterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Filter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_route_filter"],
			TypeName:         "azurerm_route_filter",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Filter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&controllersroute.TableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Table"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_route_table"],
			TypeName:         "azurerm_route_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "search.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&controllerssearch.ServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Service"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_search_service"],
			TypeName:         "azurerm_search_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterAssessment",
	}:
		if err := (&controllerssecurity.CenterAssessmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CenterAssessment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_security_center_assessment"],
			TypeName:         "azurerm_security_center_assessment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CenterAssessment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterAssessmentMetadata",
	}:
		if err := (&controllerssecurity.CenterAssessmentMetadataReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CenterAssessmentMetadata"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_security_center_assessment_metadata"],
			TypeName:         "azurerm_security_center_assessment_metadata",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CenterAssessmentMetadata")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterAssessmentPolicy",
	}:
		if err := (&controllerssecurity.CenterAssessmentPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CenterAssessmentPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_security_center_assessment_policy"],
			TypeName:         "azurerm_security_center_assessment_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CenterAssessmentPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterAutoProvisioning",
	}:
		if err := (&controllerssecurity.CenterAutoProvisioningReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CenterAutoProvisioning"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_security_center_auto_provisioning"],
			TypeName:         "azurerm_security_center_auto_provisioning",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CenterAutoProvisioning")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterAutomation",
	}:
		if err := (&controllerssecurity.CenterAutomationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CenterAutomation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_security_center_automation"],
			TypeName:         "azurerm_security_center_automation",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CenterAutomation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterContact",
	}:
		if err := (&controllerssecurity.CenterContactReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CenterContact"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_security_center_contact"],
			TypeName:         "azurerm_security_center_contact",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CenterContact")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterServerVulnerabilityAssessment",
	}:
		if err := (&controllerssecurity.CenterServerVulnerabilityAssessmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CenterServerVulnerabilityAssessment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_security_center_server_vulnerability_assessment"],
			TypeName:         "azurerm_security_center_server_vulnerability_assessment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CenterServerVulnerabilityAssessment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterSetting",
	}:
		if err := (&controllerssecurity.CenterSettingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CenterSetting"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_security_center_setting"],
			TypeName:         "azurerm_security_center_setting",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CenterSetting")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterSubscriptionPricing",
	}:
		if err := (&controllerssecurity.CenterSubscriptionPricingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CenterSubscriptionPricing"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_security_center_subscription_pricing"],
			TypeName:         "azurerm_security_center_subscription_pricing",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CenterSubscriptionPricing")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterWorkspace",
	}:
		if err := (&controllerssecurity.CenterWorkspaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CenterWorkspace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_security_center_workspace"],
			TypeName:         "azurerm_security_center_workspace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CenterWorkspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertRuleFusion",
	}:
		if err := (&controllerssentinel.AlertRuleFusionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AlertRuleFusion"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sentinel_alert_rule_fusion"],
			TypeName:         "azurerm_sentinel_alert_rule_fusion",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AlertRuleFusion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertRuleMachineLearningBehaviorAnalytics",
	}:
		if err := (&controllerssentinel.AlertRuleMachineLearningBehaviorAnalyticsReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AlertRuleMachineLearningBehaviorAnalytics"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sentinel_alert_rule_machine_learning_behavior_analytics"],
			TypeName:         "azurerm_sentinel_alert_rule_machine_learning_behavior_analytics",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AlertRuleMachineLearningBehaviorAnalytics")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertRuleMsSecurityIncident",
	}:
		if err := (&controllerssentinel.AlertRuleMsSecurityIncidentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AlertRuleMsSecurityIncident"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sentinel_alert_rule_ms_security_incident"],
			TypeName:         "azurerm_sentinel_alert_rule_ms_security_incident",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AlertRuleMsSecurityIncident")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertRuleScheduled",
	}:
		if err := (&controllerssentinel.AlertRuleScheduledReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AlertRuleScheduled"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sentinel_alert_rule_scheduled"],
			TypeName:         "azurerm_sentinel_alert_rule_scheduled",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AlertRuleScheduled")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorAwsCloudTrail",
	}:
		if err := (&controllerssentinel.DataConnectorAwsCloudTrailReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataConnectorAwsCloudTrail"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sentinel_data_connector_aws_cloud_trail"],
			TypeName:         "azurerm_sentinel_data_connector_aws_cloud_trail",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataConnectorAwsCloudTrail")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorAzureActiveDirectory",
	}:
		if err := (&controllerssentinel.DataConnectorAzureActiveDirectoryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataConnectorAzureActiveDirectory"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sentinel_data_connector_azure_active_directory"],
			TypeName:         "azurerm_sentinel_data_connector_azure_active_directory",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataConnectorAzureActiveDirectory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorAzureAdvancedThreatProtection",
	}:
		if err := (&controllerssentinel.DataConnectorAzureAdvancedThreatProtectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataConnectorAzureAdvancedThreatProtection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sentinel_data_connector_azure_advanced_threat_protection"],
			TypeName:         "azurerm_sentinel_data_connector_azure_advanced_threat_protection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataConnectorAzureAdvancedThreatProtection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorAzureSecurityCenter",
	}:
		if err := (&controllerssentinel.DataConnectorAzureSecurityCenterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataConnectorAzureSecurityCenter"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sentinel_data_connector_azure_security_center"],
			TypeName:         "azurerm_sentinel_data_connector_azure_security_center",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataConnectorAzureSecurityCenter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorMicrosoftCloudAppSecurity",
	}:
		if err := (&controllerssentinel.DataConnectorMicrosoftCloudAppSecurityReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataConnectorMicrosoftCloudAppSecurity"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sentinel_data_connector_microsoft_cloud_app_security"],
			TypeName:         "azurerm_sentinel_data_connector_microsoft_cloud_app_security",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataConnectorMicrosoftCloudAppSecurity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorMicrosoftDefenderAdvancedThreatProtection",
	}:
		if err := (&controllerssentinel.DataConnectorMicrosoftDefenderAdvancedThreatProtectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataConnectorMicrosoftDefenderAdvancedThreatProtection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sentinel_data_connector_microsoft_defender_advanced_threat_protection"],
			TypeName:         "azurerm_sentinel_data_connector_microsoft_defender_advanced_threat_protection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataConnectorMicrosoftDefenderAdvancedThreatProtection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorOffice365",
	}:
		if err := (&controllerssentinel.DataConnectorOffice365Reconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataConnectorOffice365"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sentinel_data_connector_office_365"],
			TypeName:         "azurerm_sentinel_data_connector_office_365",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataConnectorOffice365")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorThreatIntelligence",
	}:
		if err := (&controllerssentinel.DataConnectorThreatIntelligenceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataConnectorThreatIntelligence"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sentinel_data_connector_threat_intelligence"],
			TypeName:         "azurerm_sentinel_data_connector_threat_intelligence",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataConnectorThreatIntelligence")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FabricCluster",
	}:
		if err := (&controllersservice.FabricClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FabricCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_service_fabric_cluster"],
			TypeName:         "azurerm_service_fabric_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FabricCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FabricMeshApplication",
	}:
		if err := (&controllersservice.FabricMeshApplicationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FabricMeshApplication"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_service_fabric_mesh_application"],
			TypeName:         "azurerm_service_fabric_mesh_application",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FabricMeshApplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FabricMeshLocalNetwork",
	}:
		if err := (&controllersservice.FabricMeshLocalNetworkReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FabricMeshLocalNetwork"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_service_fabric_mesh_local_network"],
			TypeName:         "azurerm_service_fabric_mesh_local_network",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FabricMeshLocalNetwork")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FabricMeshSecret",
	}:
		if err := (&controllersservice.FabricMeshSecretReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FabricMeshSecret"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_service_fabric_mesh_secret"],
			TypeName:         "azurerm_service_fabric_mesh_secret",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FabricMeshSecret")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FabricMeshSecretValue",
	}:
		if err := (&controllersservice.FabricMeshSecretValueReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FabricMeshSecretValue"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_service_fabric_mesh_secret_value"],
			TypeName:         "azurerm_service_fabric_mesh_secret_value",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FabricMeshSecretValue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Namespace",
	}:
		if err := (&controllersservicebus.NamespaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Namespace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_servicebus_namespace"],
			TypeName:         "azurerm_servicebus_namespace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Namespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamespaceAuthorizationRule",
	}:
		if err := (&controllersservicebus.NamespaceAuthorizationRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NamespaceAuthorizationRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_servicebus_namespace_authorization_rule"],
			TypeName:         "azurerm_servicebus_namespace_authorization_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NamespaceAuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamespaceDisasterRecoveryConfig",
	}:
		if err := (&controllersservicebus.NamespaceDisasterRecoveryConfigReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NamespaceDisasterRecoveryConfig"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_servicebus_namespace_disaster_recovery_config"],
			TypeName:         "azurerm_servicebus_namespace_disaster_recovery_config",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NamespaceDisasterRecoveryConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamespaceNetworkRuleSet",
	}:
		if err := (&controllersservicebus.NamespaceNetworkRuleSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NamespaceNetworkRuleSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_servicebus_namespace_network_rule_set"],
			TypeName:         "azurerm_servicebus_namespace_network_rule_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NamespaceNetworkRuleSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Queue",
	}:
		if err := (&controllersservicebus.QueueReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Queue"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_servicebus_queue"],
			TypeName:         "azurerm_servicebus_queue",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Queue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QueueAuthorizationRule",
	}:
		if err := (&controllersservicebus.QueueAuthorizationRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("QueueAuthorizationRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_servicebus_queue_authorization_rule"],
			TypeName:         "azurerm_servicebus_queue_authorization_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "QueueAuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subscription",
	}:
		if err := (&controllersservicebus.SubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Subscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_servicebus_subscription"],
			TypeName:         "azurerm_servicebus_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Subscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubscriptionRule",
	}:
		if err := (&controllersservicebus.SubscriptionRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SubscriptionRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_servicebus_subscription_rule"],
			TypeName:         "azurerm_servicebus_subscription_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SubscriptionRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&controllersservicebus.TopicReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Topic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_servicebus_topic"],
			TypeName:         "azurerm_servicebus_topic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicAuthorizationRule",
	}:
		if err := (&controllersservicebus.TopicAuthorizationRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TopicAuthorizationRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_servicebus_topic_authorization_rule"],
			TypeName:         "azurerm_servicebus_topic_authorization_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TopicAuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sharedimage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SharedImage",
	}:
		if err := (&controllerssharedimage.SharedImageReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SharedImage"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_shared_image"],
			TypeName:         "azurerm_shared_image",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SharedImage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sharedimage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gallery",
	}:
		if err := (&controllerssharedimage.GalleryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Gallery"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_shared_image_gallery"],
			TypeName:         "azurerm_shared_image_gallery",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gallery")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sharedimage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Version",
	}:
		if err := (&controllerssharedimage.VersionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Version"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_shared_image_version"],
			TypeName:         "azurerm_shared_image_version",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Version")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "signalr.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&controllerssignalr.ServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Service"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_signalr_service"],
			TypeName:         "azurerm_signalr_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "siterecovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Fabric",
	}:
		if err := (&controllerssiterecovery.FabricReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Fabric"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_site_recovery_fabric"],
			TypeName:         "azurerm_site_recovery_fabric",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Fabric")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "siterecovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkMapping",
	}:
		if err := (&controllerssiterecovery.NetworkMappingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkMapping"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_site_recovery_network_mapping"],
			TypeName:         "azurerm_site_recovery_network_mapping",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "siterecovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectionContainer",
	}:
		if err := (&controllerssiterecovery.ProtectionContainerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProtectionContainer"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_site_recovery_protection_container"],
			TypeName:         "azurerm_site_recovery_protection_container",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProtectionContainer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "siterecovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectionContainerMapping",
	}:
		if err := (&controllerssiterecovery.ProtectionContainerMappingReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ProtectionContainerMapping"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_site_recovery_protection_container_mapping"],
			TypeName:         "azurerm_site_recovery_protection_container_mapping",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ProtectionContainerMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "siterecovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicatedVm",
	}:
		if err := (&controllerssiterecovery.ReplicatedVmReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ReplicatedVm"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_site_recovery_replicated_vm"],
			TypeName:         "azurerm_site_recovery_replicated_vm",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReplicatedVm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "siterecovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicationPolicy",
	}:
		if err := (&controllerssiterecovery.ReplicationPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ReplicationPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_site_recovery_replication_policy"],
			TypeName:         "azurerm_site_recovery_replication_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ReplicationPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "snapshot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&controllerssnapshot.SnapshotReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Snapshot"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_snapshot"],
			TypeName:         "azurerm_snapshot",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spatial.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnchorsAccount",
	}:
		if err := (&controllersspatial.AnchorsAccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnchorsAccount"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_spatial_anchors_account"],
			TypeName:         "azurerm_spatial_anchors_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnchorsAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudActiveDeployment",
	}:
		if err := (&controllersspring.CloudActiveDeploymentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudActiveDeployment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_spring_cloud_active_deployment"],
			TypeName:         "azurerm_spring_cloud_active_deployment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudActiveDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudApp",
	}:
		if err := (&controllersspring.CloudAppReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudApp"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_spring_cloud_app"],
			TypeName:         "azurerm_spring_cloud_app",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudApp")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudAppCosmosdbAssociation",
	}:
		if err := (&controllersspring.CloudAppCosmosdbAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudAppCosmosdbAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_spring_cloud_app_cosmosdb_association"],
			TypeName:         "azurerm_spring_cloud_app_cosmosdb_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudAppCosmosdbAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudAppMysqlAssociation",
	}:
		if err := (&controllersspring.CloudAppMysqlAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudAppMysqlAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_spring_cloud_app_mysql_association"],
			TypeName:         "azurerm_spring_cloud_app_mysql_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudAppMysqlAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudAppRedisAssociation",
	}:
		if err := (&controllersspring.CloudAppRedisAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudAppRedisAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_spring_cloud_app_redis_association"],
			TypeName:         "azurerm_spring_cloud_app_redis_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudAppRedisAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudCertificate",
	}:
		if err := (&controllersspring.CloudCertificateReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudCertificate"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_spring_cloud_certificate"],
			TypeName:         "azurerm_spring_cloud_certificate",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudCustomDomain",
	}:
		if err := (&controllersspring.CloudCustomDomainReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudCustomDomain"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_spring_cloud_custom_domain"],
			TypeName:         "azurerm_spring_cloud_custom_domain",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudCustomDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudJavaDeployment",
	}:
		if err := (&controllersspring.CloudJavaDeploymentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudJavaDeployment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_spring_cloud_java_deployment"],
			TypeName:         "azurerm_spring_cloud_java_deployment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudJavaDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudService",
	}:
		if err := (&controllersspring.CloudServiceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("CloudService"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_spring_cloud_service"],
			TypeName:         "azurerm_spring_cloud_service",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "CloudService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActiveDirectoryAdministrator",
	}:
		if err := (&controllerssql.ActiveDirectoryAdministratorReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ActiveDirectoryAdministrator"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sql_active_directory_administrator"],
			TypeName:         "azurerm_sql_active_directory_administrator",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ActiveDirectoryAdministrator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&controllerssql.DatabaseReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Database"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sql_database"],
			TypeName:         "azurerm_sql_database",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Elasticpool",
	}:
		if err := (&controllerssql.ElasticpoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Elasticpool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sql_elasticpool"],
			TypeName:         "azurerm_sql_elasticpool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Elasticpool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FailoverGroup",
	}:
		if err := (&controllerssql.FailoverGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FailoverGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sql_failover_group"],
			TypeName:         "azurerm_sql_failover_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FailoverGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&controllerssql.FirewallRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FirewallRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sql_firewall_rule"],
			TypeName:         "azurerm_sql_firewall_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Server",
	}:
		if err := (&controllerssql.ServerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Server"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sql_server"],
			TypeName:         "azurerm_sql_server",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Server")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNetworkRule",
	}:
		if err := (&controllerssql.VirtualNetworkRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualNetworkRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_sql_virtual_network_rule"],
			TypeName:         "azurerm_sql_virtual_network_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualNetworkRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssh.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PublicKey",
	}:
		if err := (&controllersssh.PublicKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PublicKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_ssh_public_key"],
			TypeName:         "azurerm_ssh_public_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PublicKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stack.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HciCluster",
	}:
		if err := (&controllersstack.HciClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HciCluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_stack_hci_cluster"],
			TypeName:         "azurerm_stack_hci_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HciCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "static.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Site",
	}:
		if err := (&controllersstatic.SiteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Site"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_static_site"],
			TypeName:         "azurerm_static_site",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Site")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&controllersstorage.AccountReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Account"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_account"],
			TypeName:         "azurerm_storage_account",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountCustomerManagedKey",
	}:
		if err := (&controllersstorage.AccountCustomerManagedKeyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccountCustomerManagedKey"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_account_customer_managed_key"],
			TypeName:         "azurerm_storage_account_customer_managed_key",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountCustomerManagedKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountNetworkRules",
	}:
		if err := (&controllersstorage.AccountNetworkRulesReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AccountNetworkRules"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_account_network_rules"],
			TypeName:         "azurerm_storage_account_network_rules",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AccountNetworkRules")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Blob",
	}:
		if err := (&controllersstorage.BlobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Blob"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_blob"],
			TypeName:         "azurerm_storage_blob",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Blob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BlobInventoryPolicy",
	}:
		if err := (&controllersstorage.BlobInventoryPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("BlobInventoryPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_blob_inventory_policy"],
			TypeName:         "azurerm_storage_blob_inventory_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "BlobInventoryPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Container",
	}:
		if err := (&controllersstorage.ContainerReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Container"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_container"],
			TypeName:         "azurerm_storage_container",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Container")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataLakeGen2Filesystem",
	}:
		if err := (&controllersstorage.DataLakeGen2FilesystemReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataLakeGen2Filesystem"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_data_lake_gen2_filesystem"],
			TypeName:         "azurerm_storage_data_lake_gen2_filesystem",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataLakeGen2Filesystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataLakeGen2Path",
	}:
		if err := (&controllersstorage.DataLakeGen2PathReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DataLakeGen2Path"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_data_lake_gen2_path"],
			TypeName:         "azurerm_storage_data_lake_gen2_path",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DataLakeGen2Path")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EncryptionScope",
	}:
		if err := (&controllersstorage.EncryptionScopeReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("EncryptionScope"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_encryption_scope"],
			TypeName:         "azurerm_storage_encryption_scope",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "EncryptionScope")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagementPolicy",
	}:
		if err := (&controllersstorage.ManagementPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagementPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_management_policy"],
			TypeName:         "azurerm_storage_management_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagementPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ObjectReplication",
	}:
		if err := (&controllersstorage.ObjectReplicationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ObjectReplication"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_object_replication"],
			TypeName:         "azurerm_storage_object_replication",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ObjectReplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Queue",
	}:
		if err := (&controllersstorage.QueueReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Queue"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_queue"],
			TypeName:         "azurerm_storage_queue",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Queue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Share",
	}:
		if err := (&controllersstorage.ShareReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Share"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_share"],
			TypeName:         "azurerm_storage_share",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Share")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareDirectory",
	}:
		if err := (&controllersstorage.ShareDirectoryReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ShareDirectory"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_share_directory"],
			TypeName:         "azurerm_storage_share_directory",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ShareDirectory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareFile",
	}:
		if err := (&controllersstorage.ShareFileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ShareFile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_share_file"],
			TypeName:         "azurerm_storage_share_file",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ShareFile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Sync",
	}:
		if err := (&controllersstorage.SyncReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Sync"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_sync"],
			TypeName:         "azurerm_storage_sync",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Sync")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SyncCloudEndpoint",
	}:
		if err := (&controllersstorage.SyncCloudEndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SyncCloudEndpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_sync_cloud_endpoint"],
			TypeName:         "azurerm_storage_sync_cloud_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SyncCloudEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SyncGroup",
	}:
		if err := (&controllersstorage.SyncGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SyncGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_sync_group"],
			TypeName:         "azurerm_storage_sync_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SyncGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&controllersstorage.TableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Table"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_table"],
			TypeName:         "azurerm_storage_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableEntity",
	}:
		if err := (&controllersstorage.TableEntityReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TableEntity"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_storage_table_entity"],
			TypeName:         "azurerm_storage_table_entity",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TableEntity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsFunctionJavascriptUdf",
	}:
		if err := (&controllersstream.AnalyticsFunctionJavascriptUdfReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalyticsFunctionJavascriptUdf"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_stream_analytics_function_javascript_udf"],
			TypeName:         "azurerm_stream_analytics_function_javascript_udf",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalyticsFunctionJavascriptUdf")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsJob",
	}:
		if err := (&controllersstream.AnalyticsJobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalyticsJob"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_stream_analytics_job"],
			TypeName:         "azurerm_stream_analytics_job",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalyticsJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsOutputBlob",
	}:
		if err := (&controllersstream.AnalyticsOutputBlobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalyticsOutputBlob"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_stream_analytics_output_blob"],
			TypeName:         "azurerm_stream_analytics_output_blob",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalyticsOutputBlob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsOutputEventhub",
	}:
		if err := (&controllersstream.AnalyticsOutputEventhubReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalyticsOutputEventhub"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_stream_analytics_output_eventhub"],
			TypeName:         "azurerm_stream_analytics_output_eventhub",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalyticsOutputEventhub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsOutputMssql",
	}:
		if err := (&controllersstream.AnalyticsOutputMssqlReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalyticsOutputMssql"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_stream_analytics_output_mssql"],
			TypeName:         "azurerm_stream_analytics_output_mssql",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalyticsOutputMssql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsOutputServicebusQueue",
	}:
		if err := (&controllersstream.AnalyticsOutputServicebusQueueReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalyticsOutputServicebusQueue"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_stream_analytics_output_servicebus_queue"],
			TypeName:         "azurerm_stream_analytics_output_servicebus_queue",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalyticsOutputServicebusQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsOutputServicebusTopic",
	}:
		if err := (&controllersstream.AnalyticsOutputServicebusTopicReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalyticsOutputServicebusTopic"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_stream_analytics_output_servicebus_topic"],
			TypeName:         "azurerm_stream_analytics_output_servicebus_topic",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalyticsOutputServicebusTopic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsReferenceInputBlob",
	}:
		if err := (&controllersstream.AnalyticsReferenceInputBlobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalyticsReferenceInputBlob"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_stream_analytics_reference_input_blob"],
			TypeName:         "azurerm_stream_analytics_reference_input_blob",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalyticsReferenceInputBlob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsStreamInputBlob",
	}:
		if err := (&controllersstream.AnalyticsStreamInputBlobReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalyticsStreamInputBlob"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_stream_analytics_stream_input_blob"],
			TypeName:         "azurerm_stream_analytics_stream_input_blob",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalyticsStreamInputBlob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsStreamInputEventhub",
	}:
		if err := (&controllersstream.AnalyticsStreamInputEventhubReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalyticsStreamInputEventhub"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_stream_analytics_stream_input_eventhub"],
			TypeName:         "azurerm_stream_analytics_stream_input_eventhub",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalyticsStreamInputEventhub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsStreamInputIothub",
	}:
		if err := (&controllersstream.AnalyticsStreamInputIothubReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AnalyticsStreamInputIothub"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_stream_analytics_stream_input_iothub"],
			TypeName:         "azurerm_stream_analytics_stream_input_iothub",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AnalyticsStreamInputIothub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subnet",
	}:
		if err := (&controllerssubnet.SubnetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Subnet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_subnet"],
			TypeName:         "azurerm_subnet",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Subnet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NatGatewayAssociation",
	}:
		if err := (&controllerssubnet.NatGatewayAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NatGatewayAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_subnet_nat_gateway_association"],
			TypeName:         "azurerm_subnet_nat_gateway_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NatGatewayAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkSecurityGroupAssociation",
	}:
		if err := (&controllerssubnet.NetworkSecurityGroupAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkSecurityGroupAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_subnet_network_security_group_association"],
			TypeName:         "azurerm_subnet_network_security_group_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkSecurityGroupAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteTableAssociation",
	}:
		if err := (&controllerssubnet.RouteTableAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RouteTableAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_subnet_route_table_association"],
			TypeName:         "azurerm_subnet_route_table_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RouteTableAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceEndpointStoragePolicy",
	}:
		if err := (&controllerssubnet.ServiceEndpointStoragePolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServiceEndpointStoragePolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_subnet_service_endpoint_storage_policy"],
			TypeName:         "azurerm_subnet_service_endpoint_storage_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServiceEndpointStoragePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subscription.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subscription",
	}:
		if err := (&controllerssubscription.SubscriptionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Subscription"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_subscription"],
			TypeName:         "azurerm_subscription",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Subscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subscription.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyAssignment",
	}:
		if err := (&controllerssubscription.PolicyAssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PolicyAssignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_subscription_policy_assignment"],
			TypeName:         "azurerm_subscription_policy_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PolicyAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subscription.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TemplateDeployment",
	}:
		if err := (&controllerssubscription.TemplateDeploymentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TemplateDeployment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_subscription_template_deployment"],
			TypeName:         "azurerm_subscription_template_deployment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TemplateDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synapse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&controllerssynapse.FirewallRuleReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("FirewallRule"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_synapse_firewall_rule"],
			TypeName:         "azurerm_synapse_firewall_rule",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synapse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedPrivateEndpoint",
	}:
		if err := (&controllerssynapse.ManagedPrivateEndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ManagedPrivateEndpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_synapse_managed_private_endpoint"],
			TypeName:         "azurerm_synapse_managed_private_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ManagedPrivateEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synapse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RoleAssignment",
	}:
		if err := (&controllerssynapse.RoleAssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("RoleAssignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_synapse_role_assignment"],
			TypeName:         "azurerm_synapse_role_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "RoleAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synapse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SparkPool",
	}:
		if err := (&controllerssynapse.SparkPoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SparkPool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_synapse_spark_pool"],
			TypeName:         "azurerm_synapse_spark_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SparkPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synapse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlPool",
	}:
		if err := (&controllerssynapse.SqlPoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("SqlPool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_synapse_sql_pool"],
			TypeName:         "azurerm_synapse_sql_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "SqlPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synapse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workspace",
	}:
		if err := (&controllerssynapse.WorkspaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Workspace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_synapse_workspace"],
			TypeName:         "azurerm_synapse_workspace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Workspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "template.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Deployment",
	}:
		if err := (&controllerstemplate.DeploymentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Deployment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_template_deployment"],
			TypeName:         "azurerm_template_deployment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Deployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tenant.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TemplateDeployment",
	}:
		if err := (&controllerstenant.TemplateDeploymentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("TemplateDeployment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_tenant_template_deployment"],
			TypeName:         "azurerm_tenant_template_deployment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "TemplateDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "trafficmanager.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&controllerstrafficmanager.EndpointReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Endpoint"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_traffic_manager_endpoint"],
			TypeName:         "azurerm_traffic_manager_endpoint",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "trafficmanager.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Profile",
	}:
		if err := (&controllerstrafficmanager.ProfileReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Profile"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_traffic_manager_profile"],
			TypeName:         "azurerm_traffic_manager_profile",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Profile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "user.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssignedIdentity",
	}:
		if err := (&controllersuser.AssignedIdentityReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("AssignedIdentity"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_user_assigned_identity"],
			TypeName:         "azurerm_user_assigned_identity",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "AssignedIdentity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DesktopApplication",
	}:
		if err := (&controllersvirtual.DesktopApplicationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DesktopApplication"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_desktop_application"],
			TypeName:         "azurerm_virtual_desktop_application",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DesktopApplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DesktopApplicationGroup",
	}:
		if err := (&controllersvirtual.DesktopApplicationGroupReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DesktopApplicationGroup"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_desktop_application_group"],
			TypeName:         "azurerm_virtual_desktop_application_group",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DesktopApplicationGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DesktopHostPool",
	}:
		if err := (&controllersvirtual.DesktopHostPoolReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DesktopHostPool"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_desktop_host_pool"],
			TypeName:         "azurerm_virtual_desktop_host_pool",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DesktopHostPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DesktopWorkspace",
	}:
		if err := (&controllersvirtual.DesktopWorkspaceReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DesktopWorkspace"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_desktop_workspace"],
			TypeName:         "azurerm_virtual_desktop_workspace",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DesktopWorkspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DesktopWorkspaceApplicationGroupAssociation",
	}:
		if err := (&controllersvirtual.DesktopWorkspaceApplicationGroupAssociationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("DesktopWorkspaceApplicationGroupAssociation"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_desktop_workspace_application_group_association"],
			TypeName:         "azurerm_virtual_desktop_workspace_application_group_association",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "DesktopWorkspaceApplicationGroupAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Hub",
	}:
		if err := (&controllersvirtual.HubReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Hub"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_hub"],
			TypeName:         "azurerm_virtual_hub",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Hub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HubBGPConnection",
	}:
		if err := (&controllersvirtual.HubBGPConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HubBGPConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_hub_bgp_connection"],
			TypeName:         "azurerm_virtual_hub_bgp_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HubBGPConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HubConnection",
	}:
		if err := (&controllersvirtual.HubConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HubConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_hub_connection"],
			TypeName:         "azurerm_virtual_hub_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HubConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HubIP",
	}:
		if err := (&controllersvirtual.HubIPReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HubIP"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_hub_ip"],
			TypeName:         "azurerm_virtual_hub_ip",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HubIP")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HubRouteTable",
	}:
		if err := (&controllersvirtual.HubRouteTableReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HubRouteTable"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_hub_route_table"],
			TypeName:         "azurerm_virtual_hub_route_table",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HubRouteTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HubSecurityPartnerProvider",
	}:
		if err := (&controllersvirtual.HubSecurityPartnerProviderReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("HubSecurityPartnerProvider"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_hub_security_partner_provider"],
			TypeName:         "azurerm_virtual_hub_security_partner_provider",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "HubSecurityPartnerProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Machine",
	}:
		if err := (&controllersvirtual.MachineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Machine"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_machine"],
			TypeName:         "azurerm_virtual_machine",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Machine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MachineConfigurationPolicyAssignment",
	}:
		if err := (&controllersvirtual.MachineConfigurationPolicyAssignmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MachineConfigurationPolicyAssignment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_machine_configuration_policy_assignment"],
			TypeName:         "azurerm_virtual_machine_configuration_policy_assignment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MachineConfigurationPolicyAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MachineDataDiskAttachment",
	}:
		if err := (&controllersvirtual.MachineDataDiskAttachmentReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MachineDataDiskAttachment"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_machine_data_disk_attachment"],
			TypeName:         "azurerm_virtual_machine_data_disk_attachment",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MachineDataDiskAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MachineExtension",
	}:
		if err := (&controllersvirtual.MachineExtensionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MachineExtension"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_machine_extension"],
			TypeName:         "azurerm_virtual_machine_extension",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MachineExtension")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MachineScaleSet",
	}:
		if err := (&controllersvirtual.MachineScaleSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MachineScaleSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_machine_scale_set"],
			TypeName:         "azurerm_virtual_machine_scale_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MachineScaleSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MachineScaleSetExtension",
	}:
		if err := (&controllersvirtual.MachineScaleSetExtensionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("MachineScaleSetExtension"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_machine_scale_set_extension"],
			TypeName:         "azurerm_virtual_machine_scale_set_extension",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "MachineScaleSetExtension")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Network",
	}:
		if err := (&controllersvirtual.NetworkReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Network"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_network"],
			TypeName:         "azurerm_virtual_network",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Network")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkGateway",
	}:
		if err := (&controllersvirtual.NetworkGatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkGateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_network_gateway"],
			TypeName:         "azurerm_virtual_network_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkGatewayConnection",
	}:
		if err := (&controllersvirtual.NetworkGatewayConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkGatewayConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_network_gateway_connection"],
			TypeName:         "azurerm_virtual_network_gateway_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkGatewayConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkPeering",
	}:
		if err := (&controllersvirtual.NetworkPeeringReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("NetworkPeering"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_network_peering"],
			TypeName:         "azurerm_virtual_network_peering",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "NetworkPeering")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Wan",
	}:
		if err := (&controllersvirtual.WanReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Wan"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_virtual_wan"],
			TypeName:         "azurerm_virtual_wan",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Wan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vmware.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&controllersvmware.ClusterReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Cluster"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_vmware_cluster"],
			TypeName:         "azurerm_vmware_cluster",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vmware.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ExpressRouteAuthorization",
	}:
		if err := (&controllersvmware.ExpressRouteAuthorizationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ExpressRouteAuthorization"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_vmware_express_route_authorization"],
			TypeName:         "azurerm_vmware_express_route_authorization",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ExpressRouteAuthorization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vmware.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrivateCloud",
	}:
		if err := (&controllersvmware.PrivateCloudReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("PrivateCloud"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_vmware_private_cloud"],
			TypeName:         "azurerm_vmware_private_cloud",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "PrivateCloud")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&controllersvpn.GatewayReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Gateway"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_vpn_gateway"],
			TypeName:         "azurerm_vpn_gateway",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayConnection",
	}:
		if err := (&controllersvpn.GatewayConnectionReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("GatewayConnection"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_vpn_gateway_connection"],
			TypeName:         "azurerm_vpn_gateway_connection",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "GatewayConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerConfiguration",
	}:
		if err := (&controllersvpn.ServerConfigurationReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ServerConfiguration"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_vpn_server_configuration"],
			TypeName:         "azurerm_vpn_server_configuration",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ServerConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Site",
	}:
		if err := (&controllersvpn.SiteReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("Site"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_vpn_site"],
			TypeName:         "azurerm_vpn_site",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "Site")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "web.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationFirewallPolicy",
	}:
		if err := (&controllersweb.ApplicationFirewallPolicyReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("ApplicationFirewallPolicy"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_web_application_firewall_policy"],
			TypeName:         "azurerm_web_application_firewall_policy",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ApplicationFirewallPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "windows.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualMachine",
	}:
		if err := (&controllerswindows.VirtualMachineReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualMachine"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_windows_virtual_machine"],
			TypeName:         "azurerm_windows_virtual_machine",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "windows.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualMachineScaleSet",
	}:
		if err := (&controllerswindows.VirtualMachineScaleSetReconciler{
			Client:           mgr.GetClient(),
			Log:              ctrl.Log.WithName("controllers").WithName("VirtualMachineScaleSet"),
			Scheme:           mgr.GetScheme(),
			Gvk:              gvk,
			Provider:         azurerm.Provider(),
			Resource:         azurerm.Provider().ResourcesMap["azurerm_windows_virtual_machine_scale_set"],
			TypeName:         "azurerm_windows_virtual_machine_scale_set",
			WatchOnlyDefault: watchOnlyDefault,
		}).SetupWithManager(ctx, mgr, auditor); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "VirtualMachineScaleSet")
			return err
		}

	default:
		return fmt.Errorf("Invalid CRD")
	}

	return nil
}

func SetupWebhook(mgr manager.Manager, gvk schema.GroupVersionKind) error {
	switch gvk {
	case schema.GroupVersionKind{
		Group:   "advanced.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ThreatProtection",
	}:
		if err := (&advancedv1alpha1.ThreatProtection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ThreatProtection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "analysis.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesServer",
	}:
		if err := (&analysisv1alpha1.ServicesServer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServicesServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiManagement",
	}:
		if err := (&apimanagementv1alpha1.ApiManagement{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApiManagement")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Api",
	}:
		if err := (&apimanagementv1alpha1.Api{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Api")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiDiagnostic",
	}:
		if err := (&apimanagementv1alpha1.ApiDiagnostic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApiDiagnostic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiOperation",
	}:
		if err := (&apimanagementv1alpha1.ApiOperation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApiOperation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiOperationPolicy",
	}:
		if err := (&apimanagementv1alpha1.ApiOperationPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApiOperationPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiOperationTag",
	}:
		if err := (&apimanagementv1alpha1.ApiOperationTag{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApiOperationTag")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiPolicy",
	}:
		if err := (&apimanagementv1alpha1.ApiPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApiPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiSchema",
	}:
		if err := (&apimanagementv1alpha1.ApiSchema{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApiSchema")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApiVersionSet",
	}:
		if err := (&apimanagementv1alpha1.ApiVersionSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApiVersionSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AuthorizationServer",
	}:
		if err := (&apimanagementv1alpha1.AuthorizationServer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AuthorizationServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Backend",
	}:
		if err := (&apimanagementv1alpha1.Backend{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Backend")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&apimanagementv1alpha1.Certificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomDomain",
	}:
		if err := (&apimanagementv1alpha1.CustomDomain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CustomDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Diagnostic",
	}:
		if err := (&apimanagementv1alpha1.Diagnostic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Diagnostic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EmailTemplate",
	}:
		if err := (&apimanagementv1alpha1.EmailTemplate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EmailTemplate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&apimanagementv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupUser",
	}:
		if err := (&apimanagementv1alpha1.GroupUser{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupUser")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProviderAad",
	}:
		if err := (&apimanagementv1alpha1.IdentityProviderAad{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityProviderAad")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProviderAadb2c",
	}:
		if err := (&apimanagementv1alpha1.IdentityProviderAadb2c{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityProviderAadb2c")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProviderFacebook",
	}:
		if err := (&apimanagementv1alpha1.IdentityProviderFacebook{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityProviderFacebook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProviderGoogle",
	}:
		if err := (&apimanagementv1alpha1.IdentityProviderGoogle{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityProviderGoogle")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProviderMicrosoft",
	}:
		if err := (&apimanagementv1alpha1.IdentityProviderMicrosoft{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityProviderMicrosoft")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IdentityProviderTwitter",
	}:
		if err := (&apimanagementv1alpha1.IdentityProviderTwitter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IdentityProviderTwitter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Logger",
	}:
		if err := (&apimanagementv1alpha1.Logger{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Logger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamedValue",
	}:
		if err := (&apimanagementv1alpha1.NamedValue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NamedValue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OpenidConnectProvider",
	}:
		if err := (&apimanagementv1alpha1.OpenidConnectProvider{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OpenidConnectProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&apimanagementv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Product",
	}:
		if err := (&apimanagementv1alpha1.Product{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Product")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProductAPI",
	}:
		if err := (&apimanagementv1alpha1.ProductAPI{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProductAPI")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProductGroup",
	}:
		if err := (&apimanagementv1alpha1.ProductGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProductGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProductPolicy",
	}:
		if err := (&apimanagementv1alpha1.ProductPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProductPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Property",
	}:
		if err := (&apimanagementv1alpha1.Property{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Property")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RedisCache",
	}:
		if err := (&apimanagementv1alpha1.RedisCache{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RedisCache")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subscription",
	}:
		if err := (&apimanagementv1alpha1.Subscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Subscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "apimanagement.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "User",
	}:
		if err := (&apimanagementv1alpha1.User{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "User")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&appv1alpha1.Configuration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&appv1alpha1.Service{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceActiveSlot",
	}:
		if err := (&appv1alpha1.ServiceActiveSlot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceActiveSlot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceCertificate",
	}:
		if err := (&appv1alpha1.ServiceCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceCertificateBinding",
	}:
		if err := (&appv1alpha1.ServiceCertificateBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceCertificateBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceCertificateOrder",
	}:
		if err := (&appv1alpha1.ServiceCertificateOrder{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceCertificateOrder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceCustomHostnameBinding",
	}:
		if err := (&appv1alpha1.ServiceCustomHostnameBinding{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceCustomHostnameBinding")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceEnvironment",
	}:
		if err := (&appv1alpha1.ServiceEnvironment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceEnvironment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceEnvironmentV3",
	}:
		if err := (&appv1alpha1.ServiceEnvironmentV3{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceEnvironmentV3")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceHybridConnection",
	}:
		if err := (&appv1alpha1.ServiceHybridConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceHybridConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceManagedCertificate",
	}:
		if err := (&appv1alpha1.ServiceManagedCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceManagedCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicePlan",
	}:
		if err := (&appv1alpha1.ServicePlan{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServicePlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceSlot",
	}:
		if err := (&appv1alpha1.ServiceSlot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceSlot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceSlotVirtualNetworkSwiftConnection",
	}:
		if err := (&appv1alpha1.ServiceSlotVirtualNetworkSwiftConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceSlotVirtualNetworkSwiftConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceSourceControlToken",
	}:
		if err := (&appv1alpha1.ServiceSourceControlToken{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceSourceControlToken")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "app.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceVirtualNetworkSwiftConnection",
	}:
		if err := (&appv1alpha1.ServiceVirtualNetworkSwiftConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceVirtualNetworkSwiftConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&applicationv1alpha1.Gateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Insights",
	}:
		if err := (&applicationv1alpha1.Insights{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Insights")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InsightsAnalyticsItem",
	}:
		if err := (&applicationv1alpha1.InsightsAnalyticsItem{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InsightsAnalyticsItem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InsightsAPIKey",
	}:
		if err := (&applicationv1alpha1.InsightsAPIKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InsightsAPIKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InsightsSmartDetectionRule",
	}:
		if err := (&applicationv1alpha1.InsightsSmartDetectionRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InsightsSmartDetectionRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InsightsWebTest",
	}:
		if err := (&applicationv1alpha1.InsightsWebTest{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InsightsWebTest")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "application.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityGroup",
	}:
		if err := (&applicationv1alpha1.SecurityGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecurityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "attestation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Provider",
	}:
		if err := (&attestationv1alpha1.Provider{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Provider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&automationv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&automationv1alpha1.Certificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&automationv1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectionCertificate",
	}:
		if err := (&automationv1alpha1.ConnectionCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConnectionCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectionClassicCertificate",
	}:
		if err := (&automationv1alpha1.ConnectionClassicCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConnectionClassicCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectionServicePrincipal",
	}:
		if err := (&automationv1alpha1.ConnectionServicePrincipal{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConnectionServicePrincipal")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Credential",
	}:
		if err := (&automationv1alpha1.Credential{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Credential")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DscConfiguration",
	}:
		if err := (&automationv1alpha1.DscConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DscConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DscNodeconfiguration",
	}:
		if err := (&automationv1alpha1.DscNodeconfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DscNodeconfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobSchedule",
	}:
		if err := (&automationv1alpha1.JobSchedule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "JobSchedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Module",
	}:
		if err := (&automationv1alpha1.Module{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Module")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Runbook",
	}:
		if err := (&automationv1alpha1.Runbook{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Runbook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schedule",
	}:
		if err := (&automationv1alpha1.Schedule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Schedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VariableBool",
	}:
		if err := (&automationv1alpha1.VariableBool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VariableBool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VariableDatetime",
	}:
		if err := (&automationv1alpha1.VariableDatetime{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VariableDatetime")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VariableInt",
	}:
		if err := (&automationv1alpha1.VariableInt{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VariableInt")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "automation.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VariableString",
	}:
		if err := (&automationv1alpha1.VariableString{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VariableString")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "availability.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Set",
	}:
		if err := (&availabilityv1alpha1.Set{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Set")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ContainerStorageAccount",
	}:
		if err := (&backupv1alpha1.ContainerStorageAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ContainerStorageAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyFileShare",
	}:
		if err := (&backupv1alpha1.PolicyFileShare{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PolicyFileShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyVm",
	}:
		if err := (&backupv1alpha1.PolicyVm{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PolicyVm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectedFileShare",
	}:
		if err := (&backupv1alpha1.ProtectedFileShare{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProtectedFileShare")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "backup.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectedVm",
	}:
		if err := (&backupv1alpha1.ProtectedVm{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProtectedVm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bastion.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Host",
	}:
		if err := (&bastionv1alpha1.Host{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Host")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&batchv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&batchv1alpha1.Application{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&batchv1alpha1.Certificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "batch.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Pool",
	}:
		if err := (&batchv1alpha1.Pool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Pool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "blueprint.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Assignment",
	}:
		if err := (&blueprintv1alpha1.Assignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Assignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ChannelDirectline",
	}:
		if err := (&botv1alpha1.ChannelDirectline{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ChannelDirectline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ChannelEmail",
	}:
		if err := (&botv1alpha1.ChannelEmail{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ChannelEmail")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ChannelMsTeams",
	}:
		if err := (&botv1alpha1.ChannelMsTeams{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ChannelMsTeams")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ChannelSlack",
	}:
		if err := (&botv1alpha1.ChannelSlack{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ChannelSlack")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ChannelsRegistration",
	}:
		if err := (&botv1alpha1.ChannelsRegistration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ChannelsRegistration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&botv1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "bot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WebApp",
	}:
		if err := (&botv1alpha1.WebApp{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WebApp")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cdn.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&cdnv1alpha1.Endpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cdn.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Profile",
	}:
		if err := (&cdnv1alpha1.Profile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Profile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cognitive.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&cognitivev1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "communication.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&communicationv1alpha1.Service{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "consumption.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BudgetResourceGroup",
	}:
		if err := (&consumptionv1alpha1.BudgetResourceGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BudgetResourceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "consumption.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BudgetSubscription",
	}:
		if err := (&consumptionv1alpha1.BudgetSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BudgetSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&containerv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Registry",
	}:
		if err := (&containerv1alpha1.Registry{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Registry")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegistryScopeMap",
	}:
		if err := (&containerv1alpha1.RegistryScopeMap{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegistryScopeMap")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegistryToken",
	}:
		if err := (&containerv1alpha1.RegistryToken{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegistryToken")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "container.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RegistryWebhook",
	}:
		if err := (&containerv1alpha1.RegistryWebhook{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RegistryWebhook")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&cosmosdbv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CassandraKeyspace",
	}:
		if err := (&cosmosdbv1alpha1.CassandraKeyspace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CassandraKeyspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CassandraTable",
	}:
		if err := (&cosmosdbv1alpha1.CassandraTable{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CassandraTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GremlinDatabase",
	}:
		if err := (&cosmosdbv1alpha1.GremlinDatabase{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GremlinDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GremlinGraph",
	}:
		if err := (&cosmosdbv1alpha1.GremlinGraph{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GremlinGraph")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MongoCollection",
	}:
		if err := (&cosmosdbv1alpha1.MongoCollection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MongoCollection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MongoDatabase",
	}:
		if err := (&cosmosdbv1alpha1.MongoDatabase{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MongoDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NotebookWorkspace",
	}:
		if err := (&cosmosdbv1alpha1.NotebookWorkspace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NotebookWorkspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlContainer",
	}:
		if err := (&cosmosdbv1alpha1.SqlContainer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SqlContainer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlDatabase",
	}:
		if err := (&cosmosdbv1alpha1.SqlDatabase{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SqlDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlFunction",
	}:
		if err := (&cosmosdbv1alpha1.SqlFunction{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SqlFunction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlStoredProcedure",
	}:
		if err := (&cosmosdbv1alpha1.SqlStoredProcedure{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SqlStoredProcedure")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlTrigger",
	}:
		if err := (&cosmosdbv1alpha1.SqlTrigger{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SqlTrigger")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cosmosdb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&cosmosdbv1alpha1.Table{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "cost.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagementExportResourceGroup",
	}:
		if err := (&costv1alpha1.ManagementExportResourceGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagementExportResourceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "custom.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Provider",
	}:
		if err := (&customv1alpha1.Provider{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Provider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dashboard.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dashboard",
	}:
		if err := (&dashboardv1alpha1.Dashboard{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Dashboard")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Factory",
	}:
		if err := (&datav1alpha1.Factory{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Factory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetAzureBlob",
	}:
		if err := (&datav1alpha1.FactoryDatasetAzureBlob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryDatasetAzureBlob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetCosmosdbSqlapi",
	}:
		if err := (&datav1alpha1.FactoryDatasetCosmosdbSqlapi{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryDatasetCosmosdbSqlapi")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetDelimitedText",
	}:
		if err := (&datav1alpha1.FactoryDatasetDelimitedText{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryDatasetDelimitedText")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetHTTP",
	}:
		if err := (&datav1alpha1.FactoryDatasetHTTP{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryDatasetHTTP")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetJSON",
	}:
		if err := (&datav1alpha1.FactoryDatasetJSON{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryDatasetJSON")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetMysql",
	}:
		if err := (&datav1alpha1.FactoryDatasetMysql{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryDatasetMysql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetParquet",
	}:
		if err := (&datav1alpha1.FactoryDatasetParquet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryDatasetParquet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetPostgresql",
	}:
		if err := (&datav1alpha1.FactoryDatasetPostgresql{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryDatasetPostgresql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetSnowflake",
	}:
		if err := (&datav1alpha1.FactoryDatasetSnowflake{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryDatasetSnowflake")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryDatasetSQLServerTable",
	}:
		if err := (&datav1alpha1.FactoryDatasetSQLServerTable{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryDatasetSQLServerTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryIntegrationRuntimeAzure",
	}:
		if err := (&datav1alpha1.FactoryIntegrationRuntimeAzure{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryIntegrationRuntimeAzure")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryIntegrationRuntimeAzureSsis",
	}:
		if err := (&datav1alpha1.FactoryIntegrationRuntimeAzureSsis{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryIntegrationRuntimeAzureSsis")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryIntegrationRuntimeManaged",
	}:
		if err := (&datav1alpha1.FactoryIntegrationRuntimeManaged{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryIntegrationRuntimeManaged")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryIntegrationRuntimeSelfHosted",
	}:
		if err := (&datav1alpha1.FactoryIntegrationRuntimeSelfHosted{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryIntegrationRuntimeSelfHosted")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedCustomService",
	}:
		if err := (&datav1alpha1.FactoryLinkedCustomService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedCustomService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureBlobStorage",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceAzureBlobStorage{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceAzureBlobStorage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureDatabricks",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceAzureDatabricks{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceAzureDatabricks")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureFileStorage",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceAzureFileStorage{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceAzureFileStorage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureFunction",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceAzureFunction{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceAzureFunction")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureSearch",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceAzureSearch{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceAzureSearch")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureSQLDatabase",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceAzureSQLDatabase{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceAzureSQLDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceAzureTableStorage",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceAzureTableStorage{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceAzureTableStorage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceCosmosdb",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceCosmosdb{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceCosmosdb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceDataLakeStorageGen2",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceDataLakeStorageGen2{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceDataLakeStorageGen2")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceKeyVault",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceKeyVault{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceKeyVault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceKusto",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceKusto{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceKusto")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceMysql",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceMysql{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceMysql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceOdata",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceOdata{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceOdata")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServicePostgresql",
	}:
		if err := (&datav1alpha1.FactoryLinkedServicePostgresql{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServicePostgresql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceSftp",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceSftp{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceSftp")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceSnowflake",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceSnowflake{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceSnowflake")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceSQLServer",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceSQLServer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceSQLServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceSynapse",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceSynapse{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceSynapse")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryLinkedServiceWeb",
	}:
		if err := (&datav1alpha1.FactoryLinkedServiceWeb{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryLinkedServiceWeb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryPipeline",
	}:
		if err := (&datav1alpha1.FactoryPipeline{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryPipeline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryTriggerBlobEvent",
	}:
		if err := (&datav1alpha1.FactoryTriggerBlobEvent{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryTriggerBlobEvent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FactoryTriggerSchedule",
	}:
		if err := (&datav1alpha1.FactoryTriggerSchedule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FactoryTriggerSchedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeAnalyticsAccount",
	}:
		if err := (&datav1alpha1.LakeAnalyticsAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LakeAnalyticsAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeAnalyticsFirewallRule",
	}:
		if err := (&datav1alpha1.LakeAnalyticsFirewallRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LakeAnalyticsFirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeStore",
	}:
		if err := (&datav1alpha1.LakeStore{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LakeStore")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeStoreFile",
	}:
		if err := (&datav1alpha1.LakeStoreFile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LakeStoreFile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeStoreFirewallRule",
	}:
		if err := (&datav1alpha1.LakeStoreFirewallRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LakeStoreFirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LakeStoreVirtualNetworkRule",
	}:
		if err := (&datav1alpha1.LakeStoreVirtualNetworkRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LakeStoreVirtualNetworkRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectionBackupInstancePostgresql",
	}:
		if err := (&datav1alpha1.ProtectionBackupInstancePostgresql{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProtectionBackupInstancePostgresql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectionBackupPolicyPostgresql",
	}:
		if err := (&datav1alpha1.ProtectionBackupPolicyPostgresql{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProtectionBackupPolicyPostgresql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectionBackupVault",
	}:
		if err := (&datav1alpha1.ProtectionBackupVault{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProtectionBackupVault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Share",
	}:
		if err := (&datav1alpha1.Share{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Share")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareAccount",
	}:
		if err := (&datav1alpha1.ShareAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ShareAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareDatasetBlobStorage",
	}:
		if err := (&datav1alpha1.ShareDatasetBlobStorage{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ShareDatasetBlobStorage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareDatasetDataLakeGen1",
	}:
		if err := (&datav1alpha1.ShareDatasetDataLakeGen1{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ShareDatasetDataLakeGen1")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareDatasetDataLakeGen2",
	}:
		if err := (&datav1alpha1.ShareDatasetDataLakeGen2{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ShareDatasetDataLakeGen2")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareDatasetKustoCluster",
	}:
		if err := (&datav1alpha1.ShareDatasetKustoCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ShareDatasetKustoCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "data.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareDatasetKustoDatabase",
	}:
		if err := (&datav1alpha1.ShareDatasetKustoDatabase{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ShareDatasetKustoDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "database.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MigrationProject",
	}:
		if err := (&databasev1alpha1.MigrationProject{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MigrationProject")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "database.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MigrationService",
	}:
		if err := (&databasev1alpha1.MigrationService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MigrationService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "databox.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EdgeDevice",
	}:
		if err := (&databoxv1alpha1.EdgeDevice{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EdgeDevice")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "databox.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EdgeOrder",
	}:
		if err := (&databoxv1alpha1.EdgeOrder{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EdgeOrder")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "databricks.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workspace",
	}:
		if err := (&databricksv1alpha1.Workspace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Workspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dedicatedhardware.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityModule",
	}:
		if err := (&dedicatedhardwarev1alpha1.SecurityModule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecurityModule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dedicatedhost.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DedicatedHost",
	}:
		if err := (&dedicatedhostv1alpha1.DedicatedHost{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DedicatedHost")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dedicatedhost.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&dedicatedhostv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GlobalVmShutdownSchedule",
	}:
		if err := (&devtestv1alpha1.GlobalVmShutdownSchedule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GlobalVmShutdownSchedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Lab",
	}:
		if err := (&devtestv1alpha1.Lab{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Lab")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LinuxVirtualMachine",
	}:
		if err := (&devtestv1alpha1.LinuxVirtualMachine{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LinuxVirtualMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&devtestv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Schedule",
	}:
		if err := (&devtestv1alpha1.Schedule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Schedule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNetwork",
	}:
		if err := (&devtestv1alpha1.VirtualNetwork{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualNetwork")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devtest.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WindowsVirtualMachine",
	}:
		if err := (&devtestv1alpha1.WindowsVirtualMachine{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WindowsVirtualMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "devspace.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Controller",
	}:
		if err := (&devspacev1alpha1.Controller{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Controller")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "digital.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TwinsEndpointEventgrid",
	}:
		if err := (&digitalv1alpha1.TwinsEndpointEventgrid{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TwinsEndpointEventgrid")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "digital.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TwinsEndpointEventhub",
	}:
		if err := (&digitalv1alpha1.TwinsEndpointEventhub{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TwinsEndpointEventhub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "digital.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TwinsEndpointServicebus",
	}:
		if err := (&digitalv1alpha1.TwinsEndpointServicebus{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TwinsEndpointServicebus")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "digital.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TwinsInstance",
	}:
		if err := (&digitalv1alpha1.TwinsInstance{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TwinsInstance")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "disk.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Access",
	}:
		if err := (&diskv1alpha1.Access{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Access")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "disk.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EncryptionSet",
	}:
		if err := (&diskv1alpha1.EncryptionSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EncryptionSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ARecord",
	}:
		if err := (&dnsv1alpha1.ARecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ARecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AaaaRecord",
	}:
		if err := (&dnsv1alpha1.AaaaRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AaaaRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CaaRecord",
	}:
		if err := (&dnsv1alpha1.CaaRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CaaRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CnameRecord",
	}:
		if err := (&dnsv1alpha1.CnameRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CnameRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MxRecord",
	}:
		if err := (&dnsv1alpha1.MxRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MxRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NsRecord",
	}:
		if err := (&dnsv1alpha1.NsRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NsRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PtrRecord",
	}:
		if err := (&dnsv1alpha1.PtrRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PtrRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SrvRecord",
	}:
		if err := (&dnsv1alpha1.SrvRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SrvRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TxtRecord",
	}:
		if err := (&dnsv1alpha1.TxtRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TxtRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "dns.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Zone",
	}:
		if err := (&dnsv1alpha1.Zone{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Zone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventgrid.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Domain",
	}:
		if err := (&eventgridv1alpha1.Domain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Domain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventgrid.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DomainTopic",
	}:
		if err := (&eventgridv1alpha1.DomainTopic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DomainTopic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventgrid.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventSubscription",
	}:
		if err := (&eventgridv1alpha1.EventSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventgrid.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SystemTopic",
	}:
		if err := (&eventgridv1alpha1.SystemTopic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SystemTopic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventgrid.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SystemTopicEventSubscription",
	}:
		if err := (&eventgridv1alpha1.SystemTopicEventSubscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SystemTopicEventSubscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventgrid.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&eventgridv1alpha1.Topic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Eventhub",
	}:
		if err := (&eventhubv1alpha1.Eventhub{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Eventhub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AuthorizationRule",
	}:
		if err := (&eventhubv1alpha1.AuthorizationRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&eventhubv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsumerGroup",
	}:
		if err := (&eventhubv1alpha1.ConsumerGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConsumerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Namespace",
	}:
		if err := (&eventhubv1alpha1.Namespace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Namespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamespaceAuthorizationRule",
	}:
		if err := (&eventhubv1alpha1.NamespaceAuthorizationRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NamespaceAuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamespaceCustomerManagedKey",
	}:
		if err := (&eventhubv1alpha1.NamespaceCustomerManagedKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NamespaceCustomerManagedKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "eventhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamespaceDisasterRecoveryConfig",
	}:
		if err := (&eventhubv1alpha1.NamespaceDisasterRecoveryConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NamespaceDisasterRecoveryConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Circuit",
	}:
		if err := (&expressroutev1alpha1.Circuit{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Circuit")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CircuitAuthorization",
	}:
		if err := (&expressroutev1alpha1.CircuitAuthorization{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CircuitAuthorization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CircuitConnection",
	}:
		if err := (&expressroutev1alpha1.CircuitConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CircuitConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CircuitPeering",
	}:
		if err := (&expressroutev1alpha1.CircuitPeering{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CircuitPeering")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Connection",
	}:
		if err := (&expressroutev1alpha1.Connection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Connection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&expressroutev1alpha1.Gateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "expressroute.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Port",
	}:
		if err := (&expressroutev1alpha1.Port{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Port")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firewall.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Firewall",
	}:
		if err := (&firewallv1alpha1.Firewall{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Firewall")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firewall.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationRuleCollection",
	}:
		if err := (&firewallv1alpha1.ApplicationRuleCollection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApplicationRuleCollection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firewall.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NatRuleCollection",
	}:
		if err := (&firewallv1alpha1.NatRuleCollection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NatRuleCollection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firewall.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkRuleCollection",
	}:
		if err := (&firewallv1alpha1.NetworkRuleCollection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkRuleCollection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firewall.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Policy",
	}:
		if err := (&firewallv1alpha1.Policy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Policy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "firewall.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyRuleCollectionGroup",
	}:
		if err := (&firewallv1alpha1.PolicyRuleCollectionGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PolicyRuleCollectionGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "frontdoor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Frontdoor",
	}:
		if err := (&frontdoorv1alpha1.Frontdoor{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Frontdoor")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "frontdoor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CustomHTTPSConfiguration",
	}:
		if err := (&frontdoorv1alpha1.CustomHTTPSConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CustomHTTPSConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "frontdoor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallPolicy",
	}:
		if err := (&frontdoorv1alpha1.FirewallPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "function.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "App",
	}:
		if err := (&functionv1alpha1.App{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "App")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "function.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AppSlot",
	}:
		if err := (&functionv1alpha1.AppSlot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AppSlot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HadoopCluster",
	}:
		if err := (&hdinsightv1alpha1.HadoopCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HadoopCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HbaseCluster",
	}:
		if err := (&hdinsightv1alpha1.HbaseCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HbaseCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InteractiveQueryCluster",
	}:
		if err := (&hdinsightv1alpha1.InteractiveQueryCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InteractiveQueryCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KafkaCluster",
	}:
		if err := (&hdinsightv1alpha1.KafkaCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KafkaCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MlServicesCluster",
	}:
		if err := (&hdinsightv1alpha1.MlServicesCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MlServicesCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RserverCluster",
	}:
		if err := (&hdinsightv1alpha1.RserverCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RserverCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SparkCluster",
	}:
		if err := (&hdinsightv1alpha1.SparkCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SparkCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hdinsight.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StormCluster",
	}:
		if err := (&hdinsightv1alpha1.StormCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StormCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthbot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Healthbot",
	}:
		if err := (&healthbotv1alpha1.Healthbot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Healthbot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "healthcare.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&healthcarev1alpha1.Service{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hpc.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cache",
	}:
		if err := (&hpcv1alpha1.Cache{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cache")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hpc.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CacheAccessPolicy",
	}:
		if err := (&hpcv1alpha1.CacheAccessPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CacheAccessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hpc.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CacheBlobNfsTarget",
	}:
		if err := (&hpcv1alpha1.CacheBlobNfsTarget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CacheBlobNfsTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hpc.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CacheBlobTarget",
	}:
		if err := (&hpcv1alpha1.CacheBlobTarget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CacheBlobTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "hpc.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CacheNfsTarget",
	}:
		if err := (&hpcv1alpha1.CacheNfsTarget{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CacheNfsTarget")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "image.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Image",
	}:
		if err := (&imagev1alpha1.Image{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Image")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "integration.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceEnvironment",
	}:
		if err := (&integrationv1alpha1.ServiceEnvironment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceEnvironment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iotsecurity.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DeviceGroup",
	}:
		if err := (&iotsecurityv1alpha1.DeviceGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DeviceGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iotsecurity.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Solution",
	}:
		if err := (&iotsecurityv1alpha1.Solution{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Solution")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iottime.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SeriesInsightsAccessPolicy",
	}:
		if err := (&iottimev1alpha1.SeriesInsightsAccessPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SeriesInsightsAccessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iottime.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SeriesInsightsEventSourceIothub",
	}:
		if err := (&iottimev1alpha1.SeriesInsightsEventSourceIothub{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SeriesInsightsEventSourceIothub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iottime.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SeriesInsightsGen2Environment",
	}:
		if err := (&iottimev1alpha1.SeriesInsightsGen2Environment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SeriesInsightsGen2Environment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iottime.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SeriesInsightsReferenceDataSet",
	}:
		if err := (&iottimev1alpha1.SeriesInsightsReferenceDataSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SeriesInsightsReferenceDataSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iottime.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SeriesInsightsStandardEnvironment",
	}:
		if err := (&iottimev1alpha1.SeriesInsightsStandardEnvironment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SeriesInsightsStandardEnvironment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iotcentral.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&iotcentralv1alpha1.Application{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Iothub",
	}:
		if err := (&iothubv1alpha1.Iothub{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Iothub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConsumerGroup",
	}:
		if err := (&iothubv1alpha1.ConsumerGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConsumerGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Dps",
	}:
		if err := (&iothubv1alpha1.Dps{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Dps")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DpsCertificate",
	}:
		if err := (&iothubv1alpha1.DpsCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DpsCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DpsSharedAccessPolicy",
	}:
		if err := (&iothubv1alpha1.DpsSharedAccessPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DpsSharedAccessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointEventhub",
	}:
		if err := (&iothubv1alpha1.EndpointEventhub{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointEventhub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointServicebusQueue",
	}:
		if err := (&iothubv1alpha1.EndpointServicebusQueue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointServicebusQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointServicebusTopic",
	}:
		if err := (&iothubv1alpha1.EndpointServicebusTopic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointServicebusTopic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EndpointStorageContainer",
	}:
		if err := (&iothubv1alpha1.EndpointStorageContainer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EndpointStorageContainer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Enrichment",
	}:
		if err := (&iothubv1alpha1.Enrichment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Enrichment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FallbackRoute",
	}:
		if err := (&iothubv1alpha1.FallbackRoute{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FallbackRoute")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Route",
	}:
		if err := (&iothubv1alpha1.Route{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Route")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "iothub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SharedAccessPolicy",
	}:
		if err := (&iothubv1alpha1.SharedAccessPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SharedAccessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ip.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&ipv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KeyVault",
	}:
		if err := (&keyvaultv1alpha1.KeyVault{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KeyVault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccessPolicy",
	}:
		if err := (&keyvaultv1alpha1.AccessPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccessPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Certificate",
	}:
		if err := (&keyvaultv1alpha1.Certificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Certificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CertificateIssuer",
	}:
		if err := (&keyvaultv1alpha1.CertificateIssuer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CertificateIssuer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Key",
	}:
		if err := (&keyvaultv1alpha1.Key{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Key")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedHardwareSecurityModule",
	}:
		if err := (&keyvaultv1alpha1.ManagedHardwareSecurityModule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagedHardwareSecurityModule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "keyvault.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Secret",
	}:
		if err := (&keyvaultv1alpha1.Secret{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Secret")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kubernetescluster.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "KubernetesCluster",
	}:
		if err := (&kubernetesclusterv1alpha1.KubernetesCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "KubernetesCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kubernetescluster.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NodePool",
	}:
		if err := (&kubernetesclusterv1alpha1.NodePool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NodePool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AttachedDatabaseConfiguration",
	}:
		if err := (&kustov1alpha1.AttachedDatabaseConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AttachedDatabaseConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&kustov1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterCustomerManagedKey",
	}:
		if err := (&kustov1alpha1.ClusterCustomerManagedKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterCustomerManagedKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterPrincipalAssignment",
	}:
		if err := (&kustov1alpha1.ClusterPrincipalAssignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterPrincipalAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&kustov1alpha1.Database{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabasePrincipal",
	}:
		if err := (&kustov1alpha1.DatabasePrincipal{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatabasePrincipal")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabasePrincipalAssignment",
	}:
		if err := (&kustov1alpha1.DatabasePrincipalAssignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatabasePrincipalAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventgridDataConnection",
	}:
		if err := (&kustov1alpha1.EventgridDataConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventgridDataConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EventhubDataConnection",
	}:
		if err := (&kustov1alpha1.EventhubDataConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EventhubDataConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "kusto.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IothubDataConnection",
	}:
		if err := (&kustov1alpha1.IothubDataConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IothubDataConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Lb",
	}:
		if err := (&lbv1alpha1.Lb{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Lb")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendAddressPool",
	}:
		if err := (&lbv1alpha1.BackendAddressPool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackendAddressPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BackendAddressPoolAddress",
	}:
		if err := (&lbv1alpha1.BackendAddressPoolAddress{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BackendAddressPoolAddress")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NatPool",
	}:
		if err := (&lbv1alpha1.NatPool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NatPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NatRule",
	}:
		if err := (&lbv1alpha1.NatRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NatRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "OutboundRule",
	}:
		if err := (&lbv1alpha1.OutboundRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "OutboundRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Probe",
	}:
		if err := (&lbv1alpha1.Probe{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Probe")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Rule",
	}:
		if err := (&lbv1alpha1.Rule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Rule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lighthouse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Assignment",
	}:
		if err := (&lighthousev1alpha1.Assignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Assignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "lighthouse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Definition",
	}:
		if err := (&lighthousev1alpha1.Definition{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Definition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "linux.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualMachine",
	}:
		if err := (&linuxv1alpha1.VirtualMachine{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "linux.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualMachineScaleSet",
	}:
		if err := (&linuxv1alpha1.VirtualMachineScaleSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualMachineScaleSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "local.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkGateway",
	}:
		if err := (&localv1alpha1.NetworkGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&loganalyticsv1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ClusterCustomerManagedKey",
	}:
		if err := (&loganalyticsv1alpha1.ClusterCustomerManagedKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ClusterCustomerManagedKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataExportRule",
	}:
		if err := (&loganalyticsv1alpha1.DataExportRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataExportRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasourceWindowsEvent",
	}:
		if err := (&loganalyticsv1alpha1.DatasourceWindowsEvent{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatasourceWindowsEvent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatasourceWindowsPerformanceCounter",
	}:
		if err := (&loganalyticsv1alpha1.DatasourceWindowsPerformanceCounter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatasourceWindowsPerformanceCounter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LinkedService",
	}:
		if err := (&loganalyticsv1alpha1.LinkedService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LinkedService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LinkedStorageAccount",
	}:
		if err := (&loganalyticsv1alpha1.LinkedStorageAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LinkedStorageAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SavedSearch",
	}:
		if err := (&loganalyticsv1alpha1.SavedSearch{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SavedSearch")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Solution",
	}:
		if err := (&loganalyticsv1alpha1.Solution{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Solution")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StorageInsights",
	}:
		if err := (&loganalyticsv1alpha1.StorageInsights{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StorageInsights")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "loganalytics.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workspace",
	}:
		if err := (&loganalyticsv1alpha1.Workspace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Workspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActionCustom",
	}:
		if err := (&logicappv1alpha1.ActionCustom{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ActionCustom")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActionHTTP",
	}:
		if err := (&logicappv1alpha1.ActionHTTP{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ActionHTTP")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "IntegrationAccount",
	}:
		if err := (&logicappv1alpha1.IntegrationAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "IntegrationAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TriggerCustom",
	}:
		if err := (&logicappv1alpha1.TriggerCustom{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TriggerCustom")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TriggerHTTPRequest",
	}:
		if err := (&logicappv1alpha1.TriggerHTTPRequest{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TriggerHTTPRequest")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TriggerRecurrence",
	}:
		if err := (&logicappv1alpha1.TriggerRecurrence{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TriggerRecurrence")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "logicapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workflow",
	}:
		if err := (&logicappv1alpha1.Workflow{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Workflow")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "machine.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LearningComputeCluster",
	}:
		if err := (&machinev1alpha1.LearningComputeCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LearningComputeCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "machine.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LearningInferenceCluster",
	}:
		if err := (&machinev1alpha1.LearningInferenceCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LearningInferenceCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "machine.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LearningWorkspace",
	}:
		if err := (&machinev1alpha1.LearningWorkspace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LearningWorkspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "maintenance.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssignmentDedicatedHost",
	}:
		if err := (&maintenancev1alpha1.AssignmentDedicatedHost{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AssignmentDedicatedHost")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "maintenance.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssignmentVirtualMachine",
	}:
		if err := (&maintenancev1alpha1.AssignmentVirtualMachine{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AssignmentVirtualMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "maintenance.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&maintenancev1alpha1.Configuration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "managed.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Application",
	}:
		if err := (&managedv1alpha1.Application{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Application")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "managed.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationDefinition",
	}:
		if err := (&managedv1alpha1.ApplicationDefinition{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApplicationDefinition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "managed.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Disk",
	}:
		if err := (&managedv1alpha1.Disk{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Disk")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "management.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&managementv1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "management.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupPolicyAssignment",
	}:
		if err := (&managementv1alpha1.GroupPolicyAssignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupPolicyAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "management.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupSubscriptionAssociation",
	}:
		if err := (&managementv1alpha1.GroupSubscriptionAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupSubscriptionAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "management.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupTemplateDeployment",
	}:
		if err := (&managementv1alpha1.GroupTemplateDeployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupTemplateDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "management.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Lock",
	}:
		if err := (&managementv1alpha1.Lock{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Lock")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "maps.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&mapsv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mariadb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&mariadbv1alpha1.Configuration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mariadb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&mariadbv1alpha1.Database{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mariadb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&mariadbv1alpha1.FirewallRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mariadb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Server",
	}:
		if err := (&mariadbv1alpha1.Server{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Server")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mariadb.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNetworkRule",
	}:
		if err := (&mariadbv1alpha1.VirtualNetworkRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualNetworkRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "marketplace.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Agreement",
	}:
		if err := (&marketplacev1alpha1.Agreement{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Agreement")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Asset",
	}:
		if err := (&mediav1alpha1.Asset{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Asset")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssetFilter",
	}:
		if err := (&mediav1alpha1.AssetFilter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AssetFilter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ContentKeyPolicy",
	}:
		if err := (&mediav1alpha1.ContentKeyPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ContentKeyPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Job",
	}:
		if err := (&mediav1alpha1.Job{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Job")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LiveEvent",
	}:
		if err := (&mediav1alpha1.LiveEvent{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LiveEvent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LiveEventOutput",
	}:
		if err := (&mediav1alpha1.LiveEventOutput{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LiveEventOutput")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesAccount",
	}:
		if err := (&mediav1alpha1.ServicesAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServicesAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StreamingEndpoint",
	}:
		if err := (&mediav1alpha1.StreamingEndpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StreamingEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StreamingLocator",
	}:
		if err := (&mediav1alpha1.StreamingLocator{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StreamingLocator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "StreamingPolicy",
	}:
		if err := (&mediav1alpha1.StreamingPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "StreamingPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "media.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Transform",
	}:
		if err := (&mediav1alpha1.Transform{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Transform")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AadDiagnosticSetting",
	}:
		if err := (&monitorv1alpha1.AadDiagnosticSetting{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AadDiagnosticSetting")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActionGroup",
	}:
		if err := (&monitorv1alpha1.ActionGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ActionGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActionRuleActionGroup",
	}:
		if err := (&monitorv1alpha1.ActionRuleActionGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ActionRuleActionGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActionRuleSuppression",
	}:
		if err := (&monitorv1alpha1.ActionRuleSuppression{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ActionRuleSuppression")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActivityLogAlert",
	}:
		if err := (&monitorv1alpha1.ActivityLogAlert{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ActivityLogAlert")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AutoscaleSetting",
	}:
		if err := (&monitorv1alpha1.AutoscaleSetting{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AutoscaleSetting")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DiagnosticSetting",
	}:
		if err := (&monitorv1alpha1.DiagnosticSetting{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DiagnosticSetting")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LogProfile",
	}:
		if err := (&monitorv1alpha1.LogProfile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LogProfile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MetricAlert",
	}:
		if err := (&monitorv1alpha1.MetricAlert{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MetricAlert")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScheduledQueryRulesAlert",
	}:
		if err := (&monitorv1alpha1.ScheduledQueryRulesAlert{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ScheduledQueryRulesAlert")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ScheduledQueryRulesLog",
	}:
		if err := (&monitorv1alpha1.ScheduledQueryRulesLog{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ScheduledQueryRulesLog")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "monitor.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SmartDetectorAlertRule",
	}:
		if err := (&monitorv1alpha1.SmartDetectorAlertRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SmartDetectorAlertRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&mssqlv1alpha1.Database{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseExtendedAuditingPolicy",
	}:
		if err := (&mssqlv1alpha1.DatabaseExtendedAuditingPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatabaseExtendedAuditingPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DatabaseVulnerabilityAssessmentRuleBaseline",
	}:
		if err := (&mssqlv1alpha1.DatabaseVulnerabilityAssessmentRuleBaseline{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DatabaseVulnerabilityAssessmentRuleBaseline")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Elasticpool",
	}:
		if err := (&mssqlv1alpha1.Elasticpool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Elasticpool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&mssqlv1alpha1.FirewallRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobAgent",
	}:
		if err := (&mssqlv1alpha1.JobAgent{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "JobAgent")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "JobCredential",
	}:
		if err := (&mssqlv1alpha1.JobCredential{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "JobCredential")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Server",
	}:
		if err := (&mssqlv1alpha1.Server{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Server")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerExtendedAuditingPolicy",
	}:
		if err := (&mssqlv1alpha1.ServerExtendedAuditingPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServerExtendedAuditingPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerSecurityAlertPolicy",
	}:
		if err := (&mssqlv1alpha1.ServerSecurityAlertPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServerSecurityAlertPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerTransparentDataEncryption",
	}:
		if err := (&mssqlv1alpha1.ServerTransparentDataEncryption{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServerTransparentDataEncryption")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerVulnerabilityAssessment",
	}:
		if err := (&mssqlv1alpha1.ServerVulnerabilityAssessment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServerVulnerabilityAssessment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualMachine",
	}:
		if err := (&mssqlv1alpha1.VirtualMachine{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mssql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNetworkRule",
	}:
		if err := (&mssqlv1alpha1.VirtualNetworkRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualNetworkRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActiveDirectoryAdministrator",
	}:
		if err := (&mysqlv1alpha1.ActiveDirectoryAdministrator{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ActiveDirectoryAdministrator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&mysqlv1alpha1.Configuration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&mysqlv1alpha1.Database{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&mysqlv1alpha1.FirewallRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Server",
	}:
		if err := (&mysqlv1alpha1.Server{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Server")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerKey",
	}:
		if err := (&mysqlv1alpha1.ServerKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServerKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "mysql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNetworkRule",
	}:
		if err := (&mysqlv1alpha1.VirtualNetworkRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualNetworkRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nat.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&natv1alpha1.Gateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nat.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayPublicIPAssociation",
	}:
		if err := (&natv1alpha1.GatewayPublicIPAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GatewayPublicIPAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "nat.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayPublicIPPrefixAssociation",
	}:
		if err := (&natv1alpha1.GatewayPublicIPPrefixAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GatewayPublicIPPrefixAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "netapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&netappv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "netapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Pool",
	}:
		if err := (&netappv1alpha1.Pool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Pool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "netapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&netappv1alpha1.Snapshot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "netapp.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Volume",
	}:
		if err := (&netappv1alpha1.Volume{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Volume")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ConnectionMonitor",
	}:
		if err := (&networkv1alpha1.ConnectionMonitor{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ConnectionMonitor")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DdosProtectionPlan",
	}:
		if err := (&networkv1alpha1.DdosProtectionPlan{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DdosProtectionPlan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Interface",
	}:
		if err := (&networkv1alpha1.Interface{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Interface")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceApplicationGatewayBackendAddressPoolAssociation",
	}:
		if err := (&networkv1alpha1.InterfaceApplicationGatewayBackendAddressPoolAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InterfaceApplicationGatewayBackendAddressPoolAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceApplicationSecurityGroupAssociation",
	}:
		if err := (&networkv1alpha1.InterfaceApplicationSecurityGroupAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InterfaceApplicationSecurityGroupAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceBackendAddressPoolAssociation",
	}:
		if err := (&networkv1alpha1.InterfaceBackendAddressPoolAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InterfaceBackendAddressPoolAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceNATRuleAssociation",
	}:
		if err := (&networkv1alpha1.InterfaceNATRuleAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InterfaceNATRuleAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "InterfaceSecurityGroupAssociation",
	}:
		if err := (&networkv1alpha1.InterfaceSecurityGroupAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "InterfaceSecurityGroupAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PacketCapture",
	}:
		if err := (&networkv1alpha1.PacketCapture{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PacketCapture")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Profile",
	}:
		if err := (&networkv1alpha1.Profile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Profile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityGroup",
	}:
		if err := (&networkv1alpha1.SecurityGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecurityGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SecurityRule",
	}:
		if err := (&networkv1alpha1.SecurityRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SecurityRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Watcher",
	}:
		if err := (&networkv1alpha1.Watcher{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Watcher")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "network.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "WatcherFlowLog",
	}:
		if err := (&networkv1alpha1.WatcherFlowLog{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "WatcherFlowLog")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notificationhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NotificationHub",
	}:
		if err := (&notificationhubv1alpha1.NotificationHub{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NotificationHub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notificationhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AuthorizationRule",
	}:
		if err := (&notificationhubv1alpha1.AuthorizationRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "notificationhub.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Namespace",
	}:
		if err := (&notificationhubv1alpha1.Namespace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Namespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "orchestrated.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualMachineScaleSet",
	}:
		if err := (&orchestratedv1alpha1.VirtualMachineScaleSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualMachineScaleSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "packet.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Capture",
	}:
		if err := (&packetv1alpha1.Capture{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Capture")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "point.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ToSiteVPNGateway",
	}:
		if err := (&pointv1alpha1.ToSiteVPNGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ToSiteVPNGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "policy.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Assignment",
	}:
		if err := (&policyv1alpha1.Assignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Assignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "policy.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Definition",
	}:
		if err := (&policyv1alpha1.Definition{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Definition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "policy.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Remediation",
	}:
		if err := (&policyv1alpha1.Remediation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Remediation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "policy.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SetDefinition",
	}:
		if err := (&policyv1alpha1.SetDefinition{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SetDefinition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "portal.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TenantConfiguration",
	}:
		if err := (&portalv1alpha1.TenantConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TenantConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActiveDirectoryAdministrator",
	}:
		if err := (&postgresqlv1alpha1.ActiveDirectoryAdministrator{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ActiveDirectoryAdministrator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Configuration",
	}:
		if err := (&postgresqlv1alpha1.Configuration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Configuration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&postgresqlv1alpha1.Database{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&postgresqlv1alpha1.FirewallRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FlexibleServer",
	}:
		if err := (&postgresqlv1alpha1.FlexibleServer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FlexibleServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FlexibleServerFirewallRule",
	}:
		if err := (&postgresqlv1alpha1.FlexibleServerFirewallRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FlexibleServerFirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Server",
	}:
		if err := (&postgresqlv1alpha1.Server{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Server")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerKey",
	}:
		if err := (&postgresqlv1alpha1.ServerKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServerKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "postgresql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNetworkRule",
	}:
		if err := (&postgresqlv1alpha1.VirtualNetworkRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualNetworkRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "powerbi.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Embedded",
	}:
		if err := (&powerbiv1alpha1.Embedded{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Embedded")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsARecord",
	}:
		if err := (&privatev1alpha1.DnsARecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DnsARecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsAaaaRecord",
	}:
		if err := (&privatev1alpha1.DnsAaaaRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DnsAaaaRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsCnameRecord",
	}:
		if err := (&privatev1alpha1.DnsCnameRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DnsCnameRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsMxRecord",
	}:
		if err := (&privatev1alpha1.DnsMxRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DnsMxRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsPtrRecord",
	}:
		if err := (&privatev1alpha1.DnsPtrRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DnsPtrRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsSrvRecord",
	}:
		if err := (&privatev1alpha1.DnsSrvRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DnsSrvRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsTxtRecord",
	}:
		if err := (&privatev1alpha1.DnsTxtRecord{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DnsTxtRecord")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsZone",
	}:
		if err := (&privatev1alpha1.DnsZone{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DnsZone")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DnsZoneVirtualNetworkLink",
	}:
		if err := (&privatev1alpha1.DnsZoneVirtualNetworkLink{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DnsZoneVirtualNetworkLink")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&privatev1alpha1.Endpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "private.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LinkService",
	}:
		if err := (&privatev1alpha1.LinkService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LinkService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "proximity.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PlacementGroup",
	}:
		if err := (&proximityv1alpha1.PlacementGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PlacementGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "publicip.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PublicIP",
	}:
		if err := (&publicipv1alpha1.PublicIP{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PublicIP")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "publicip.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Prefix",
	}:
		if err := (&publicipv1alpha1.Prefix{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Prefix")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "purview.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&purviewv1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "recovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServicesVault",
	}:
		if err := (&recoveryv1alpha1.ServicesVault{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServicesVault")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redis.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cache",
	}:
		if err := (&redisv1alpha1.Cache{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cache")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redis.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EnterpriseCluster",
	}:
		if err := (&redisv1alpha1.EnterpriseCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EnterpriseCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redis.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EnterpriseDatabase",
	}:
		if err := (&redisv1alpha1.EnterpriseDatabase{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EnterpriseDatabase")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redis.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&redisv1alpha1.FirewallRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "redis.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "LinkedServer",
	}:
		if err := (&redisv1alpha1.LinkedServer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "LinkedServer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "relay.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HybridConnection",
	}:
		if err := (&relayv1alpha1.HybridConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HybridConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "relay.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Namespace",
	}:
		if err := (&relayv1alpha1.Namespace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Namespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Group",
	}:
		if err := (&resourcev1alpha1.Group{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Group")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupPolicyAssignment",
	}:
		if err := (&resourcev1alpha1.GroupPolicyAssignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupPolicyAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GroupTemplateDeployment",
	}:
		if err := (&resourcev1alpha1.GroupTemplateDeployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GroupTemplateDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyAssignment",
	}:
		if err := (&resourcev1alpha1.PolicyAssignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PolicyAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "resource.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProviderRegistration",
	}:
		if err := (&resourcev1alpha1.ProviderRegistration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProviderRegistration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "role.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Assignment",
	}:
		if err := (&rolev1alpha1.Assignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Assignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "role.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Definition",
	}:
		if err := (&rolev1alpha1.Definition{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Definition")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Route",
	}:
		if err := (&routev1alpha1.Route{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Route")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Filter",
	}:
		if err := (&routev1alpha1.Filter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Filter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "route.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&routev1alpha1.Table{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "search.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&searchv1alpha1.Service{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterAssessment",
	}:
		if err := (&securityv1alpha1.CenterAssessment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CenterAssessment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterAssessmentMetadata",
	}:
		if err := (&securityv1alpha1.CenterAssessmentMetadata{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CenterAssessmentMetadata")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterAssessmentPolicy",
	}:
		if err := (&securityv1alpha1.CenterAssessmentPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CenterAssessmentPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterAutoProvisioning",
	}:
		if err := (&securityv1alpha1.CenterAutoProvisioning{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CenterAutoProvisioning")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterAutomation",
	}:
		if err := (&securityv1alpha1.CenterAutomation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CenterAutomation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterContact",
	}:
		if err := (&securityv1alpha1.CenterContact{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CenterContact")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterServerVulnerabilityAssessment",
	}:
		if err := (&securityv1alpha1.CenterServerVulnerabilityAssessment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CenterServerVulnerabilityAssessment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterSetting",
	}:
		if err := (&securityv1alpha1.CenterSetting{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CenterSetting")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterSubscriptionPricing",
	}:
		if err := (&securityv1alpha1.CenterSubscriptionPricing{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CenterSubscriptionPricing")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "security.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CenterWorkspace",
	}:
		if err := (&securityv1alpha1.CenterWorkspace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CenterWorkspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertRuleFusion",
	}:
		if err := (&sentinelv1alpha1.AlertRuleFusion{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AlertRuleFusion")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertRuleMachineLearningBehaviorAnalytics",
	}:
		if err := (&sentinelv1alpha1.AlertRuleMachineLearningBehaviorAnalytics{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AlertRuleMachineLearningBehaviorAnalytics")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertRuleMsSecurityIncident",
	}:
		if err := (&sentinelv1alpha1.AlertRuleMsSecurityIncident{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AlertRuleMsSecurityIncident")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AlertRuleScheduled",
	}:
		if err := (&sentinelv1alpha1.AlertRuleScheduled{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AlertRuleScheduled")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorAwsCloudTrail",
	}:
		if err := (&sentinelv1alpha1.DataConnectorAwsCloudTrail{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataConnectorAwsCloudTrail")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorAzureActiveDirectory",
	}:
		if err := (&sentinelv1alpha1.DataConnectorAzureActiveDirectory{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataConnectorAzureActiveDirectory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorAzureAdvancedThreatProtection",
	}:
		if err := (&sentinelv1alpha1.DataConnectorAzureAdvancedThreatProtection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataConnectorAzureAdvancedThreatProtection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorAzureSecurityCenter",
	}:
		if err := (&sentinelv1alpha1.DataConnectorAzureSecurityCenter{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataConnectorAzureSecurityCenter")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorMicrosoftCloudAppSecurity",
	}:
		if err := (&sentinelv1alpha1.DataConnectorMicrosoftCloudAppSecurity{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataConnectorMicrosoftCloudAppSecurity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorMicrosoftDefenderAdvancedThreatProtection",
	}:
		if err := (&sentinelv1alpha1.DataConnectorMicrosoftDefenderAdvancedThreatProtection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataConnectorMicrosoftDefenderAdvancedThreatProtection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorOffice365",
	}:
		if err := (&sentinelv1alpha1.DataConnectorOffice365{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataConnectorOffice365")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sentinel.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataConnectorThreatIntelligence",
	}:
		if err := (&sentinelv1alpha1.DataConnectorThreatIntelligence{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataConnectorThreatIntelligence")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FabricCluster",
	}:
		if err := (&servicev1alpha1.FabricCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FabricCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FabricMeshApplication",
	}:
		if err := (&servicev1alpha1.FabricMeshApplication{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FabricMeshApplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FabricMeshLocalNetwork",
	}:
		if err := (&servicev1alpha1.FabricMeshLocalNetwork{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FabricMeshLocalNetwork")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FabricMeshSecret",
	}:
		if err := (&servicev1alpha1.FabricMeshSecret{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FabricMeshSecret")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "service.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FabricMeshSecretValue",
	}:
		if err := (&servicev1alpha1.FabricMeshSecretValue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FabricMeshSecretValue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Namespace",
	}:
		if err := (&servicebusv1alpha1.Namespace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Namespace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamespaceAuthorizationRule",
	}:
		if err := (&servicebusv1alpha1.NamespaceAuthorizationRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NamespaceAuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamespaceDisasterRecoveryConfig",
	}:
		if err := (&servicebusv1alpha1.NamespaceDisasterRecoveryConfig{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NamespaceDisasterRecoveryConfig")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NamespaceNetworkRuleSet",
	}:
		if err := (&servicebusv1alpha1.NamespaceNetworkRuleSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NamespaceNetworkRuleSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Queue",
	}:
		if err := (&servicebusv1alpha1.Queue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Queue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "QueueAuthorizationRule",
	}:
		if err := (&servicebusv1alpha1.QueueAuthorizationRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "QueueAuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subscription",
	}:
		if err := (&servicebusv1alpha1.Subscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Subscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SubscriptionRule",
	}:
		if err := (&servicebusv1alpha1.SubscriptionRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SubscriptionRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Topic",
	}:
		if err := (&servicebusv1alpha1.Topic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Topic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "servicebus.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TopicAuthorizationRule",
	}:
		if err := (&servicebusv1alpha1.TopicAuthorizationRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TopicAuthorizationRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sharedimage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SharedImage",
	}:
		if err := (&sharedimagev1alpha1.SharedImage{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SharedImage")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sharedimage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gallery",
	}:
		if err := (&sharedimagev1alpha1.Gallery{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gallery")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sharedimage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Version",
	}:
		if err := (&sharedimagev1alpha1.Version{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Version")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "signalr.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Service",
	}:
		if err := (&signalrv1alpha1.Service{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Service")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "siterecovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Fabric",
	}:
		if err := (&siterecoveryv1alpha1.Fabric{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Fabric")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "siterecovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkMapping",
	}:
		if err := (&siterecoveryv1alpha1.NetworkMapping{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "siterecovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectionContainer",
	}:
		if err := (&siterecoveryv1alpha1.ProtectionContainer{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProtectionContainer")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "siterecovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ProtectionContainerMapping",
	}:
		if err := (&siterecoveryv1alpha1.ProtectionContainerMapping{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ProtectionContainerMapping")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "siterecovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicatedVm",
	}:
		if err := (&siterecoveryv1alpha1.ReplicatedVm{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReplicatedVm")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "siterecovery.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ReplicationPolicy",
	}:
		if err := (&siterecoveryv1alpha1.ReplicationPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ReplicationPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "snapshot.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Snapshot",
	}:
		if err := (&snapshotv1alpha1.Snapshot{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Snapshot")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spatial.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnchorsAccount",
	}:
		if err := (&spatialv1alpha1.AnchorsAccount{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnchorsAccount")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudActiveDeployment",
	}:
		if err := (&springv1alpha1.CloudActiveDeployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudActiveDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudApp",
	}:
		if err := (&springv1alpha1.CloudApp{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudApp")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudAppCosmosdbAssociation",
	}:
		if err := (&springv1alpha1.CloudAppCosmosdbAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudAppCosmosdbAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudAppMysqlAssociation",
	}:
		if err := (&springv1alpha1.CloudAppMysqlAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudAppMysqlAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudAppRedisAssociation",
	}:
		if err := (&springv1alpha1.CloudAppRedisAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudAppRedisAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudCertificate",
	}:
		if err := (&springv1alpha1.CloudCertificate{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudCertificate")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudCustomDomain",
	}:
		if err := (&springv1alpha1.CloudCustomDomain{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudCustomDomain")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudJavaDeployment",
	}:
		if err := (&springv1alpha1.CloudJavaDeployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudJavaDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "spring.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "CloudService",
	}:
		if err := (&springv1alpha1.CloudService{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "CloudService")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ActiveDirectoryAdministrator",
	}:
		if err := (&sqlv1alpha1.ActiveDirectoryAdministrator{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ActiveDirectoryAdministrator")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Database",
	}:
		if err := (&sqlv1alpha1.Database{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Database")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Elasticpool",
	}:
		if err := (&sqlv1alpha1.Elasticpool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Elasticpool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FailoverGroup",
	}:
		if err := (&sqlv1alpha1.FailoverGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FailoverGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&sqlv1alpha1.FirewallRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Server",
	}:
		if err := (&sqlv1alpha1.Server{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Server")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "sql.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualNetworkRule",
	}:
		if err := (&sqlv1alpha1.VirtualNetworkRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualNetworkRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "ssh.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PublicKey",
	}:
		if err := (&sshv1alpha1.PublicKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PublicKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stack.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HciCluster",
	}:
		if err := (&stackv1alpha1.HciCluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HciCluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "static.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Site",
	}:
		if err := (&staticv1alpha1.Site{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Site")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Account",
	}:
		if err := (&storagev1alpha1.Account{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Account")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountCustomerManagedKey",
	}:
		if err := (&storagev1alpha1.AccountCustomerManagedKey{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountCustomerManagedKey")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AccountNetworkRules",
	}:
		if err := (&storagev1alpha1.AccountNetworkRules{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AccountNetworkRules")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Blob",
	}:
		if err := (&storagev1alpha1.Blob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Blob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "BlobInventoryPolicy",
	}:
		if err := (&storagev1alpha1.BlobInventoryPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "BlobInventoryPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Container",
	}:
		if err := (&storagev1alpha1.Container{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Container")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataLakeGen2Filesystem",
	}:
		if err := (&storagev1alpha1.DataLakeGen2Filesystem{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataLakeGen2Filesystem")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DataLakeGen2Path",
	}:
		if err := (&storagev1alpha1.DataLakeGen2Path{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DataLakeGen2Path")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "EncryptionScope",
	}:
		if err := (&storagev1alpha1.EncryptionScope{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "EncryptionScope")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagementPolicy",
	}:
		if err := (&storagev1alpha1.ManagementPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagementPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ObjectReplication",
	}:
		if err := (&storagev1alpha1.ObjectReplication{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ObjectReplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Queue",
	}:
		if err := (&storagev1alpha1.Queue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Queue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Share",
	}:
		if err := (&storagev1alpha1.Share{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Share")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareDirectory",
	}:
		if err := (&storagev1alpha1.ShareDirectory{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ShareDirectory")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ShareFile",
	}:
		if err := (&storagev1alpha1.ShareFile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ShareFile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Sync",
	}:
		if err := (&storagev1alpha1.Sync{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Sync")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SyncCloudEndpoint",
	}:
		if err := (&storagev1alpha1.SyncCloudEndpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SyncCloudEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SyncGroup",
	}:
		if err := (&storagev1alpha1.SyncGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SyncGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Table",
	}:
		if err := (&storagev1alpha1.Table{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Table")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "storage.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TableEntity",
	}:
		if err := (&storagev1alpha1.TableEntity{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TableEntity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsFunctionJavascriptUdf",
	}:
		if err := (&streamv1alpha1.AnalyticsFunctionJavascriptUdf{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalyticsFunctionJavascriptUdf")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsJob",
	}:
		if err := (&streamv1alpha1.AnalyticsJob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalyticsJob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsOutputBlob",
	}:
		if err := (&streamv1alpha1.AnalyticsOutputBlob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalyticsOutputBlob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsOutputEventhub",
	}:
		if err := (&streamv1alpha1.AnalyticsOutputEventhub{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalyticsOutputEventhub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsOutputMssql",
	}:
		if err := (&streamv1alpha1.AnalyticsOutputMssql{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalyticsOutputMssql")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsOutputServicebusQueue",
	}:
		if err := (&streamv1alpha1.AnalyticsOutputServicebusQueue{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalyticsOutputServicebusQueue")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsOutputServicebusTopic",
	}:
		if err := (&streamv1alpha1.AnalyticsOutputServicebusTopic{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalyticsOutputServicebusTopic")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsReferenceInputBlob",
	}:
		if err := (&streamv1alpha1.AnalyticsReferenceInputBlob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalyticsReferenceInputBlob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsStreamInputBlob",
	}:
		if err := (&streamv1alpha1.AnalyticsStreamInputBlob{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalyticsStreamInputBlob")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsStreamInputEventhub",
	}:
		if err := (&streamv1alpha1.AnalyticsStreamInputEventhub{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalyticsStreamInputEventhub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "stream.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AnalyticsStreamInputIothub",
	}:
		if err := (&streamv1alpha1.AnalyticsStreamInputIothub{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AnalyticsStreamInputIothub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subnet",
	}:
		if err := (&subnetv1alpha1.Subnet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Subnet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NatGatewayAssociation",
	}:
		if err := (&subnetv1alpha1.NatGatewayAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NatGatewayAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkSecurityGroupAssociation",
	}:
		if err := (&subnetv1alpha1.NetworkSecurityGroupAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkSecurityGroupAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RouteTableAssociation",
	}:
		if err := (&subnetv1alpha1.RouteTableAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RouteTableAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subnet.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServiceEndpointStoragePolicy",
	}:
		if err := (&subnetv1alpha1.ServiceEndpointStoragePolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServiceEndpointStoragePolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subscription.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Subscription",
	}:
		if err := (&subscriptionv1alpha1.Subscription{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Subscription")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subscription.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PolicyAssignment",
	}:
		if err := (&subscriptionv1alpha1.PolicyAssignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PolicyAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "subscription.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TemplateDeployment",
	}:
		if err := (&subscriptionv1alpha1.TemplateDeployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TemplateDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synapse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "FirewallRule",
	}:
		if err := (&synapsev1alpha1.FirewallRule{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "FirewallRule")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synapse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ManagedPrivateEndpoint",
	}:
		if err := (&synapsev1alpha1.ManagedPrivateEndpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ManagedPrivateEndpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synapse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "RoleAssignment",
	}:
		if err := (&synapsev1alpha1.RoleAssignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "RoleAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synapse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SparkPool",
	}:
		if err := (&synapsev1alpha1.SparkPool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SparkPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synapse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "SqlPool",
	}:
		if err := (&synapsev1alpha1.SqlPool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "SqlPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "synapse.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Workspace",
	}:
		if err := (&synapsev1alpha1.Workspace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Workspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "template.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Deployment",
	}:
		if err := (&templatev1alpha1.Deployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Deployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "tenant.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "TemplateDeployment",
	}:
		if err := (&tenantv1alpha1.TemplateDeployment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "TemplateDeployment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "trafficmanager.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Endpoint",
	}:
		if err := (&trafficmanagerv1alpha1.Endpoint{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Endpoint")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "trafficmanager.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Profile",
	}:
		if err := (&trafficmanagerv1alpha1.Profile{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Profile")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "user.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "AssignedIdentity",
	}:
		if err := (&userv1alpha1.AssignedIdentity{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "AssignedIdentity")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DesktopApplication",
	}:
		if err := (&virtualv1alpha1.DesktopApplication{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DesktopApplication")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DesktopApplicationGroup",
	}:
		if err := (&virtualv1alpha1.DesktopApplicationGroup{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DesktopApplicationGroup")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DesktopHostPool",
	}:
		if err := (&virtualv1alpha1.DesktopHostPool{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DesktopHostPool")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DesktopWorkspace",
	}:
		if err := (&virtualv1alpha1.DesktopWorkspace{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DesktopWorkspace")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "DesktopWorkspaceApplicationGroupAssociation",
	}:
		if err := (&virtualv1alpha1.DesktopWorkspaceApplicationGroupAssociation{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "DesktopWorkspaceApplicationGroupAssociation")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Hub",
	}:
		if err := (&virtualv1alpha1.Hub{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Hub")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HubBGPConnection",
	}:
		if err := (&virtualv1alpha1.HubBGPConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HubBGPConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HubConnection",
	}:
		if err := (&virtualv1alpha1.HubConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HubConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HubIP",
	}:
		if err := (&virtualv1alpha1.HubIP{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HubIP")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HubRouteTable",
	}:
		if err := (&virtualv1alpha1.HubRouteTable{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HubRouteTable")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "HubSecurityPartnerProvider",
	}:
		if err := (&virtualv1alpha1.HubSecurityPartnerProvider{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "HubSecurityPartnerProvider")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Machine",
	}:
		if err := (&virtualv1alpha1.Machine{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Machine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MachineConfigurationPolicyAssignment",
	}:
		if err := (&virtualv1alpha1.MachineConfigurationPolicyAssignment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MachineConfigurationPolicyAssignment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MachineDataDiskAttachment",
	}:
		if err := (&virtualv1alpha1.MachineDataDiskAttachment{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MachineDataDiskAttachment")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MachineExtension",
	}:
		if err := (&virtualv1alpha1.MachineExtension{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MachineExtension")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MachineScaleSet",
	}:
		if err := (&virtualv1alpha1.MachineScaleSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MachineScaleSet")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "MachineScaleSetExtension",
	}:
		if err := (&virtualv1alpha1.MachineScaleSetExtension{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "MachineScaleSetExtension")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Network",
	}:
		if err := (&virtualv1alpha1.Network{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Network")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkGateway",
	}:
		if err := (&virtualv1alpha1.NetworkGateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkGateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkGatewayConnection",
	}:
		if err := (&virtualv1alpha1.NetworkGatewayConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkGatewayConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "NetworkPeering",
	}:
		if err := (&virtualv1alpha1.NetworkPeering{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "NetworkPeering")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "virtual.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Wan",
	}:
		if err := (&virtualv1alpha1.Wan{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Wan")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vmware.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Cluster",
	}:
		if err := (&vmwarev1alpha1.Cluster{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Cluster")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vmware.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ExpressRouteAuthorization",
	}:
		if err := (&vmwarev1alpha1.ExpressRouteAuthorization{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ExpressRouteAuthorization")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vmware.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "PrivateCloud",
	}:
		if err := (&vmwarev1alpha1.PrivateCloud{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "PrivateCloud")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Gateway",
	}:
		if err := (&vpnv1alpha1.Gateway{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Gateway")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "GatewayConnection",
	}:
		if err := (&vpnv1alpha1.GatewayConnection{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "GatewayConnection")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ServerConfiguration",
	}:
		if err := (&vpnv1alpha1.ServerConfiguration{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ServerConfiguration")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "vpn.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "Site",
	}:
		if err := (&vpnv1alpha1.Site{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "Site")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "web.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "ApplicationFirewallPolicy",
	}:
		if err := (&webv1alpha1.ApplicationFirewallPolicy{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "ApplicationFirewallPolicy")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "windows.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualMachine",
	}:
		if err := (&windowsv1alpha1.VirtualMachine{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualMachine")
			return err
		}
	case schema.GroupVersionKind{
		Group:   "windows.azurerm.kubeform.com",
		Version: "v1alpha1",
		Kind:    "VirtualMachineScaleSet",
	}:
		if err := (&windowsv1alpha1.VirtualMachineScaleSet{}).SetupWebhookWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create webhook", "webhook", "VirtualMachineScaleSet")
			return err
		}

	default:
		return fmt.Errorf("Invalid Webhook")
	}

	return nil
}
